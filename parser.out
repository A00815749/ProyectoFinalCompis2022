Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    STR
    TRUE
    FALSE
    MEDIA
    MEDIANA
    MODA
    VARIANZA
    STDEV
    PLOTXY

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR
Rule 2     neuraltablefunctions -> ID
Rule 3     varsgl -> VARS vars
Rule 4     varsgl -> empty
Rule 5     vars -> typing COLON neuralinsertvar varsarr varsmul vars
Rule 6     vars -> empty
Rule 7     neuralinsertvar -> ID
Rule 8     varsarr -> LEFTSQR CTEINT RIGHTSQR
Rule 9     varsarr -> empty
Rule 10    varsmul -> COMMA neuralinsertvar varsarr varsmul
Rule 11    varsmul -> SEMICOLON
Rule 12    modules -> FUNCTION functype neuralinsertfuncname funcparam
Rule 13    modules -> empty
Rule 14    neuralinsertfuncname -> ID
Rule 15    functype -> VOID
Rule 16    functype -> typing
Rule 17    funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules
Rule 18    neuralendfuncs -> <empty>
Rule 19    typing -> INT
Rule 20    typing -> FLOAT
Rule 21    typing -> CHAR
Rule 22    parameters -> typing COLON ID idarray mulparams
Rule 23    parameters -> empty
Rule 24    mulparams -> COMMA parameters
Rule 25    mulparams -> empty
Rule 26    statutes -> assign statutesaux
Rule 27    statutes -> reading statutesaux
Rule 28    statutes -> writing statutesaux
Rule 29    statutes -> returning statutesaux
Rule 30    statutes -> ifing statutesaux
Rule 31    statutes -> whiling statutesaux
Rule 32    statutes -> foring statutesaux
Rule 33    statutes -> exp statutesaux
Rule 34    statutes -> specialfunc statutesaux
Rule 35    statutesaux -> statutes
Rule 36    statutesaux -> empty
Rule 37    specialfunc -> empty
Rule 38    assign -> ID idarray EQUAL exp SEMICOLON
Rule 39    writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
Rule 40    auxwrite -> writetyping
Rule 41    auxwrite -> exp
Rule 42    writetyping -> STRING
Rule 43    writetyping -> CTECHAR
Rule 44    mulwrite -> COMMA auxwrite mulwrite
Rule 45    mulwrite -> empty
Rule 46    reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
Rule 47    mulread -> COMMA ID idarray mulread
Rule 48    mulread -> empty
Rule 49    returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON
Rule 50    ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
Rule 51    elsing -> ELSE LEFTBR statutes RIGHTBR
Rule 52    elsing -> empty
Rule 53    whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
Rule 54    foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
Rule 55    idarray -> LEFTSQR exp RIGHTSQR
Rule 56    idarray -> empty
Rule 57    exp -> andexp exp1
Rule 58    exp1 -> OR exp
Rule 59    exp1 -> empty
Rule 60    andexp -> boolexp andexp1
Rule 61    andexp1 -> AND andexp
Rule 62    andexp1 -> empty
Rule 63    boolexp -> arithexp boolexp1
Rule 64    boolexp1 -> GREATER arithexp
Rule 65    boolexp1 -> GREATERAND arithexp
Rule 66    boolexp1 -> LESSER arithexp
Rule 67    boolexp1 -> LESSERAND arithexp
Rule 68    boolexp1 -> SAME arithexp
Rule 69    boolexp1 -> NOTSAME arithexp
Rule 70    boolexp1 -> NOT arithexp
Rule 71    boolexp1 -> empty
Rule 72    arithexp -> geoexp arithexp1
Rule 73    arithexp1 -> PLUS arithexp
Rule 74    arithexp1 -> REST arithexp
Rule 75    arithexp1 -> empty
Rule 76    geoexp -> finexp geoexp1
Rule 77    geoexp1 -> TIMES geoexp
Rule 78    geoexp1 -> DIVIDE geoexp
Rule 79    geoexp1 -> empty
Rule 80    finexp -> LEFTPAR exp RIGHTPAR
Rule 81    finexp -> cteexp
Rule 82    cteexp -> CTEINT
Rule 83    cteexp -> CTEFLOAT
Rule 84    cteexp -> CTECHAR
Rule 85    cteexp -> ID paramsexp
Rule 86    paramsexp -> LEFTPAR paramsexp2 RIGHTPAR
Rule 87    paramsexp -> idarray
Rule 88    paramsexp2 -> exp auxparamsexp2
Rule 89    paramsexp2 -> empty
Rule 90    auxparamsexp2 -> COMMA exp auxparamsexp2
Rule 91    auxparamsexp2 -> empty
Rule 92    empty -> <empty>
Rule 93    debug -> empty

Terminals, with rules where they appear

AND                  : 61
CHAR                 : 21
COLON                : 5 22
COMMA                : 10 24 44 47 90
CTECHAR              : 43 84
CTEFLOAT             : 83
CTEINT               : 8 82
DIVIDE               : 78
DO                   : 53 54
ELSE                 : 51
EQUAL                : 38 54
FALSE                : 
FLOAT                : 20
FOR                  : 54
FUNCTION             : 12
GREATER              : 64
GREATERAND           : 65
ID                   : 2 7 14 22 38 46 47 54 85
IF                   : 50
INT                  : 19
LEFTBR               : 1 17 50 51 53 54
LEFTPAR              : 1 17 39 46 49 50 53 80 86
LEFTSQR              : 8 55
LESSER               : 66
LESSERAND            : 67
MAIN                 : 1
MEDIA                : 
MEDIANA              : 
MODA                 : 
NOT                  : 70
NOTSAME              : 69
OR                   : 58
PLOTXY               : 
PLUS                 : 73
PROGRAM              : 1
READ                 : 46
REST                 : 74
RETURN               : 49
RIGHTBR              : 1 17 50 51 53 54
RIGHTPAR             : 1 17 39 46 49 50 53 80 86
RIGHTSQR             : 8 55
SAME                 : 68
SEMICOLON            : 1 11 17 38 39 46 49
STDEV                : 
STR                  : 
STRING               : 42
THEN                 : 50
TIMES                : 77
TO                   : 54
TRUE                 : 
VARIANZA             : 
VARS                 : 3
VOID                 : 15
WHILE                : 53
WRITE                : 39
error                : 

Nonterminals, with rules where they appear

andexp               : 57 61
andexp1              : 60
arithexp             : 63 64 65 66 67 68 69 70 73 74
arithexp1            : 72
assign               : 26
auxparamsexp2        : 88 90
auxwrite             : 39 44
boolexp              : 60
boolexp1             : 63
cteexp               : 81
debug                : 
elsing               : 50
empty                : 4 6 9 13 23 25 36 37 45 48 52 56 59 62 71 75 79 89 91 93
exp                  : 33 38 41 49 50 53 54 54 55 58 80 88 90
exp1                 : 57
finexp               : 76
foring               : 32
funcparam            : 12
functype             : 12
geoexp               : 72 77 78
geoexp1              : 76
idarray              : 22 38 46 47 54 87
ifing                : 30
modules              : 1 17
mulparams            : 22
mulread              : 46 47
mulwrite             : 39 44
neuralendfuncs       : 17
neuralinsertfuncname : 12
neuralinsertvar      : 5 10
neuraltablefunctions : 1
parameters           : 17 24
paramsexp            : 85
paramsexp2           : 86
program              : 0
reading              : 27
returning            : 29
specialfunc          : 34
statutes             : 1 17 35 50 51 53 54
statutesaux          : 26 27 28 29 30 31 32 33 34
typing               : 5 16 22
vars                 : 3 5
varsarr              : 5 10
varsgl               : 1 17
varsmul              : 5 10
whiling              : 31
writetyping          : 40
writing              : 28

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR
    (2) neuraltablefunctions -> . ID

    ID              shift and go to state 4

    neuraltablefunctions           shift and go to state 3

state 3

    (1) program -> PROGRAM neuraltablefunctions . SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR

    SEMICOLON       shift and go to state 5


state 4

    (2) neuraltablefunctions -> ID .

    SEMICOLON       reduce using rule 2 (neuraltablefunctions -> ID .)


state 5

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON . varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR
    (3) varsgl -> . VARS vars
    (4) varsgl -> . empty
    (92) empty -> .

    VARS            shift and go to state 7
    FUNCTION        reduce using rule 92 (empty -> .)
    MAIN            reduce using rule 92 (empty -> .)

    varsgl                         shift and go to state 6
    empty                          shift and go to state 8

state 6

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl . modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR
    (12) modules -> . FUNCTION functype neuralinsertfuncname funcparam
    (13) modules -> . empty
    (92) empty -> .

    FUNCTION        shift and go to state 10
    MAIN            reduce using rule 92 (empty -> .)

    modules                        shift and go to state 9
    empty                          shift and go to state 11

state 7

    (3) varsgl -> VARS . vars
    (5) vars -> . typing COLON neuralinsertvar varsarr varsmul vars
    (6) vars -> . empty
    (19) typing -> . INT
    (20) typing -> . FLOAT
    (21) typing -> . CHAR
    (92) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    FUNCTION        reduce using rule 92 (empty -> .)
    MAIN            reduce using rule 92 (empty -> .)
    LEFTBR          reduce using rule 92 (empty -> .)

    vars                           shift and go to state 12
    typing                         shift and go to state 13
    empty                          shift and go to state 14

state 8

    (4) varsgl -> empty .

    FUNCTION        reduce using rule 4 (varsgl -> empty .)
    MAIN            reduce using rule 4 (varsgl -> empty .)
    LEFTBR          reduce using rule 4 (varsgl -> empty .)


state 9

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules . MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR

    MAIN            shift and go to state 18


state 10

    (12) modules -> FUNCTION . functype neuralinsertfuncname funcparam
    (15) functype -> . VOID
    (16) functype -> . typing
    (19) typing -> . INT
    (20) typing -> . FLOAT
    (21) typing -> . CHAR

    VOID            shift and go to state 20
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    functype                       shift and go to state 19
    typing                         shift and go to state 21

state 11

    (13) modules -> empty .

    MAIN            reduce using rule 13 (modules -> empty .)


state 12

    (3) varsgl -> VARS vars .

    FUNCTION        reduce using rule 3 (varsgl -> VARS vars .)
    MAIN            reduce using rule 3 (varsgl -> VARS vars .)
    LEFTBR          reduce using rule 3 (varsgl -> VARS vars .)


state 13

    (5) vars -> typing . COLON neuralinsertvar varsarr varsmul vars

    COLON           shift and go to state 22


state 14

    (6) vars -> empty .

    FUNCTION        reduce using rule 6 (vars -> empty .)
    MAIN            reduce using rule 6 (vars -> empty .)
    LEFTBR          reduce using rule 6 (vars -> empty .)


state 15

    (19) typing -> INT .

    COLON           reduce using rule 19 (typing -> INT .)
    ID              reduce using rule 19 (typing -> INT .)


state 16

    (20) typing -> FLOAT .

    COLON           reduce using rule 20 (typing -> FLOAT .)
    ID              reduce using rule 20 (typing -> FLOAT .)


state 17

    (21) typing -> CHAR .

    COLON           reduce using rule 21 (typing -> CHAR .)
    ID              reduce using rule 21 (typing -> CHAR .)


state 18

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN . LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR

    LEFTPAR         shift and go to state 23


state 19

    (12) modules -> FUNCTION functype . neuralinsertfuncname funcparam
    (14) neuralinsertfuncname -> . ID

    ID              shift and go to state 25

    neuralinsertfuncname           shift and go to state 24

state 20

    (15) functype -> VOID .

    ID              reduce using rule 15 (functype -> VOID .)


state 21

    (16) functype -> typing .

    ID              reduce using rule 16 (functype -> typing .)


state 22

    (5) vars -> typing COLON . neuralinsertvar varsarr varsmul vars
    (7) neuralinsertvar -> . ID

    ID              shift and go to state 27

    neuralinsertvar                shift and go to state 26

state 23

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR . RIGHTPAR LEFTBR statutes RIGHTBR

    RIGHTPAR        shift and go to state 28


state 24

    (12) modules -> FUNCTION functype neuralinsertfuncname . funcparam
    (17) funcparam -> . LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules

    LEFTPAR         shift and go to state 30

    funcparam                      shift and go to state 29

state 25

    (14) neuralinsertfuncname -> ID .

    LEFTPAR         reduce using rule 14 (neuralinsertfuncname -> ID .)


state 26

    (5) vars -> typing COLON neuralinsertvar . varsarr varsmul vars
    (8) varsarr -> . LEFTSQR CTEINT RIGHTSQR
    (9) varsarr -> . empty
    (92) empty -> .

    LEFTSQR         shift and go to state 32
    COMMA           reduce using rule 92 (empty -> .)
    SEMICOLON       reduce using rule 92 (empty -> .)

    varsarr                        shift and go to state 31
    empty                          shift and go to state 33

state 27

    (7) neuralinsertvar -> ID .

    LEFTSQR         reduce using rule 7 (neuralinsertvar -> ID .)
    COMMA           reduce using rule 7 (neuralinsertvar -> ID .)
    SEMICOLON       reduce using rule 7 (neuralinsertvar -> ID .)


state 28

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR . LEFTBR statutes RIGHTBR

    LEFTBR          shift and go to state 34


state 29

    (12) modules -> FUNCTION functype neuralinsertfuncname funcparam .

    MAIN            reduce using rule 12 (modules -> FUNCTION functype neuralinsertfuncname funcparam .)


state 30

    (17) funcparam -> LEFTPAR . parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules
    (22) parameters -> . typing COLON ID idarray mulparams
    (23) parameters -> . empty
    (19) typing -> . INT
    (20) typing -> . FLOAT
    (21) typing -> . CHAR
    (92) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    RIGHTPAR        reduce using rule 92 (empty -> .)

    parameters                     shift and go to state 35
    typing                         shift and go to state 36
    empty                          shift and go to state 37

state 31

    (5) vars -> typing COLON neuralinsertvar varsarr . varsmul vars
    (10) varsmul -> . COMMA neuralinsertvar varsarr varsmul
    (11) varsmul -> . SEMICOLON

    COMMA           shift and go to state 39
    SEMICOLON       shift and go to state 40

    varsmul                        shift and go to state 38

state 32

    (8) varsarr -> LEFTSQR . CTEINT RIGHTSQR

    CTEINT          shift and go to state 41


state 33

    (9) varsarr -> empty .

    COMMA           reduce using rule 9 (varsarr -> empty .)
    SEMICOLON       reduce using rule 9 (varsarr -> empty .)


state 34

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR . statutes RIGHTBR
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (92) empty -> .
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RIGHTBR         reduce using rule 92 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69

  ! ID              [ reduce using rule 92 (empty -> .) ]
  ! READ            [ reduce using rule 92 (empty -> .) ]
  ! WRITE           [ reduce using rule 92 (empty -> .) ]
  ! RETURN          [ reduce using rule 92 (empty -> .) ]
  ! IF              [ reduce using rule 92 (empty -> .) ]
  ! WHILE           [ reduce using rule 92 (empty -> .) ]
  ! FOR             [ reduce using rule 92 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 92 (empty -> .) ]
  ! CTEINT          [ reduce using rule 92 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 92 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 92 (empty -> .) ]

    statutes                       shift and go to state 43
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    empty                          shift and go to state 61
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 35

    (17) funcparam -> LEFTPAR parameters . RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules

    RIGHTPAR        shift and go to state 70


state 36

    (22) parameters -> typing . COLON ID idarray mulparams

    COLON           shift and go to state 71


state 37

    (23) parameters -> empty .

    RIGHTPAR        reduce using rule 23 (parameters -> empty .)


state 38

    (5) vars -> typing COLON neuralinsertvar varsarr varsmul . vars
    (5) vars -> . typing COLON neuralinsertvar varsarr varsmul vars
    (6) vars -> . empty
    (19) typing -> . INT
    (20) typing -> . FLOAT
    (21) typing -> . CHAR
    (92) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    FUNCTION        reduce using rule 92 (empty -> .)
    MAIN            reduce using rule 92 (empty -> .)
    LEFTBR          reduce using rule 92 (empty -> .)

    typing                         shift and go to state 13
    vars                           shift and go to state 72
    empty                          shift and go to state 14

state 39

    (10) varsmul -> COMMA . neuralinsertvar varsarr varsmul
    (7) neuralinsertvar -> . ID

    ID              shift and go to state 27

    neuralinsertvar                shift and go to state 73

state 40

    (11) varsmul -> SEMICOLON .

    INT             reduce using rule 11 (varsmul -> SEMICOLON .)
    FLOAT           reduce using rule 11 (varsmul -> SEMICOLON .)
    CHAR            reduce using rule 11 (varsmul -> SEMICOLON .)
    FUNCTION        reduce using rule 11 (varsmul -> SEMICOLON .)
    MAIN            reduce using rule 11 (varsmul -> SEMICOLON .)
    LEFTBR          reduce using rule 11 (varsmul -> SEMICOLON .)


state 41

    (8) varsarr -> LEFTSQR CTEINT . RIGHTSQR

    RIGHTSQR        shift and go to state 74


state 42

    (80) finexp -> LEFTPAR . exp RIGHTPAR
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    exp                            shift and go to state 75
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 43

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes . RIGHTBR

    RIGHTBR         shift and go to state 77


state 44

    (26) statutes -> assign . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (92) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 92 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69

  ! ID              [ reduce using rule 92 (empty -> .) ]
  ! READ            [ reduce using rule 92 (empty -> .) ]
  ! WRITE           [ reduce using rule 92 (empty -> .) ]
  ! RETURN          [ reduce using rule 92 (empty -> .) ]
  ! IF              [ reduce using rule 92 (empty -> .) ]
  ! WHILE           [ reduce using rule 92 (empty -> .) ]
  ! FOR             [ reduce using rule 92 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 92 (empty -> .) ]
  ! CTEINT          [ reduce using rule 92 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 92 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 92 (empty -> .) ]

    assign                         shift and go to state 44
    statutesaux                    shift and go to state 78
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 45

    (27) statutes -> reading . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (92) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 92 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69

  ! ID              [ reduce using rule 92 (empty -> .) ]
  ! READ            [ reduce using rule 92 (empty -> .) ]
  ! WRITE           [ reduce using rule 92 (empty -> .) ]
  ! RETURN          [ reduce using rule 92 (empty -> .) ]
  ! IF              [ reduce using rule 92 (empty -> .) ]
  ! WHILE           [ reduce using rule 92 (empty -> .) ]
  ! FOR             [ reduce using rule 92 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 92 (empty -> .) ]
  ! CTEINT          [ reduce using rule 92 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 92 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 92 (empty -> .) ]

    reading                        shift and go to state 45
    statutesaux                    shift and go to state 81
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    assign                         shift and go to state 44
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 46

    (28) statutes -> writing . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (92) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 92 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69

  ! ID              [ reduce using rule 92 (empty -> .) ]
  ! READ            [ reduce using rule 92 (empty -> .) ]
  ! WRITE           [ reduce using rule 92 (empty -> .) ]
  ! RETURN          [ reduce using rule 92 (empty -> .) ]
  ! IF              [ reduce using rule 92 (empty -> .) ]
  ! WHILE           [ reduce using rule 92 (empty -> .) ]
  ! FOR             [ reduce using rule 92 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 92 (empty -> .) ]
  ! CTEINT          [ reduce using rule 92 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 92 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 92 (empty -> .) ]

    writing                        shift and go to state 46
    statutesaux                    shift and go to state 82
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 47

    (29) statutes -> returning . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (92) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 92 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69

  ! ID              [ reduce using rule 92 (empty -> .) ]
  ! READ            [ reduce using rule 92 (empty -> .) ]
  ! WRITE           [ reduce using rule 92 (empty -> .) ]
  ! RETURN          [ reduce using rule 92 (empty -> .) ]
  ! IF              [ reduce using rule 92 (empty -> .) ]
  ! WHILE           [ reduce using rule 92 (empty -> .) ]
  ! FOR             [ reduce using rule 92 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 92 (empty -> .) ]
  ! CTEINT          [ reduce using rule 92 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 92 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 92 (empty -> .) ]

    returning                      shift and go to state 47
    statutesaux                    shift and go to state 83
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 48

    (30) statutes -> ifing . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (92) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 92 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69

  ! ID              [ reduce using rule 92 (empty -> .) ]
  ! READ            [ reduce using rule 92 (empty -> .) ]
  ! WRITE           [ reduce using rule 92 (empty -> .) ]
  ! RETURN          [ reduce using rule 92 (empty -> .) ]
  ! IF              [ reduce using rule 92 (empty -> .) ]
  ! WHILE           [ reduce using rule 92 (empty -> .) ]
  ! FOR             [ reduce using rule 92 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 92 (empty -> .) ]
  ! CTEINT          [ reduce using rule 92 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 92 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 92 (empty -> .) ]

    ifing                          shift and go to state 48
    statutesaux                    shift and go to state 84
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 49

    (31) statutes -> whiling . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (92) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 92 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69

  ! ID              [ reduce using rule 92 (empty -> .) ]
  ! READ            [ reduce using rule 92 (empty -> .) ]
  ! WRITE           [ reduce using rule 92 (empty -> .) ]
  ! RETURN          [ reduce using rule 92 (empty -> .) ]
  ! IF              [ reduce using rule 92 (empty -> .) ]
  ! WHILE           [ reduce using rule 92 (empty -> .) ]
  ! FOR             [ reduce using rule 92 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 92 (empty -> .) ]
  ! CTEINT          [ reduce using rule 92 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 92 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 92 (empty -> .) ]

    whiling                        shift and go to state 49
    statutesaux                    shift and go to state 85
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 50

    (32) statutes -> foring . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (92) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 92 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69

  ! ID              [ reduce using rule 92 (empty -> .) ]
  ! READ            [ reduce using rule 92 (empty -> .) ]
  ! WRITE           [ reduce using rule 92 (empty -> .) ]
  ! RETURN          [ reduce using rule 92 (empty -> .) ]
  ! IF              [ reduce using rule 92 (empty -> .) ]
  ! WHILE           [ reduce using rule 92 (empty -> .) ]
  ! FOR             [ reduce using rule 92 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 92 (empty -> .) ]
  ! CTEINT          [ reduce using rule 92 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 92 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 92 (empty -> .) ]

    foring                         shift and go to state 50
    statutesaux                    shift and go to state 86
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 51

    (33) statutes -> exp . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (92) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 92 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69

  ! ID              [ reduce using rule 92 (empty -> .) ]
  ! READ            [ reduce using rule 92 (empty -> .) ]
  ! WRITE           [ reduce using rule 92 (empty -> .) ]
  ! RETURN          [ reduce using rule 92 (empty -> .) ]
  ! IF              [ reduce using rule 92 (empty -> .) ]
  ! WHILE           [ reduce using rule 92 (empty -> .) ]
  ! FOR             [ reduce using rule 92 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 92 (empty -> .) ]
  ! CTEINT          [ reduce using rule 92 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 92 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 92 (empty -> .) ]

    exp                            shift and go to state 51
    statutesaux                    shift and go to state 87
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 52

    (34) statutes -> specialfunc . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (92) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 92 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69

  ! ID              [ reduce using rule 92 (empty -> .) ]
  ! READ            [ reduce using rule 92 (empty -> .) ]
  ! WRITE           [ reduce using rule 92 (empty -> .) ]
  ! RETURN          [ reduce using rule 92 (empty -> .) ]
  ! IF              [ reduce using rule 92 (empty -> .) ]
  ! WHILE           [ reduce using rule 92 (empty -> .) ]
  ! FOR             [ reduce using rule 92 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 92 (empty -> .) ]
  ! CTEINT          [ reduce using rule 92 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 92 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 92 (empty -> .) ]

    specialfunc                    shift and go to state 52
    statutesaux                    shift and go to state 88
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 53

    (38) assign -> ID . idarray EQUAL exp SEMICOLON
    (85) cteexp -> ID . paramsexp
    (55) idarray -> . LEFTSQR exp RIGHTSQR
    (56) idarray -> . empty
    (86) paramsexp -> . LEFTPAR paramsexp2 RIGHTPAR
    (87) paramsexp -> . idarray
    (92) empty -> .

  ! shift/reduce conflict for LEFTPAR resolved as shift
    LEFTSQR         shift and go to state 91
    LEFTPAR         shift and go to state 93
    EQUAL           reduce using rule 92 (empty -> .)
    TIMES           reduce using rule 92 (empty -> .)
    DIVIDE          reduce using rule 92 (empty -> .)
    PLUS            reduce using rule 92 (empty -> .)
    REST            reduce using rule 92 (empty -> .)
    GREATER         reduce using rule 92 (empty -> .)
    GREATERAND      reduce using rule 92 (empty -> .)
    LESSER          reduce using rule 92 (empty -> .)
    LESSERAND       reduce using rule 92 (empty -> .)
    SAME            reduce using rule 92 (empty -> .)
    NOTSAME         reduce using rule 92 (empty -> .)
    NOT             reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    OR              reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    READ            reduce using rule 92 (empty -> .)
    WRITE           reduce using rule 92 (empty -> .)
    RETURN          reduce using rule 92 (empty -> .)
    IF              reduce using rule 92 (empty -> .)
    WHILE           reduce using rule 92 (empty -> .)
    FOR             reduce using rule 92 (empty -> .)
    CTEINT          reduce using rule 92 (empty -> .)
    CTEFLOAT        reduce using rule 92 (empty -> .)
    CTECHAR         reduce using rule 92 (empty -> .)
    RIGHTBR         reduce using rule 92 (empty -> .)

  ! LEFTPAR         [ reduce using rule 92 (empty -> .) ]

    idarray                        shift and go to state 89
    paramsexp                      shift and go to state 90
    empty                          shift and go to state 92

state 54

    (46) reading -> READ . LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 94


state 55

    (39) writing -> WRITE . LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 95


state 56

    (49) returning -> RETURN . LEFTPAR exp RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 96


state 57

    (50) ifing -> IF . LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing

    LEFTPAR         shift and go to state 97


state 58

    (53) whiling -> WHILE . LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR

    LEFTPAR         shift and go to state 98


state 59

    (54) foring -> FOR . ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR

    ID              shift and go to state 99


state 60

    (57) exp -> andexp . exp1
    (58) exp1 -> . OR exp
    (59) exp1 -> . empty
    (92) empty -> .

    OR              shift and go to state 101
    ID              reduce using rule 92 (empty -> .)
    READ            reduce using rule 92 (empty -> .)
    WRITE           reduce using rule 92 (empty -> .)
    RETURN          reduce using rule 92 (empty -> .)
    IF              reduce using rule 92 (empty -> .)
    WHILE           reduce using rule 92 (empty -> .)
    FOR             reduce using rule 92 (empty -> .)
    LEFTPAR         reduce using rule 92 (empty -> .)
    CTEINT          reduce using rule 92 (empty -> .)
    CTEFLOAT        reduce using rule 92 (empty -> .)
    CTECHAR         reduce using rule 92 (empty -> .)
    RIGHTBR         reduce using rule 92 (empty -> .)
    RIGHTPAR        reduce using rule 92 (empty -> .)
    RIGHTSQR        reduce using rule 92 (empty -> .)
    COMMA           reduce using rule 92 (empty -> .)
    SEMICOLON       reduce using rule 92 (empty -> .)
    TO              reduce using rule 92 (empty -> .)
    DO              reduce using rule 92 (empty -> .)

    exp1                           shift and go to state 100
    empty                          shift and go to state 102

state 61

    (37) specialfunc -> empty .

    ID              reduce using rule 37 (specialfunc -> empty .)
    READ            reduce using rule 37 (specialfunc -> empty .)
    WRITE           reduce using rule 37 (specialfunc -> empty .)
    RETURN          reduce using rule 37 (specialfunc -> empty .)
    IF              reduce using rule 37 (specialfunc -> empty .)
    WHILE           reduce using rule 37 (specialfunc -> empty .)
    FOR             reduce using rule 37 (specialfunc -> empty .)
    LEFTPAR         reduce using rule 37 (specialfunc -> empty .)
    CTEINT          reduce using rule 37 (specialfunc -> empty .)
    CTEFLOAT        reduce using rule 37 (specialfunc -> empty .)
    CTECHAR         reduce using rule 37 (specialfunc -> empty .)
    RIGHTBR         reduce using rule 37 (specialfunc -> empty .)


state 62

    (60) andexp -> boolexp . andexp1
    (61) andexp1 -> . AND andexp
    (62) andexp1 -> . empty
    (92) empty -> .

    AND             shift and go to state 104
    OR              reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    READ            reduce using rule 92 (empty -> .)
    WRITE           reduce using rule 92 (empty -> .)
    RETURN          reduce using rule 92 (empty -> .)
    IF              reduce using rule 92 (empty -> .)
    WHILE           reduce using rule 92 (empty -> .)
    FOR             reduce using rule 92 (empty -> .)
    LEFTPAR         reduce using rule 92 (empty -> .)
    CTEINT          reduce using rule 92 (empty -> .)
    CTEFLOAT        reduce using rule 92 (empty -> .)
    CTECHAR         reduce using rule 92 (empty -> .)
    RIGHTBR         reduce using rule 92 (empty -> .)
    RIGHTPAR        reduce using rule 92 (empty -> .)
    RIGHTSQR        reduce using rule 92 (empty -> .)
    COMMA           reduce using rule 92 (empty -> .)
    SEMICOLON       reduce using rule 92 (empty -> .)
    TO              reduce using rule 92 (empty -> .)
    DO              reduce using rule 92 (empty -> .)

    andexp1                        shift and go to state 103
    empty                          shift and go to state 105

state 63

    (63) boolexp -> arithexp . boolexp1
    (64) boolexp1 -> . GREATER arithexp
    (65) boolexp1 -> . GREATERAND arithexp
    (66) boolexp1 -> . LESSER arithexp
    (67) boolexp1 -> . LESSERAND arithexp
    (68) boolexp1 -> . SAME arithexp
    (69) boolexp1 -> . NOTSAME arithexp
    (70) boolexp1 -> . NOT arithexp
    (71) boolexp1 -> . empty
    (92) empty -> .

    GREATER         shift and go to state 107
    GREATERAND      shift and go to state 108
    LESSER          shift and go to state 109
    LESSERAND       shift and go to state 110
    SAME            shift and go to state 111
    NOTSAME         shift and go to state 112
    NOT             shift and go to state 113
    AND             reduce using rule 92 (empty -> .)
    OR              reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    READ            reduce using rule 92 (empty -> .)
    WRITE           reduce using rule 92 (empty -> .)
    RETURN          reduce using rule 92 (empty -> .)
    IF              reduce using rule 92 (empty -> .)
    WHILE           reduce using rule 92 (empty -> .)
    FOR             reduce using rule 92 (empty -> .)
    LEFTPAR         reduce using rule 92 (empty -> .)
    CTEINT          reduce using rule 92 (empty -> .)
    CTEFLOAT        reduce using rule 92 (empty -> .)
    CTECHAR         reduce using rule 92 (empty -> .)
    RIGHTBR         reduce using rule 92 (empty -> .)
    RIGHTPAR        reduce using rule 92 (empty -> .)
    RIGHTSQR        reduce using rule 92 (empty -> .)
    COMMA           reduce using rule 92 (empty -> .)
    SEMICOLON       reduce using rule 92 (empty -> .)
    TO              reduce using rule 92 (empty -> .)
    DO              reduce using rule 92 (empty -> .)

    boolexp1                       shift and go to state 106
    empty                          shift and go to state 114

state 64

    (72) arithexp -> geoexp . arithexp1
    (73) arithexp1 -> . PLUS arithexp
    (74) arithexp1 -> . REST arithexp
    (75) arithexp1 -> . empty
    (92) empty -> .

    PLUS            shift and go to state 116
    REST            shift and go to state 117
    GREATER         reduce using rule 92 (empty -> .)
    GREATERAND      reduce using rule 92 (empty -> .)
    LESSER          reduce using rule 92 (empty -> .)
    LESSERAND       reduce using rule 92 (empty -> .)
    SAME            reduce using rule 92 (empty -> .)
    NOTSAME         reduce using rule 92 (empty -> .)
    NOT             reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    OR              reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    READ            reduce using rule 92 (empty -> .)
    WRITE           reduce using rule 92 (empty -> .)
    RETURN          reduce using rule 92 (empty -> .)
    IF              reduce using rule 92 (empty -> .)
    WHILE           reduce using rule 92 (empty -> .)
    FOR             reduce using rule 92 (empty -> .)
    LEFTPAR         reduce using rule 92 (empty -> .)
    CTEINT          reduce using rule 92 (empty -> .)
    CTEFLOAT        reduce using rule 92 (empty -> .)
    CTECHAR         reduce using rule 92 (empty -> .)
    RIGHTBR         reduce using rule 92 (empty -> .)
    RIGHTPAR        reduce using rule 92 (empty -> .)
    RIGHTSQR        reduce using rule 92 (empty -> .)
    COMMA           reduce using rule 92 (empty -> .)
    SEMICOLON       reduce using rule 92 (empty -> .)
    TO              reduce using rule 92 (empty -> .)
    DO              reduce using rule 92 (empty -> .)

    arithexp1                      shift and go to state 115
    empty                          shift and go to state 118

state 65

    (76) geoexp -> finexp . geoexp1
    (77) geoexp1 -> . TIMES geoexp
    (78) geoexp1 -> . DIVIDE geoexp
    (79) geoexp1 -> . empty
    (92) empty -> .

    TIMES           shift and go to state 120
    DIVIDE          shift and go to state 121
    PLUS            reduce using rule 92 (empty -> .)
    REST            reduce using rule 92 (empty -> .)
    GREATER         reduce using rule 92 (empty -> .)
    GREATERAND      reduce using rule 92 (empty -> .)
    LESSER          reduce using rule 92 (empty -> .)
    LESSERAND       reduce using rule 92 (empty -> .)
    SAME            reduce using rule 92 (empty -> .)
    NOTSAME         reduce using rule 92 (empty -> .)
    NOT             reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    OR              reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    READ            reduce using rule 92 (empty -> .)
    WRITE           reduce using rule 92 (empty -> .)
    RETURN          reduce using rule 92 (empty -> .)
    IF              reduce using rule 92 (empty -> .)
    WHILE           reduce using rule 92 (empty -> .)
    FOR             reduce using rule 92 (empty -> .)
    LEFTPAR         reduce using rule 92 (empty -> .)
    CTEINT          reduce using rule 92 (empty -> .)
    CTEFLOAT        reduce using rule 92 (empty -> .)
    CTECHAR         reduce using rule 92 (empty -> .)
    RIGHTBR         reduce using rule 92 (empty -> .)
    RIGHTPAR        reduce using rule 92 (empty -> .)
    RIGHTSQR        reduce using rule 92 (empty -> .)
    COMMA           reduce using rule 92 (empty -> .)
    SEMICOLON       reduce using rule 92 (empty -> .)
    TO              reduce using rule 92 (empty -> .)
    DO              reduce using rule 92 (empty -> .)

    geoexp1                        shift and go to state 119
    empty                          shift and go to state 122

state 66

    (81) finexp -> cteexp .

    TIMES           reduce using rule 81 (finexp -> cteexp .)
    DIVIDE          reduce using rule 81 (finexp -> cteexp .)
    PLUS            reduce using rule 81 (finexp -> cteexp .)
    REST            reduce using rule 81 (finexp -> cteexp .)
    GREATER         reduce using rule 81 (finexp -> cteexp .)
    GREATERAND      reduce using rule 81 (finexp -> cteexp .)
    LESSER          reduce using rule 81 (finexp -> cteexp .)
    LESSERAND       reduce using rule 81 (finexp -> cteexp .)
    SAME            reduce using rule 81 (finexp -> cteexp .)
    NOTSAME         reduce using rule 81 (finexp -> cteexp .)
    NOT             reduce using rule 81 (finexp -> cteexp .)
    AND             reduce using rule 81 (finexp -> cteexp .)
    OR              reduce using rule 81 (finexp -> cteexp .)
    ID              reduce using rule 81 (finexp -> cteexp .)
    READ            reduce using rule 81 (finexp -> cteexp .)
    WRITE           reduce using rule 81 (finexp -> cteexp .)
    RETURN          reduce using rule 81 (finexp -> cteexp .)
    IF              reduce using rule 81 (finexp -> cteexp .)
    WHILE           reduce using rule 81 (finexp -> cteexp .)
    FOR             reduce using rule 81 (finexp -> cteexp .)
    LEFTPAR         reduce using rule 81 (finexp -> cteexp .)
    CTEINT          reduce using rule 81 (finexp -> cteexp .)
    CTEFLOAT        reduce using rule 81 (finexp -> cteexp .)
    CTECHAR         reduce using rule 81 (finexp -> cteexp .)
    RIGHTBR         reduce using rule 81 (finexp -> cteexp .)
    RIGHTPAR        reduce using rule 81 (finexp -> cteexp .)
    RIGHTSQR        reduce using rule 81 (finexp -> cteexp .)
    COMMA           reduce using rule 81 (finexp -> cteexp .)
    SEMICOLON       reduce using rule 81 (finexp -> cteexp .)
    TO              reduce using rule 81 (finexp -> cteexp .)
    DO              reduce using rule 81 (finexp -> cteexp .)


state 67

    (82) cteexp -> CTEINT .

    TIMES           reduce using rule 82 (cteexp -> CTEINT .)
    DIVIDE          reduce using rule 82 (cteexp -> CTEINT .)
    PLUS            reduce using rule 82 (cteexp -> CTEINT .)
    REST            reduce using rule 82 (cteexp -> CTEINT .)
    GREATER         reduce using rule 82 (cteexp -> CTEINT .)
    GREATERAND      reduce using rule 82 (cteexp -> CTEINT .)
    LESSER          reduce using rule 82 (cteexp -> CTEINT .)
    LESSERAND       reduce using rule 82 (cteexp -> CTEINT .)
    SAME            reduce using rule 82 (cteexp -> CTEINT .)
    NOTSAME         reduce using rule 82 (cteexp -> CTEINT .)
    NOT             reduce using rule 82 (cteexp -> CTEINT .)
    AND             reduce using rule 82 (cteexp -> CTEINT .)
    OR              reduce using rule 82 (cteexp -> CTEINT .)
    ID              reduce using rule 82 (cteexp -> CTEINT .)
    READ            reduce using rule 82 (cteexp -> CTEINT .)
    WRITE           reduce using rule 82 (cteexp -> CTEINT .)
    RETURN          reduce using rule 82 (cteexp -> CTEINT .)
    IF              reduce using rule 82 (cteexp -> CTEINT .)
    WHILE           reduce using rule 82 (cteexp -> CTEINT .)
    FOR             reduce using rule 82 (cteexp -> CTEINT .)
    LEFTPAR         reduce using rule 82 (cteexp -> CTEINT .)
    CTEINT          reduce using rule 82 (cteexp -> CTEINT .)
    CTEFLOAT        reduce using rule 82 (cteexp -> CTEINT .)
    CTECHAR         reduce using rule 82 (cteexp -> CTEINT .)
    RIGHTBR         reduce using rule 82 (cteexp -> CTEINT .)
    RIGHTPAR        reduce using rule 82 (cteexp -> CTEINT .)
    RIGHTSQR        reduce using rule 82 (cteexp -> CTEINT .)
    COMMA           reduce using rule 82 (cteexp -> CTEINT .)
    SEMICOLON       reduce using rule 82 (cteexp -> CTEINT .)
    TO              reduce using rule 82 (cteexp -> CTEINT .)
    DO              reduce using rule 82 (cteexp -> CTEINT .)


state 68

    (83) cteexp -> CTEFLOAT .

    TIMES           reduce using rule 83 (cteexp -> CTEFLOAT .)
    DIVIDE          reduce using rule 83 (cteexp -> CTEFLOAT .)
    PLUS            reduce using rule 83 (cteexp -> CTEFLOAT .)
    REST            reduce using rule 83 (cteexp -> CTEFLOAT .)
    GREATER         reduce using rule 83 (cteexp -> CTEFLOAT .)
    GREATERAND      reduce using rule 83 (cteexp -> CTEFLOAT .)
    LESSER          reduce using rule 83 (cteexp -> CTEFLOAT .)
    LESSERAND       reduce using rule 83 (cteexp -> CTEFLOAT .)
    SAME            reduce using rule 83 (cteexp -> CTEFLOAT .)
    NOTSAME         reduce using rule 83 (cteexp -> CTEFLOAT .)
    NOT             reduce using rule 83 (cteexp -> CTEFLOAT .)
    AND             reduce using rule 83 (cteexp -> CTEFLOAT .)
    OR              reduce using rule 83 (cteexp -> CTEFLOAT .)
    ID              reduce using rule 83 (cteexp -> CTEFLOAT .)
    READ            reduce using rule 83 (cteexp -> CTEFLOAT .)
    WRITE           reduce using rule 83 (cteexp -> CTEFLOAT .)
    RETURN          reduce using rule 83 (cteexp -> CTEFLOAT .)
    IF              reduce using rule 83 (cteexp -> CTEFLOAT .)
    WHILE           reduce using rule 83 (cteexp -> CTEFLOAT .)
    FOR             reduce using rule 83 (cteexp -> CTEFLOAT .)
    LEFTPAR         reduce using rule 83 (cteexp -> CTEFLOAT .)
    CTEINT          reduce using rule 83 (cteexp -> CTEFLOAT .)
    CTEFLOAT        reduce using rule 83 (cteexp -> CTEFLOAT .)
    CTECHAR         reduce using rule 83 (cteexp -> CTEFLOAT .)
    RIGHTBR         reduce using rule 83 (cteexp -> CTEFLOAT .)
    RIGHTPAR        reduce using rule 83 (cteexp -> CTEFLOAT .)
    RIGHTSQR        reduce using rule 83 (cteexp -> CTEFLOAT .)
    COMMA           reduce using rule 83 (cteexp -> CTEFLOAT .)
    SEMICOLON       reduce using rule 83 (cteexp -> CTEFLOAT .)
    TO              reduce using rule 83 (cteexp -> CTEFLOAT .)
    DO              reduce using rule 83 (cteexp -> CTEFLOAT .)


state 69

    (84) cteexp -> CTECHAR .

    TIMES           reduce using rule 84 (cteexp -> CTECHAR .)
    DIVIDE          reduce using rule 84 (cteexp -> CTECHAR .)
    PLUS            reduce using rule 84 (cteexp -> CTECHAR .)
    REST            reduce using rule 84 (cteexp -> CTECHAR .)
    GREATER         reduce using rule 84 (cteexp -> CTECHAR .)
    GREATERAND      reduce using rule 84 (cteexp -> CTECHAR .)
    LESSER          reduce using rule 84 (cteexp -> CTECHAR .)
    LESSERAND       reduce using rule 84 (cteexp -> CTECHAR .)
    SAME            reduce using rule 84 (cteexp -> CTECHAR .)
    NOTSAME         reduce using rule 84 (cteexp -> CTECHAR .)
    NOT             reduce using rule 84 (cteexp -> CTECHAR .)
    AND             reduce using rule 84 (cteexp -> CTECHAR .)
    OR              reduce using rule 84 (cteexp -> CTECHAR .)
    ID              reduce using rule 84 (cteexp -> CTECHAR .)
    READ            reduce using rule 84 (cteexp -> CTECHAR .)
    WRITE           reduce using rule 84 (cteexp -> CTECHAR .)
    RETURN          reduce using rule 84 (cteexp -> CTECHAR .)
    IF              reduce using rule 84 (cteexp -> CTECHAR .)
    WHILE           reduce using rule 84 (cteexp -> CTECHAR .)
    FOR             reduce using rule 84 (cteexp -> CTECHAR .)
    LEFTPAR         reduce using rule 84 (cteexp -> CTECHAR .)
    CTEINT          reduce using rule 84 (cteexp -> CTECHAR .)
    CTEFLOAT        reduce using rule 84 (cteexp -> CTECHAR .)
    CTECHAR         reduce using rule 84 (cteexp -> CTECHAR .)
    RIGHTBR         reduce using rule 84 (cteexp -> CTECHAR .)
    RIGHTPAR        reduce using rule 84 (cteexp -> CTECHAR .)
    RIGHTSQR        reduce using rule 84 (cteexp -> CTECHAR .)
    COMMA           reduce using rule 84 (cteexp -> CTECHAR .)
    SEMICOLON       reduce using rule 84 (cteexp -> CTECHAR .)
    TO              reduce using rule 84 (cteexp -> CTECHAR .)
    DO              reduce using rule 84 (cteexp -> CTECHAR .)


state 70

    (17) funcparam -> LEFTPAR parameters RIGHTPAR . SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules

    SEMICOLON       shift and go to state 123


state 71

    (22) parameters -> typing COLON . ID idarray mulparams

    ID              shift and go to state 124


state 72

    (5) vars -> typing COLON neuralinsertvar varsarr varsmul vars .

    FUNCTION        reduce using rule 5 (vars -> typing COLON neuralinsertvar varsarr varsmul vars .)
    MAIN            reduce using rule 5 (vars -> typing COLON neuralinsertvar varsarr varsmul vars .)
    LEFTBR          reduce using rule 5 (vars -> typing COLON neuralinsertvar varsarr varsmul vars .)


state 73

    (10) varsmul -> COMMA neuralinsertvar . varsarr varsmul
    (8) varsarr -> . LEFTSQR CTEINT RIGHTSQR
    (9) varsarr -> . empty
    (92) empty -> .

    LEFTSQR         shift and go to state 32
    COMMA           reduce using rule 92 (empty -> .)
    SEMICOLON       reduce using rule 92 (empty -> .)

    varsarr                        shift and go to state 125
    empty                          shift and go to state 33

state 74

    (8) varsarr -> LEFTSQR CTEINT RIGHTSQR .

    COMMA           reduce using rule 8 (varsarr -> LEFTSQR CTEINT RIGHTSQR .)
    SEMICOLON       reduce using rule 8 (varsarr -> LEFTSQR CTEINT RIGHTSQR .)


state 75

    (80) finexp -> LEFTPAR exp . RIGHTPAR

    RIGHTPAR        shift and go to state 126


state 76

    (85) cteexp -> ID . paramsexp
    (86) paramsexp -> . LEFTPAR paramsexp2 RIGHTPAR
    (87) paramsexp -> . idarray
    (55) idarray -> . LEFTSQR exp RIGHTSQR
    (56) idarray -> . empty
    (92) empty -> .

  ! shift/reduce conflict for LEFTPAR resolved as shift
    LEFTPAR         shift and go to state 93
    LEFTSQR         shift and go to state 91
    TIMES           reduce using rule 92 (empty -> .)
    DIVIDE          reduce using rule 92 (empty -> .)
    PLUS            reduce using rule 92 (empty -> .)
    REST            reduce using rule 92 (empty -> .)
    GREATER         reduce using rule 92 (empty -> .)
    GREATERAND      reduce using rule 92 (empty -> .)
    LESSER          reduce using rule 92 (empty -> .)
    LESSERAND       reduce using rule 92 (empty -> .)
    SAME            reduce using rule 92 (empty -> .)
    NOTSAME         reduce using rule 92 (empty -> .)
    NOT             reduce using rule 92 (empty -> .)
    AND             reduce using rule 92 (empty -> .)
    OR              reduce using rule 92 (empty -> .)
    RIGHTPAR        reduce using rule 92 (empty -> .)
    RIGHTSQR        reduce using rule 92 (empty -> .)
    COMMA           reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    READ            reduce using rule 92 (empty -> .)
    WRITE           reduce using rule 92 (empty -> .)
    RETURN          reduce using rule 92 (empty -> .)
    IF              reduce using rule 92 (empty -> .)
    WHILE           reduce using rule 92 (empty -> .)
    FOR             reduce using rule 92 (empty -> .)
    CTEINT          reduce using rule 92 (empty -> .)
    CTEFLOAT        reduce using rule 92 (empty -> .)
    CTECHAR         reduce using rule 92 (empty -> .)
    RIGHTBR         reduce using rule 92 (empty -> .)
    SEMICOLON       reduce using rule 92 (empty -> .)
    TO              reduce using rule 92 (empty -> .)
    DO              reduce using rule 92 (empty -> .)

  ! LEFTPAR         [ reduce using rule 92 (empty -> .) ]

    paramsexp                      shift and go to state 90
    idarray                        shift and go to state 127
    empty                          shift and go to state 92

state 77

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR .

    $end            reduce using rule 1 (program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR .)


state 78

    (26) statutes -> assign statutesaux .

    RIGHTBR         reduce using rule 26 (statutes -> assign statutesaux .)


state 79

    (35) statutesaux -> statutes .

    RIGHTBR         reduce using rule 35 (statutesaux -> statutes .)


state 80

    (36) statutesaux -> empty .
    (37) specialfunc -> empty .

  ! reduce/reduce conflict for RIGHTBR resolved using rule 36 (statutesaux -> empty .)
    RIGHTBR         reduce using rule 36 (statutesaux -> empty .)
    ID              reduce using rule 37 (specialfunc -> empty .)
    READ            reduce using rule 37 (specialfunc -> empty .)
    WRITE           reduce using rule 37 (specialfunc -> empty .)
    RETURN          reduce using rule 37 (specialfunc -> empty .)
    IF              reduce using rule 37 (specialfunc -> empty .)
    WHILE           reduce using rule 37 (specialfunc -> empty .)
    FOR             reduce using rule 37 (specialfunc -> empty .)
    LEFTPAR         reduce using rule 37 (specialfunc -> empty .)
    CTEINT          reduce using rule 37 (specialfunc -> empty .)
    CTEFLOAT        reduce using rule 37 (specialfunc -> empty .)
    CTECHAR         reduce using rule 37 (specialfunc -> empty .)

  ! RIGHTBR         [ reduce using rule 37 (specialfunc -> empty .) ]


state 81

    (27) statutes -> reading statutesaux .

    RIGHTBR         reduce using rule 27 (statutes -> reading statutesaux .)


state 82

    (28) statutes -> writing statutesaux .

    RIGHTBR         reduce using rule 28 (statutes -> writing statutesaux .)


state 83

    (29) statutes -> returning statutesaux .

    RIGHTBR         reduce using rule 29 (statutes -> returning statutesaux .)


state 84

    (30) statutes -> ifing statutesaux .

    RIGHTBR         reduce using rule 30 (statutes -> ifing statutesaux .)


state 85

    (31) statutes -> whiling statutesaux .

    RIGHTBR         reduce using rule 31 (statutes -> whiling statutesaux .)


state 86

    (32) statutes -> foring statutesaux .

    RIGHTBR         reduce using rule 32 (statutes -> foring statutesaux .)


state 87

    (33) statutes -> exp statutesaux .

    RIGHTBR         reduce using rule 33 (statutes -> exp statutesaux .)


state 88

    (34) statutes -> specialfunc statutesaux .

    RIGHTBR         reduce using rule 34 (statutes -> specialfunc statutesaux .)


state 89

    (38) assign -> ID idarray . EQUAL exp SEMICOLON
    (87) paramsexp -> idarray .

    EQUAL           shift and go to state 128
    TIMES           reduce using rule 87 (paramsexp -> idarray .)
    DIVIDE          reduce using rule 87 (paramsexp -> idarray .)
    PLUS            reduce using rule 87 (paramsexp -> idarray .)
    REST            reduce using rule 87 (paramsexp -> idarray .)
    GREATER         reduce using rule 87 (paramsexp -> idarray .)
    GREATERAND      reduce using rule 87 (paramsexp -> idarray .)
    LESSER          reduce using rule 87 (paramsexp -> idarray .)
    LESSERAND       reduce using rule 87 (paramsexp -> idarray .)
    SAME            reduce using rule 87 (paramsexp -> idarray .)
    NOTSAME         reduce using rule 87 (paramsexp -> idarray .)
    NOT             reduce using rule 87 (paramsexp -> idarray .)
    AND             reduce using rule 87 (paramsexp -> idarray .)
    OR              reduce using rule 87 (paramsexp -> idarray .)
    ID              reduce using rule 87 (paramsexp -> idarray .)
    READ            reduce using rule 87 (paramsexp -> idarray .)
    WRITE           reduce using rule 87 (paramsexp -> idarray .)
    RETURN          reduce using rule 87 (paramsexp -> idarray .)
    IF              reduce using rule 87 (paramsexp -> idarray .)
    WHILE           reduce using rule 87 (paramsexp -> idarray .)
    FOR             reduce using rule 87 (paramsexp -> idarray .)
    LEFTPAR         reduce using rule 87 (paramsexp -> idarray .)
    CTEINT          reduce using rule 87 (paramsexp -> idarray .)
    CTEFLOAT        reduce using rule 87 (paramsexp -> idarray .)
    CTECHAR         reduce using rule 87 (paramsexp -> idarray .)
    RIGHTBR         reduce using rule 87 (paramsexp -> idarray .)


state 90

    (85) cteexp -> ID paramsexp .

    TIMES           reduce using rule 85 (cteexp -> ID paramsexp .)
    DIVIDE          reduce using rule 85 (cteexp -> ID paramsexp .)
    PLUS            reduce using rule 85 (cteexp -> ID paramsexp .)
    REST            reduce using rule 85 (cteexp -> ID paramsexp .)
    GREATER         reduce using rule 85 (cteexp -> ID paramsexp .)
    GREATERAND      reduce using rule 85 (cteexp -> ID paramsexp .)
    LESSER          reduce using rule 85 (cteexp -> ID paramsexp .)
    LESSERAND       reduce using rule 85 (cteexp -> ID paramsexp .)
    SAME            reduce using rule 85 (cteexp -> ID paramsexp .)
    NOTSAME         reduce using rule 85 (cteexp -> ID paramsexp .)
    NOT             reduce using rule 85 (cteexp -> ID paramsexp .)
    AND             reduce using rule 85 (cteexp -> ID paramsexp .)
    OR              reduce using rule 85 (cteexp -> ID paramsexp .)
    ID              reduce using rule 85 (cteexp -> ID paramsexp .)
    READ            reduce using rule 85 (cteexp -> ID paramsexp .)
    WRITE           reduce using rule 85 (cteexp -> ID paramsexp .)
    RETURN          reduce using rule 85 (cteexp -> ID paramsexp .)
    IF              reduce using rule 85 (cteexp -> ID paramsexp .)
    WHILE           reduce using rule 85 (cteexp -> ID paramsexp .)
    FOR             reduce using rule 85 (cteexp -> ID paramsexp .)
    LEFTPAR         reduce using rule 85 (cteexp -> ID paramsexp .)
    CTEINT          reduce using rule 85 (cteexp -> ID paramsexp .)
    CTEFLOAT        reduce using rule 85 (cteexp -> ID paramsexp .)
    CTECHAR         reduce using rule 85 (cteexp -> ID paramsexp .)
    RIGHTBR         reduce using rule 85 (cteexp -> ID paramsexp .)
    RIGHTPAR        reduce using rule 85 (cteexp -> ID paramsexp .)
    RIGHTSQR        reduce using rule 85 (cteexp -> ID paramsexp .)
    COMMA           reduce using rule 85 (cteexp -> ID paramsexp .)
    SEMICOLON       reduce using rule 85 (cteexp -> ID paramsexp .)
    TO              reduce using rule 85 (cteexp -> ID paramsexp .)
    DO              reduce using rule 85 (cteexp -> ID paramsexp .)


state 91

    (55) idarray -> LEFTSQR . exp RIGHTSQR
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    exp                            shift and go to state 129
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 92

    (56) idarray -> empty .

    EQUAL           reduce using rule 56 (idarray -> empty .)
    TIMES           reduce using rule 56 (idarray -> empty .)
    DIVIDE          reduce using rule 56 (idarray -> empty .)
    PLUS            reduce using rule 56 (idarray -> empty .)
    REST            reduce using rule 56 (idarray -> empty .)
    GREATER         reduce using rule 56 (idarray -> empty .)
    GREATERAND      reduce using rule 56 (idarray -> empty .)
    LESSER          reduce using rule 56 (idarray -> empty .)
    LESSERAND       reduce using rule 56 (idarray -> empty .)
    SAME            reduce using rule 56 (idarray -> empty .)
    NOTSAME         reduce using rule 56 (idarray -> empty .)
    NOT             reduce using rule 56 (idarray -> empty .)
    AND             reduce using rule 56 (idarray -> empty .)
    OR              reduce using rule 56 (idarray -> empty .)
    ID              reduce using rule 56 (idarray -> empty .)
    READ            reduce using rule 56 (idarray -> empty .)
    WRITE           reduce using rule 56 (idarray -> empty .)
    RETURN          reduce using rule 56 (idarray -> empty .)
    IF              reduce using rule 56 (idarray -> empty .)
    WHILE           reduce using rule 56 (idarray -> empty .)
    FOR             reduce using rule 56 (idarray -> empty .)
    LEFTPAR         reduce using rule 56 (idarray -> empty .)
    CTEINT          reduce using rule 56 (idarray -> empty .)
    CTEFLOAT        reduce using rule 56 (idarray -> empty .)
    CTECHAR         reduce using rule 56 (idarray -> empty .)
    RIGHTBR         reduce using rule 56 (idarray -> empty .)
    RIGHTPAR        reduce using rule 56 (idarray -> empty .)
    RIGHTSQR        reduce using rule 56 (idarray -> empty .)
    COMMA           reduce using rule 56 (idarray -> empty .)
    SEMICOLON       reduce using rule 56 (idarray -> empty .)
    TO              reduce using rule 56 (idarray -> empty .)
    DO              reduce using rule 56 (idarray -> empty .)


state 93

    (86) paramsexp -> LEFTPAR . paramsexp2 RIGHTPAR
    (88) paramsexp2 -> . exp auxparamsexp2
    (89) paramsexp2 -> . empty
    (57) exp -> . andexp exp1
    (92) empty -> .
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    RIGHTPAR        reduce using rule 92 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    paramsexp2                     shift and go to state 130
    exp                            shift and go to state 131
    empty                          shift and go to state 132
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 94

    (46) reading -> READ LEFTPAR . ID idarray mulread RIGHTPAR SEMICOLON

    ID              shift and go to state 133


state 95

    (39) writing -> WRITE LEFTPAR . auxwrite mulwrite RIGHTPAR SEMICOLON
    (40) auxwrite -> . writetyping
    (41) auxwrite -> . exp
    (42) writetyping -> . STRING
    (43) writetyping -> . CTECHAR
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    STRING          shift and go to state 137
    CTECHAR         shift and go to state 138
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    ID              shift and go to state 76

    auxwrite                       shift and go to state 134
    writetyping                    shift and go to state 135
    exp                            shift and go to state 136
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 96

    (49) returning -> RETURN LEFTPAR . exp RIGHTPAR SEMICOLON
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    exp                            shift and go to state 139
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 97

    (50) ifing -> IF LEFTPAR . exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    exp                            shift and go to state 140
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 98

    (53) whiling -> WHILE LEFTPAR . exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    exp                            shift and go to state 141
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 99

    (54) foring -> FOR ID . idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (55) idarray -> . LEFTSQR exp RIGHTSQR
    (56) idarray -> . empty
    (92) empty -> .

    LEFTSQR         shift and go to state 91
    EQUAL           reduce using rule 92 (empty -> .)

    idarray                        shift and go to state 142
    empty                          shift and go to state 92

state 100

    (57) exp -> andexp exp1 .

    ID              reduce using rule 57 (exp -> andexp exp1 .)
    READ            reduce using rule 57 (exp -> andexp exp1 .)
    WRITE           reduce using rule 57 (exp -> andexp exp1 .)
    RETURN          reduce using rule 57 (exp -> andexp exp1 .)
    IF              reduce using rule 57 (exp -> andexp exp1 .)
    WHILE           reduce using rule 57 (exp -> andexp exp1 .)
    FOR             reduce using rule 57 (exp -> andexp exp1 .)
    LEFTPAR         reduce using rule 57 (exp -> andexp exp1 .)
    CTEINT          reduce using rule 57 (exp -> andexp exp1 .)
    CTEFLOAT        reduce using rule 57 (exp -> andexp exp1 .)
    CTECHAR         reduce using rule 57 (exp -> andexp exp1 .)
    RIGHTBR         reduce using rule 57 (exp -> andexp exp1 .)
    RIGHTPAR        reduce using rule 57 (exp -> andexp exp1 .)
    RIGHTSQR        reduce using rule 57 (exp -> andexp exp1 .)
    COMMA           reduce using rule 57 (exp -> andexp exp1 .)
    SEMICOLON       reduce using rule 57 (exp -> andexp exp1 .)
    TO              reduce using rule 57 (exp -> andexp exp1 .)
    DO              reduce using rule 57 (exp -> andexp exp1 .)


state 101

    (58) exp1 -> OR . exp
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    exp                            shift and go to state 143
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 102

    (59) exp1 -> empty .

    ID              reduce using rule 59 (exp1 -> empty .)
    READ            reduce using rule 59 (exp1 -> empty .)
    WRITE           reduce using rule 59 (exp1 -> empty .)
    RETURN          reduce using rule 59 (exp1 -> empty .)
    IF              reduce using rule 59 (exp1 -> empty .)
    WHILE           reduce using rule 59 (exp1 -> empty .)
    FOR             reduce using rule 59 (exp1 -> empty .)
    LEFTPAR         reduce using rule 59 (exp1 -> empty .)
    CTEINT          reduce using rule 59 (exp1 -> empty .)
    CTEFLOAT        reduce using rule 59 (exp1 -> empty .)
    CTECHAR         reduce using rule 59 (exp1 -> empty .)
    RIGHTBR         reduce using rule 59 (exp1 -> empty .)
    RIGHTPAR        reduce using rule 59 (exp1 -> empty .)
    RIGHTSQR        reduce using rule 59 (exp1 -> empty .)
    COMMA           reduce using rule 59 (exp1 -> empty .)
    SEMICOLON       reduce using rule 59 (exp1 -> empty .)
    TO              reduce using rule 59 (exp1 -> empty .)
    DO              reduce using rule 59 (exp1 -> empty .)


state 103

    (60) andexp -> boolexp andexp1 .

    OR              reduce using rule 60 (andexp -> boolexp andexp1 .)
    ID              reduce using rule 60 (andexp -> boolexp andexp1 .)
    READ            reduce using rule 60 (andexp -> boolexp andexp1 .)
    WRITE           reduce using rule 60 (andexp -> boolexp andexp1 .)
    RETURN          reduce using rule 60 (andexp -> boolexp andexp1 .)
    IF              reduce using rule 60 (andexp -> boolexp andexp1 .)
    WHILE           reduce using rule 60 (andexp -> boolexp andexp1 .)
    FOR             reduce using rule 60 (andexp -> boolexp andexp1 .)
    LEFTPAR         reduce using rule 60 (andexp -> boolexp andexp1 .)
    CTEINT          reduce using rule 60 (andexp -> boolexp andexp1 .)
    CTEFLOAT        reduce using rule 60 (andexp -> boolexp andexp1 .)
    CTECHAR         reduce using rule 60 (andexp -> boolexp andexp1 .)
    RIGHTBR         reduce using rule 60 (andexp -> boolexp andexp1 .)
    RIGHTPAR        reduce using rule 60 (andexp -> boolexp andexp1 .)
    RIGHTSQR        reduce using rule 60 (andexp -> boolexp andexp1 .)
    COMMA           reduce using rule 60 (andexp -> boolexp andexp1 .)
    SEMICOLON       reduce using rule 60 (andexp -> boolexp andexp1 .)
    TO              reduce using rule 60 (andexp -> boolexp andexp1 .)
    DO              reduce using rule 60 (andexp -> boolexp andexp1 .)


state 104

    (61) andexp1 -> AND . andexp
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    andexp                         shift and go to state 144
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 105

    (62) andexp1 -> empty .

    OR              reduce using rule 62 (andexp1 -> empty .)
    ID              reduce using rule 62 (andexp1 -> empty .)
    READ            reduce using rule 62 (andexp1 -> empty .)
    WRITE           reduce using rule 62 (andexp1 -> empty .)
    RETURN          reduce using rule 62 (andexp1 -> empty .)
    IF              reduce using rule 62 (andexp1 -> empty .)
    WHILE           reduce using rule 62 (andexp1 -> empty .)
    FOR             reduce using rule 62 (andexp1 -> empty .)
    LEFTPAR         reduce using rule 62 (andexp1 -> empty .)
    CTEINT          reduce using rule 62 (andexp1 -> empty .)
    CTEFLOAT        reduce using rule 62 (andexp1 -> empty .)
    CTECHAR         reduce using rule 62 (andexp1 -> empty .)
    RIGHTBR         reduce using rule 62 (andexp1 -> empty .)
    RIGHTPAR        reduce using rule 62 (andexp1 -> empty .)
    RIGHTSQR        reduce using rule 62 (andexp1 -> empty .)
    COMMA           reduce using rule 62 (andexp1 -> empty .)
    SEMICOLON       reduce using rule 62 (andexp1 -> empty .)
    TO              reduce using rule 62 (andexp1 -> empty .)
    DO              reduce using rule 62 (andexp1 -> empty .)


state 106

    (63) boolexp -> arithexp boolexp1 .

    AND             reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    OR              reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    ID              reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    READ            reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    WRITE           reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    RETURN          reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    IF              reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    WHILE           reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    FOR             reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    LEFTPAR         reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    CTEINT          reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    CTEFLOAT        reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    CTECHAR         reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    RIGHTBR         reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    RIGHTPAR        reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    RIGHTSQR        reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    COMMA           reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    SEMICOLON       reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    TO              reduce using rule 63 (boolexp -> arithexp boolexp1 .)
    DO              reduce using rule 63 (boolexp -> arithexp boolexp1 .)


state 107

    (64) boolexp1 -> GREATER . arithexp
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    arithexp                       shift and go to state 145
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 108

    (65) boolexp1 -> GREATERAND . arithexp
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    arithexp                       shift and go to state 146
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 109

    (66) boolexp1 -> LESSER . arithexp
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    arithexp                       shift and go to state 147
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 110

    (67) boolexp1 -> LESSERAND . arithexp
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    arithexp                       shift and go to state 148
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 111

    (68) boolexp1 -> SAME . arithexp
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    arithexp                       shift and go to state 149
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 112

    (69) boolexp1 -> NOTSAME . arithexp
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    arithexp                       shift and go to state 150
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 113

    (70) boolexp1 -> NOT . arithexp
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    arithexp                       shift and go to state 151
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 114

    (71) boolexp1 -> empty .

    AND             reduce using rule 71 (boolexp1 -> empty .)
    OR              reduce using rule 71 (boolexp1 -> empty .)
    ID              reduce using rule 71 (boolexp1 -> empty .)
    READ            reduce using rule 71 (boolexp1 -> empty .)
    WRITE           reduce using rule 71 (boolexp1 -> empty .)
    RETURN          reduce using rule 71 (boolexp1 -> empty .)
    IF              reduce using rule 71 (boolexp1 -> empty .)
    WHILE           reduce using rule 71 (boolexp1 -> empty .)
    FOR             reduce using rule 71 (boolexp1 -> empty .)
    LEFTPAR         reduce using rule 71 (boolexp1 -> empty .)
    CTEINT          reduce using rule 71 (boolexp1 -> empty .)
    CTEFLOAT        reduce using rule 71 (boolexp1 -> empty .)
    CTECHAR         reduce using rule 71 (boolexp1 -> empty .)
    RIGHTBR         reduce using rule 71 (boolexp1 -> empty .)
    RIGHTPAR        reduce using rule 71 (boolexp1 -> empty .)
    RIGHTSQR        reduce using rule 71 (boolexp1 -> empty .)
    COMMA           reduce using rule 71 (boolexp1 -> empty .)
    SEMICOLON       reduce using rule 71 (boolexp1 -> empty .)
    TO              reduce using rule 71 (boolexp1 -> empty .)
    DO              reduce using rule 71 (boolexp1 -> empty .)


state 115

    (72) arithexp -> geoexp arithexp1 .

    GREATER         reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    GREATERAND      reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    LESSER          reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    LESSERAND       reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    SAME            reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    NOTSAME         reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    NOT             reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    AND             reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    OR              reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    ID              reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    READ            reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    WRITE           reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    RETURN          reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    IF              reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    WHILE           reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    FOR             reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    LEFTPAR         reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    CTEINT          reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    CTEFLOAT        reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    CTECHAR         reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    RIGHTBR         reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    RIGHTPAR        reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    RIGHTSQR        reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    COMMA           reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    SEMICOLON       reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    TO              reduce using rule 72 (arithexp -> geoexp arithexp1 .)
    DO              reduce using rule 72 (arithexp -> geoexp arithexp1 .)


state 116

    (73) arithexp1 -> PLUS . arithexp
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    arithexp                       shift and go to state 152
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 117

    (74) arithexp1 -> REST . arithexp
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    arithexp                       shift and go to state 153
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 118

    (75) arithexp1 -> empty .

    GREATER         reduce using rule 75 (arithexp1 -> empty .)
    GREATERAND      reduce using rule 75 (arithexp1 -> empty .)
    LESSER          reduce using rule 75 (arithexp1 -> empty .)
    LESSERAND       reduce using rule 75 (arithexp1 -> empty .)
    SAME            reduce using rule 75 (arithexp1 -> empty .)
    NOTSAME         reduce using rule 75 (arithexp1 -> empty .)
    NOT             reduce using rule 75 (arithexp1 -> empty .)
    AND             reduce using rule 75 (arithexp1 -> empty .)
    OR              reduce using rule 75 (arithexp1 -> empty .)
    ID              reduce using rule 75 (arithexp1 -> empty .)
    READ            reduce using rule 75 (arithexp1 -> empty .)
    WRITE           reduce using rule 75 (arithexp1 -> empty .)
    RETURN          reduce using rule 75 (arithexp1 -> empty .)
    IF              reduce using rule 75 (arithexp1 -> empty .)
    WHILE           reduce using rule 75 (arithexp1 -> empty .)
    FOR             reduce using rule 75 (arithexp1 -> empty .)
    LEFTPAR         reduce using rule 75 (arithexp1 -> empty .)
    CTEINT          reduce using rule 75 (arithexp1 -> empty .)
    CTEFLOAT        reduce using rule 75 (arithexp1 -> empty .)
    CTECHAR         reduce using rule 75 (arithexp1 -> empty .)
    RIGHTBR         reduce using rule 75 (arithexp1 -> empty .)
    RIGHTPAR        reduce using rule 75 (arithexp1 -> empty .)
    RIGHTSQR        reduce using rule 75 (arithexp1 -> empty .)
    COMMA           reduce using rule 75 (arithexp1 -> empty .)
    SEMICOLON       reduce using rule 75 (arithexp1 -> empty .)
    TO              reduce using rule 75 (arithexp1 -> empty .)
    DO              reduce using rule 75 (arithexp1 -> empty .)


state 119

    (76) geoexp -> finexp geoexp1 .

    PLUS            reduce using rule 76 (geoexp -> finexp geoexp1 .)
    REST            reduce using rule 76 (geoexp -> finexp geoexp1 .)
    GREATER         reduce using rule 76 (geoexp -> finexp geoexp1 .)
    GREATERAND      reduce using rule 76 (geoexp -> finexp geoexp1 .)
    LESSER          reduce using rule 76 (geoexp -> finexp geoexp1 .)
    LESSERAND       reduce using rule 76 (geoexp -> finexp geoexp1 .)
    SAME            reduce using rule 76 (geoexp -> finexp geoexp1 .)
    NOTSAME         reduce using rule 76 (geoexp -> finexp geoexp1 .)
    NOT             reduce using rule 76 (geoexp -> finexp geoexp1 .)
    AND             reduce using rule 76 (geoexp -> finexp geoexp1 .)
    OR              reduce using rule 76 (geoexp -> finexp geoexp1 .)
    ID              reduce using rule 76 (geoexp -> finexp geoexp1 .)
    READ            reduce using rule 76 (geoexp -> finexp geoexp1 .)
    WRITE           reduce using rule 76 (geoexp -> finexp geoexp1 .)
    RETURN          reduce using rule 76 (geoexp -> finexp geoexp1 .)
    IF              reduce using rule 76 (geoexp -> finexp geoexp1 .)
    WHILE           reduce using rule 76 (geoexp -> finexp geoexp1 .)
    FOR             reduce using rule 76 (geoexp -> finexp geoexp1 .)
    LEFTPAR         reduce using rule 76 (geoexp -> finexp geoexp1 .)
    CTEINT          reduce using rule 76 (geoexp -> finexp geoexp1 .)
    CTEFLOAT        reduce using rule 76 (geoexp -> finexp geoexp1 .)
    CTECHAR         reduce using rule 76 (geoexp -> finexp geoexp1 .)
    RIGHTBR         reduce using rule 76 (geoexp -> finexp geoexp1 .)
    RIGHTPAR        reduce using rule 76 (geoexp -> finexp geoexp1 .)
    RIGHTSQR        reduce using rule 76 (geoexp -> finexp geoexp1 .)
    COMMA           reduce using rule 76 (geoexp -> finexp geoexp1 .)
    SEMICOLON       reduce using rule 76 (geoexp -> finexp geoexp1 .)
    TO              reduce using rule 76 (geoexp -> finexp geoexp1 .)
    DO              reduce using rule 76 (geoexp -> finexp geoexp1 .)


state 120

    (77) geoexp1 -> TIMES . geoexp
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    geoexp                         shift and go to state 154
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 121

    (78) geoexp1 -> DIVIDE . geoexp
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    geoexp                         shift and go to state 155
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 122

    (79) geoexp1 -> empty .

    PLUS            reduce using rule 79 (geoexp1 -> empty .)
    REST            reduce using rule 79 (geoexp1 -> empty .)
    GREATER         reduce using rule 79 (geoexp1 -> empty .)
    GREATERAND      reduce using rule 79 (geoexp1 -> empty .)
    LESSER          reduce using rule 79 (geoexp1 -> empty .)
    LESSERAND       reduce using rule 79 (geoexp1 -> empty .)
    SAME            reduce using rule 79 (geoexp1 -> empty .)
    NOTSAME         reduce using rule 79 (geoexp1 -> empty .)
    NOT             reduce using rule 79 (geoexp1 -> empty .)
    AND             reduce using rule 79 (geoexp1 -> empty .)
    OR              reduce using rule 79 (geoexp1 -> empty .)
    ID              reduce using rule 79 (geoexp1 -> empty .)
    READ            reduce using rule 79 (geoexp1 -> empty .)
    WRITE           reduce using rule 79 (geoexp1 -> empty .)
    RETURN          reduce using rule 79 (geoexp1 -> empty .)
    IF              reduce using rule 79 (geoexp1 -> empty .)
    WHILE           reduce using rule 79 (geoexp1 -> empty .)
    FOR             reduce using rule 79 (geoexp1 -> empty .)
    LEFTPAR         reduce using rule 79 (geoexp1 -> empty .)
    CTEINT          reduce using rule 79 (geoexp1 -> empty .)
    CTEFLOAT        reduce using rule 79 (geoexp1 -> empty .)
    CTECHAR         reduce using rule 79 (geoexp1 -> empty .)
    RIGHTBR         reduce using rule 79 (geoexp1 -> empty .)
    RIGHTPAR        reduce using rule 79 (geoexp1 -> empty .)
    RIGHTSQR        reduce using rule 79 (geoexp1 -> empty .)
    COMMA           reduce using rule 79 (geoexp1 -> empty .)
    SEMICOLON       reduce using rule 79 (geoexp1 -> empty .)
    TO              reduce using rule 79 (geoexp1 -> empty .)
    DO              reduce using rule 79 (geoexp1 -> empty .)


state 123

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON . varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules
    (3) varsgl -> . VARS vars
    (4) varsgl -> . empty
    (92) empty -> .

    VARS            shift and go to state 7
    LEFTBR          reduce using rule 92 (empty -> .)

    varsgl                         shift and go to state 156
    empty                          shift and go to state 8

state 124

    (22) parameters -> typing COLON ID . idarray mulparams
    (55) idarray -> . LEFTSQR exp RIGHTSQR
    (56) idarray -> . empty
    (92) empty -> .

    LEFTSQR         shift and go to state 91
    COMMA           reduce using rule 92 (empty -> .)
    RIGHTPAR        reduce using rule 92 (empty -> .)

    idarray                        shift and go to state 157
    empty                          shift and go to state 92

state 125

    (10) varsmul -> COMMA neuralinsertvar varsarr . varsmul
    (10) varsmul -> . COMMA neuralinsertvar varsarr varsmul
    (11) varsmul -> . SEMICOLON

    COMMA           shift and go to state 39
    SEMICOLON       shift and go to state 40

    varsmul                        shift and go to state 158

state 126

    (80) finexp -> LEFTPAR exp RIGHTPAR .

    TIMES           reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    DIVIDE          reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    PLUS            reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    REST            reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    GREATER         reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    GREATERAND      reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    LESSER          reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    LESSERAND       reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    SAME            reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    NOTSAME         reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    NOT             reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    AND             reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    OR              reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    ID              reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    READ            reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    WRITE           reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    RETURN          reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    IF              reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    WHILE           reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    FOR             reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    LEFTPAR         reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    CTEINT          reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    CTEFLOAT        reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    CTECHAR         reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    RIGHTBR         reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    RIGHTPAR        reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    RIGHTSQR        reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    COMMA           reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    SEMICOLON       reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    TO              reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)
    DO              reduce using rule 80 (finexp -> LEFTPAR exp RIGHTPAR .)


state 127

    (87) paramsexp -> idarray .

    TIMES           reduce using rule 87 (paramsexp -> idarray .)
    DIVIDE          reduce using rule 87 (paramsexp -> idarray .)
    PLUS            reduce using rule 87 (paramsexp -> idarray .)
    REST            reduce using rule 87 (paramsexp -> idarray .)
    GREATER         reduce using rule 87 (paramsexp -> idarray .)
    GREATERAND      reduce using rule 87 (paramsexp -> idarray .)
    LESSER          reduce using rule 87 (paramsexp -> idarray .)
    LESSERAND       reduce using rule 87 (paramsexp -> idarray .)
    SAME            reduce using rule 87 (paramsexp -> idarray .)
    NOTSAME         reduce using rule 87 (paramsexp -> idarray .)
    NOT             reduce using rule 87 (paramsexp -> idarray .)
    AND             reduce using rule 87 (paramsexp -> idarray .)
    OR              reduce using rule 87 (paramsexp -> idarray .)
    RIGHTPAR        reduce using rule 87 (paramsexp -> idarray .)
    RIGHTSQR        reduce using rule 87 (paramsexp -> idarray .)
    COMMA           reduce using rule 87 (paramsexp -> idarray .)
    ID              reduce using rule 87 (paramsexp -> idarray .)
    READ            reduce using rule 87 (paramsexp -> idarray .)
    WRITE           reduce using rule 87 (paramsexp -> idarray .)
    RETURN          reduce using rule 87 (paramsexp -> idarray .)
    IF              reduce using rule 87 (paramsexp -> idarray .)
    WHILE           reduce using rule 87 (paramsexp -> idarray .)
    FOR             reduce using rule 87 (paramsexp -> idarray .)
    LEFTPAR         reduce using rule 87 (paramsexp -> idarray .)
    CTEINT          reduce using rule 87 (paramsexp -> idarray .)
    CTEFLOAT        reduce using rule 87 (paramsexp -> idarray .)
    CTECHAR         reduce using rule 87 (paramsexp -> idarray .)
    RIGHTBR         reduce using rule 87 (paramsexp -> idarray .)
    SEMICOLON       reduce using rule 87 (paramsexp -> idarray .)
    TO              reduce using rule 87 (paramsexp -> idarray .)
    DO              reduce using rule 87 (paramsexp -> idarray .)


state 128

    (38) assign -> ID idarray EQUAL . exp SEMICOLON
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    exp                            shift and go to state 159
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 129

    (55) idarray -> LEFTSQR exp . RIGHTSQR

    RIGHTSQR        shift and go to state 160


state 130

    (86) paramsexp -> LEFTPAR paramsexp2 . RIGHTPAR

    RIGHTPAR        shift and go to state 161


state 131

    (88) paramsexp2 -> exp . auxparamsexp2
    (90) auxparamsexp2 -> . COMMA exp auxparamsexp2
    (91) auxparamsexp2 -> . empty
    (92) empty -> .

    COMMA           shift and go to state 163
    RIGHTPAR        reduce using rule 92 (empty -> .)

    auxparamsexp2                  shift and go to state 162
    empty                          shift and go to state 164

state 132

    (89) paramsexp2 -> empty .

    RIGHTPAR        reduce using rule 89 (paramsexp2 -> empty .)


state 133

    (46) reading -> READ LEFTPAR ID . idarray mulread RIGHTPAR SEMICOLON
    (55) idarray -> . LEFTSQR exp RIGHTSQR
    (56) idarray -> . empty
    (92) empty -> .

    LEFTSQR         shift and go to state 91
    COMMA           reduce using rule 92 (empty -> .)
    RIGHTPAR        reduce using rule 92 (empty -> .)

    idarray                        shift and go to state 165
    empty                          shift and go to state 92

state 134

    (39) writing -> WRITE LEFTPAR auxwrite . mulwrite RIGHTPAR SEMICOLON
    (44) mulwrite -> . COMMA auxwrite mulwrite
    (45) mulwrite -> . empty
    (92) empty -> .

    COMMA           shift and go to state 167
    RIGHTPAR        reduce using rule 92 (empty -> .)

    mulwrite                       shift and go to state 166
    empty                          shift and go to state 168

state 135

    (40) auxwrite -> writetyping .

    COMMA           reduce using rule 40 (auxwrite -> writetyping .)
    RIGHTPAR        reduce using rule 40 (auxwrite -> writetyping .)


state 136

    (41) auxwrite -> exp .

    COMMA           reduce using rule 41 (auxwrite -> exp .)
    RIGHTPAR        reduce using rule 41 (auxwrite -> exp .)


state 137

    (42) writetyping -> STRING .

    COMMA           reduce using rule 42 (writetyping -> STRING .)
    RIGHTPAR        reduce using rule 42 (writetyping -> STRING .)


state 138

    (43) writetyping -> CTECHAR .
    (84) cteexp -> CTECHAR .

  ! reduce/reduce conflict for COMMA resolved using rule 43 (writetyping -> CTECHAR .)
  ! reduce/reduce conflict for RIGHTPAR resolved using rule 43 (writetyping -> CTECHAR .)
    COMMA           reduce using rule 43 (writetyping -> CTECHAR .)
    RIGHTPAR        reduce using rule 43 (writetyping -> CTECHAR .)
    TIMES           reduce using rule 84 (cteexp -> CTECHAR .)
    DIVIDE          reduce using rule 84 (cteexp -> CTECHAR .)
    PLUS            reduce using rule 84 (cteexp -> CTECHAR .)
    REST            reduce using rule 84 (cteexp -> CTECHAR .)
    GREATER         reduce using rule 84 (cteexp -> CTECHAR .)
    GREATERAND      reduce using rule 84 (cteexp -> CTECHAR .)
    LESSER          reduce using rule 84 (cteexp -> CTECHAR .)
    LESSERAND       reduce using rule 84 (cteexp -> CTECHAR .)
    SAME            reduce using rule 84 (cteexp -> CTECHAR .)
    NOTSAME         reduce using rule 84 (cteexp -> CTECHAR .)
    NOT             reduce using rule 84 (cteexp -> CTECHAR .)
    AND             reduce using rule 84 (cteexp -> CTECHAR .)
    OR              reduce using rule 84 (cteexp -> CTECHAR .)

  ! COMMA           [ reduce using rule 84 (cteexp -> CTECHAR .) ]
  ! RIGHTPAR        [ reduce using rule 84 (cteexp -> CTECHAR .) ]


state 139

    (49) returning -> RETURN LEFTPAR exp . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 169


state 140

    (50) ifing -> IF LEFTPAR exp . RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing

    RIGHTPAR        shift and go to state 170


state 141

    (53) whiling -> WHILE LEFTPAR exp . RIGHTPAR DO LEFTBR statutes RIGHTBR

    RIGHTPAR        shift and go to state 171


state 142

    (54) foring -> FOR ID idarray . EQUAL exp TO exp DO LEFTBR statutes RIGHTBR

    EQUAL           shift and go to state 172


state 143

    (58) exp1 -> OR exp .

    ID              reduce using rule 58 (exp1 -> OR exp .)
    READ            reduce using rule 58 (exp1 -> OR exp .)
    WRITE           reduce using rule 58 (exp1 -> OR exp .)
    RETURN          reduce using rule 58 (exp1 -> OR exp .)
    IF              reduce using rule 58 (exp1 -> OR exp .)
    WHILE           reduce using rule 58 (exp1 -> OR exp .)
    FOR             reduce using rule 58 (exp1 -> OR exp .)
    LEFTPAR         reduce using rule 58 (exp1 -> OR exp .)
    CTEINT          reduce using rule 58 (exp1 -> OR exp .)
    CTEFLOAT        reduce using rule 58 (exp1 -> OR exp .)
    CTECHAR         reduce using rule 58 (exp1 -> OR exp .)
    RIGHTBR         reduce using rule 58 (exp1 -> OR exp .)
    RIGHTPAR        reduce using rule 58 (exp1 -> OR exp .)
    RIGHTSQR        reduce using rule 58 (exp1 -> OR exp .)
    COMMA           reduce using rule 58 (exp1 -> OR exp .)
    SEMICOLON       reduce using rule 58 (exp1 -> OR exp .)
    TO              reduce using rule 58 (exp1 -> OR exp .)
    DO              reduce using rule 58 (exp1 -> OR exp .)


state 144

    (61) andexp1 -> AND andexp .

    OR              reduce using rule 61 (andexp1 -> AND andexp .)
    ID              reduce using rule 61 (andexp1 -> AND andexp .)
    READ            reduce using rule 61 (andexp1 -> AND andexp .)
    WRITE           reduce using rule 61 (andexp1 -> AND andexp .)
    RETURN          reduce using rule 61 (andexp1 -> AND andexp .)
    IF              reduce using rule 61 (andexp1 -> AND andexp .)
    WHILE           reduce using rule 61 (andexp1 -> AND andexp .)
    FOR             reduce using rule 61 (andexp1 -> AND andexp .)
    LEFTPAR         reduce using rule 61 (andexp1 -> AND andexp .)
    CTEINT          reduce using rule 61 (andexp1 -> AND andexp .)
    CTEFLOAT        reduce using rule 61 (andexp1 -> AND andexp .)
    CTECHAR         reduce using rule 61 (andexp1 -> AND andexp .)
    RIGHTBR         reduce using rule 61 (andexp1 -> AND andexp .)
    RIGHTPAR        reduce using rule 61 (andexp1 -> AND andexp .)
    RIGHTSQR        reduce using rule 61 (andexp1 -> AND andexp .)
    COMMA           reduce using rule 61 (andexp1 -> AND andexp .)
    SEMICOLON       reduce using rule 61 (andexp1 -> AND andexp .)
    TO              reduce using rule 61 (andexp1 -> AND andexp .)
    DO              reduce using rule 61 (andexp1 -> AND andexp .)


state 145

    (64) boolexp1 -> GREATER arithexp .

    AND             reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    OR              reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    ID              reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    READ            reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    WRITE           reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    RETURN          reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    IF              reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    WHILE           reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    FOR             reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    LEFTPAR         reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    CTEINT          reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    CTEFLOAT        reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    CTECHAR         reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    RIGHTBR         reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    RIGHTPAR        reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    RIGHTSQR        reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    COMMA           reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    SEMICOLON       reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    TO              reduce using rule 64 (boolexp1 -> GREATER arithexp .)
    DO              reduce using rule 64 (boolexp1 -> GREATER arithexp .)


state 146

    (65) boolexp1 -> GREATERAND arithexp .

    AND             reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    OR              reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    ID              reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    READ            reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    WRITE           reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    RETURN          reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    IF              reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    WHILE           reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    FOR             reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    LEFTPAR         reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    CTEINT          reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    CTEFLOAT        reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    CTECHAR         reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    RIGHTBR         reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    RIGHTPAR        reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    RIGHTSQR        reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    COMMA           reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    SEMICOLON       reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    TO              reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)
    DO              reduce using rule 65 (boolexp1 -> GREATERAND arithexp .)


state 147

    (66) boolexp1 -> LESSER arithexp .

    AND             reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    OR              reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    ID              reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    READ            reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    WRITE           reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    RETURN          reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    IF              reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    WHILE           reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    FOR             reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    LEFTPAR         reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    CTEINT          reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    CTEFLOAT        reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    CTECHAR         reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    RIGHTBR         reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    RIGHTPAR        reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    RIGHTSQR        reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    COMMA           reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    SEMICOLON       reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    TO              reduce using rule 66 (boolexp1 -> LESSER arithexp .)
    DO              reduce using rule 66 (boolexp1 -> LESSER arithexp .)


state 148

    (67) boolexp1 -> LESSERAND arithexp .

    AND             reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    OR              reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    ID              reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    READ            reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    WRITE           reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    RETURN          reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    IF              reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    WHILE           reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    FOR             reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    LEFTPAR         reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    CTEINT          reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    CTEFLOAT        reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    CTECHAR         reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    RIGHTBR         reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    RIGHTPAR        reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    RIGHTSQR        reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    COMMA           reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    SEMICOLON       reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    TO              reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)
    DO              reduce using rule 67 (boolexp1 -> LESSERAND arithexp .)


state 149

    (68) boolexp1 -> SAME arithexp .

    AND             reduce using rule 68 (boolexp1 -> SAME arithexp .)
    OR              reduce using rule 68 (boolexp1 -> SAME arithexp .)
    ID              reduce using rule 68 (boolexp1 -> SAME arithexp .)
    READ            reduce using rule 68 (boolexp1 -> SAME arithexp .)
    WRITE           reduce using rule 68 (boolexp1 -> SAME arithexp .)
    RETURN          reduce using rule 68 (boolexp1 -> SAME arithexp .)
    IF              reduce using rule 68 (boolexp1 -> SAME arithexp .)
    WHILE           reduce using rule 68 (boolexp1 -> SAME arithexp .)
    FOR             reduce using rule 68 (boolexp1 -> SAME arithexp .)
    LEFTPAR         reduce using rule 68 (boolexp1 -> SAME arithexp .)
    CTEINT          reduce using rule 68 (boolexp1 -> SAME arithexp .)
    CTEFLOAT        reduce using rule 68 (boolexp1 -> SAME arithexp .)
    CTECHAR         reduce using rule 68 (boolexp1 -> SAME arithexp .)
    RIGHTBR         reduce using rule 68 (boolexp1 -> SAME arithexp .)
    RIGHTPAR        reduce using rule 68 (boolexp1 -> SAME arithexp .)
    RIGHTSQR        reduce using rule 68 (boolexp1 -> SAME arithexp .)
    COMMA           reduce using rule 68 (boolexp1 -> SAME arithexp .)
    SEMICOLON       reduce using rule 68 (boolexp1 -> SAME arithexp .)
    TO              reduce using rule 68 (boolexp1 -> SAME arithexp .)
    DO              reduce using rule 68 (boolexp1 -> SAME arithexp .)


state 150

    (69) boolexp1 -> NOTSAME arithexp .

    AND             reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    OR              reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    ID              reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    READ            reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    WRITE           reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    RETURN          reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    IF              reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    WHILE           reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    FOR             reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    LEFTPAR         reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    CTEINT          reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    CTEFLOAT        reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    CTECHAR         reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    RIGHTBR         reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    RIGHTPAR        reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    RIGHTSQR        reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    COMMA           reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    SEMICOLON       reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    TO              reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)
    DO              reduce using rule 69 (boolexp1 -> NOTSAME arithexp .)


state 151

    (70) boolexp1 -> NOT arithexp .

    AND             reduce using rule 70 (boolexp1 -> NOT arithexp .)
    OR              reduce using rule 70 (boolexp1 -> NOT arithexp .)
    ID              reduce using rule 70 (boolexp1 -> NOT arithexp .)
    READ            reduce using rule 70 (boolexp1 -> NOT arithexp .)
    WRITE           reduce using rule 70 (boolexp1 -> NOT arithexp .)
    RETURN          reduce using rule 70 (boolexp1 -> NOT arithexp .)
    IF              reduce using rule 70 (boolexp1 -> NOT arithexp .)
    WHILE           reduce using rule 70 (boolexp1 -> NOT arithexp .)
    FOR             reduce using rule 70 (boolexp1 -> NOT arithexp .)
    LEFTPAR         reduce using rule 70 (boolexp1 -> NOT arithexp .)
    CTEINT          reduce using rule 70 (boolexp1 -> NOT arithexp .)
    CTEFLOAT        reduce using rule 70 (boolexp1 -> NOT arithexp .)
    CTECHAR         reduce using rule 70 (boolexp1 -> NOT arithexp .)
    RIGHTBR         reduce using rule 70 (boolexp1 -> NOT arithexp .)
    RIGHTPAR        reduce using rule 70 (boolexp1 -> NOT arithexp .)
    RIGHTSQR        reduce using rule 70 (boolexp1 -> NOT arithexp .)
    COMMA           reduce using rule 70 (boolexp1 -> NOT arithexp .)
    SEMICOLON       reduce using rule 70 (boolexp1 -> NOT arithexp .)
    TO              reduce using rule 70 (boolexp1 -> NOT arithexp .)
    DO              reduce using rule 70 (boolexp1 -> NOT arithexp .)


state 152

    (73) arithexp1 -> PLUS arithexp .

    GREATER         reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    GREATERAND      reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    LESSER          reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    LESSERAND       reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    SAME            reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    NOTSAME         reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    NOT             reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    AND             reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    OR              reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    ID              reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    READ            reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    WRITE           reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    RETURN          reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    IF              reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    WHILE           reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    FOR             reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    LEFTPAR         reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    CTEINT          reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    CTEFLOAT        reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    CTECHAR         reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    RIGHTBR         reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    RIGHTPAR        reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    RIGHTSQR        reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    COMMA           reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    SEMICOLON       reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    TO              reduce using rule 73 (arithexp1 -> PLUS arithexp .)
    DO              reduce using rule 73 (arithexp1 -> PLUS arithexp .)


state 153

    (74) arithexp1 -> REST arithexp .

    GREATER         reduce using rule 74 (arithexp1 -> REST arithexp .)
    GREATERAND      reduce using rule 74 (arithexp1 -> REST arithexp .)
    LESSER          reduce using rule 74 (arithexp1 -> REST arithexp .)
    LESSERAND       reduce using rule 74 (arithexp1 -> REST arithexp .)
    SAME            reduce using rule 74 (arithexp1 -> REST arithexp .)
    NOTSAME         reduce using rule 74 (arithexp1 -> REST arithexp .)
    NOT             reduce using rule 74 (arithexp1 -> REST arithexp .)
    AND             reduce using rule 74 (arithexp1 -> REST arithexp .)
    OR              reduce using rule 74 (arithexp1 -> REST arithexp .)
    ID              reduce using rule 74 (arithexp1 -> REST arithexp .)
    READ            reduce using rule 74 (arithexp1 -> REST arithexp .)
    WRITE           reduce using rule 74 (arithexp1 -> REST arithexp .)
    RETURN          reduce using rule 74 (arithexp1 -> REST arithexp .)
    IF              reduce using rule 74 (arithexp1 -> REST arithexp .)
    WHILE           reduce using rule 74 (arithexp1 -> REST arithexp .)
    FOR             reduce using rule 74 (arithexp1 -> REST arithexp .)
    LEFTPAR         reduce using rule 74 (arithexp1 -> REST arithexp .)
    CTEINT          reduce using rule 74 (arithexp1 -> REST arithexp .)
    CTEFLOAT        reduce using rule 74 (arithexp1 -> REST arithexp .)
    CTECHAR         reduce using rule 74 (arithexp1 -> REST arithexp .)
    RIGHTBR         reduce using rule 74 (arithexp1 -> REST arithexp .)
    RIGHTPAR        reduce using rule 74 (arithexp1 -> REST arithexp .)
    RIGHTSQR        reduce using rule 74 (arithexp1 -> REST arithexp .)
    COMMA           reduce using rule 74 (arithexp1 -> REST arithexp .)
    SEMICOLON       reduce using rule 74 (arithexp1 -> REST arithexp .)
    TO              reduce using rule 74 (arithexp1 -> REST arithexp .)
    DO              reduce using rule 74 (arithexp1 -> REST arithexp .)


state 154

    (77) geoexp1 -> TIMES geoexp .

    PLUS            reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    REST            reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    GREATER         reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    GREATERAND      reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    LESSER          reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    LESSERAND       reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    SAME            reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    NOTSAME         reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    NOT             reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    AND             reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    OR              reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    ID              reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    READ            reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    WRITE           reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    RETURN          reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    IF              reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    WHILE           reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    FOR             reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    LEFTPAR         reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    CTEINT          reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    CTEFLOAT        reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    CTECHAR         reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    RIGHTBR         reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    RIGHTPAR        reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    RIGHTSQR        reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    COMMA           reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    SEMICOLON       reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    TO              reduce using rule 77 (geoexp1 -> TIMES geoexp .)
    DO              reduce using rule 77 (geoexp1 -> TIMES geoexp .)


state 155

    (78) geoexp1 -> DIVIDE geoexp .

    PLUS            reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    REST            reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    GREATER         reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    GREATERAND      reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    LESSER          reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    LESSERAND       reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    SAME            reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    NOTSAME         reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    NOT             reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    AND             reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    OR              reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    ID              reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    READ            reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    WRITE           reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    RETURN          reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    IF              reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    WHILE           reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    FOR             reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    LEFTPAR         reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    CTEINT          reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    CTEFLOAT        reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    CTECHAR         reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    RIGHTBR         reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    RIGHTPAR        reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    RIGHTSQR        reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    COMMA           reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    SEMICOLON       reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    TO              reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)
    DO              reduce using rule 78 (geoexp1 -> DIVIDE geoexp .)


state 156

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl . LEFTBR statutes RIGHTBR neuralendfuncs modules

    LEFTBR          shift and go to state 173


state 157

    (22) parameters -> typing COLON ID idarray . mulparams
    (24) mulparams -> . COMMA parameters
    (25) mulparams -> . empty
    (92) empty -> .

    COMMA           shift and go to state 175
    RIGHTPAR        reduce using rule 92 (empty -> .)

    mulparams                      shift and go to state 174
    empty                          shift and go to state 176

state 158

    (10) varsmul -> COMMA neuralinsertvar varsarr varsmul .

    INT             reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)
    FLOAT           reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)
    CHAR            reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)
    FUNCTION        reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)
    MAIN            reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)
    LEFTBR          reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)


state 159

    (38) assign -> ID idarray EQUAL exp . SEMICOLON

    SEMICOLON       shift and go to state 177


state 160

    (55) idarray -> LEFTSQR exp RIGHTSQR .

    EQUAL           reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    TIMES           reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    DIVIDE          reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    PLUS            reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    REST            reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    GREATER         reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    GREATERAND      reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    LESSER          reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    LESSERAND       reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    SAME            reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    NOTSAME         reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    NOT             reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    AND             reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    OR              reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    ID              reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    READ            reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    WRITE           reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    RETURN          reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    IF              reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    WHILE           reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    FOR             reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    LEFTPAR         reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    CTEINT          reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    CTEFLOAT        reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    CTECHAR         reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    RIGHTBR         reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    RIGHTPAR        reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    RIGHTSQR        reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    COMMA           reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    SEMICOLON       reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    TO              reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    DO              reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)


state 161

    (86) paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .

    TIMES           reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    DIVIDE          reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    PLUS            reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    REST            reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    GREATER         reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    GREATERAND      reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    LESSER          reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    LESSERAND       reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    SAME            reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    NOTSAME         reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    NOT             reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    AND             reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    OR              reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    ID              reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    READ            reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    WRITE           reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    RETURN          reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    IF              reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    WHILE           reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    FOR             reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    LEFTPAR         reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    CTEINT          reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    CTEFLOAT        reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    CTECHAR         reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    RIGHTBR         reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    RIGHTPAR        reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    RIGHTSQR        reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    COMMA           reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    SEMICOLON       reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    TO              reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    DO              reduce using rule 86 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)


state 162

    (88) paramsexp2 -> exp auxparamsexp2 .

    RIGHTPAR        reduce using rule 88 (paramsexp2 -> exp auxparamsexp2 .)


state 163

    (90) auxparamsexp2 -> COMMA . exp auxparamsexp2
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    exp                            shift and go to state 178
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 164

    (91) auxparamsexp2 -> empty .

    RIGHTPAR        reduce using rule 91 (auxparamsexp2 -> empty .)


state 165

    (46) reading -> READ LEFTPAR ID idarray . mulread RIGHTPAR SEMICOLON
    (47) mulread -> . COMMA ID idarray mulread
    (48) mulread -> . empty
    (92) empty -> .

    COMMA           shift and go to state 180
    RIGHTPAR        reduce using rule 92 (empty -> .)

    mulread                        shift and go to state 179
    empty                          shift and go to state 181

state 166

    (39) writing -> WRITE LEFTPAR auxwrite mulwrite . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 182


state 167

    (44) mulwrite -> COMMA . auxwrite mulwrite
    (40) auxwrite -> . writetyping
    (41) auxwrite -> . exp
    (42) writetyping -> . STRING
    (43) writetyping -> . CTECHAR
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    STRING          shift and go to state 137
    CTECHAR         shift and go to state 138
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    ID              shift and go to state 76

    auxwrite                       shift and go to state 183
    writetyping                    shift and go to state 135
    exp                            shift and go to state 136
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 168

    (45) mulwrite -> empty .

    RIGHTPAR        reduce using rule 45 (mulwrite -> empty .)


state 169

    (49) returning -> RETURN LEFTPAR exp RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 184


state 170

    (50) ifing -> IF LEFTPAR exp RIGHTPAR . THEN LEFTBR statutes RIGHTBR elsing

    THEN            shift and go to state 185


state 171

    (53) whiling -> WHILE LEFTPAR exp RIGHTPAR . DO LEFTBR statutes RIGHTBR

    DO              shift and go to state 186


state 172

    (54) foring -> FOR ID idarray EQUAL . exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    exp                            shift and go to state 187
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 173

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR . statutes RIGHTBR neuralendfuncs modules
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (92) empty -> .
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RIGHTBR         reduce using rule 92 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69

  ! ID              [ reduce using rule 92 (empty -> .) ]
  ! READ            [ reduce using rule 92 (empty -> .) ]
  ! WRITE           [ reduce using rule 92 (empty -> .) ]
  ! RETURN          [ reduce using rule 92 (empty -> .) ]
  ! IF              [ reduce using rule 92 (empty -> .) ]
  ! WHILE           [ reduce using rule 92 (empty -> .) ]
  ! FOR             [ reduce using rule 92 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 92 (empty -> .) ]
  ! CTEINT          [ reduce using rule 92 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 92 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 92 (empty -> .) ]

    statutes                       shift and go to state 188
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    empty                          shift and go to state 61
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 174

    (22) parameters -> typing COLON ID idarray mulparams .

    RIGHTPAR        reduce using rule 22 (parameters -> typing COLON ID idarray mulparams .)


state 175

    (24) mulparams -> COMMA . parameters
    (22) parameters -> . typing COLON ID idarray mulparams
    (23) parameters -> . empty
    (19) typing -> . INT
    (20) typing -> . FLOAT
    (21) typing -> . CHAR
    (92) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    RIGHTPAR        reduce using rule 92 (empty -> .)

    parameters                     shift and go to state 189
    typing                         shift and go to state 36
    empty                          shift and go to state 37

state 176

    (25) mulparams -> empty .

    RIGHTPAR        reduce using rule 25 (mulparams -> empty .)


state 177

    (38) assign -> ID idarray EQUAL exp SEMICOLON .

    ID              reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    READ            reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    WRITE           reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    IF              reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    FOR             reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    LEFTPAR         reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    CTEINT          reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    CTEFLOAT        reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    CTECHAR         reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    RIGHTBR         reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)


state 178

    (90) auxparamsexp2 -> COMMA exp . auxparamsexp2
    (90) auxparamsexp2 -> . COMMA exp auxparamsexp2
    (91) auxparamsexp2 -> . empty
    (92) empty -> .

    COMMA           shift and go to state 163
    RIGHTPAR        reduce using rule 92 (empty -> .)

    auxparamsexp2                  shift and go to state 190
    empty                          shift and go to state 164

state 179

    (46) reading -> READ LEFTPAR ID idarray mulread . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 191


state 180

    (47) mulread -> COMMA . ID idarray mulread

    ID              shift and go to state 192


state 181

    (48) mulread -> empty .

    RIGHTPAR        reduce using rule 48 (mulread -> empty .)


state 182

    (39) writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 193


state 183

    (44) mulwrite -> COMMA auxwrite . mulwrite
    (44) mulwrite -> . COMMA auxwrite mulwrite
    (45) mulwrite -> . empty
    (92) empty -> .

    COMMA           shift and go to state 167
    RIGHTPAR        reduce using rule 92 (empty -> .)

    mulwrite                       shift and go to state 194
    empty                          shift and go to state 168

state 184

    (49) returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .

    ID              reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    READ            reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    IF              reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    LEFTPAR         reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    CTEINT          reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    CTEFLOAT        reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    CTECHAR         reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    RIGHTBR         reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)


state 185

    (50) ifing -> IF LEFTPAR exp RIGHTPAR THEN . LEFTBR statutes RIGHTBR elsing

    LEFTBR          shift and go to state 195


state 186

    (53) whiling -> WHILE LEFTPAR exp RIGHTPAR DO . LEFTBR statutes RIGHTBR

    LEFTBR          shift and go to state 196


state 187

    (54) foring -> FOR ID idarray EQUAL exp . TO exp DO LEFTBR statutes RIGHTBR

    TO              shift and go to state 197


state 188

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes . RIGHTBR neuralendfuncs modules

    RIGHTBR         shift and go to state 198


state 189

    (24) mulparams -> COMMA parameters .

    RIGHTPAR        reduce using rule 24 (mulparams -> COMMA parameters .)


state 190

    (90) auxparamsexp2 -> COMMA exp auxparamsexp2 .

    RIGHTPAR        reduce using rule 90 (auxparamsexp2 -> COMMA exp auxparamsexp2 .)


state 191

    (46) reading -> READ LEFTPAR ID idarray mulread RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 199


state 192

    (47) mulread -> COMMA ID . idarray mulread
    (55) idarray -> . LEFTSQR exp RIGHTSQR
    (56) idarray -> . empty
    (92) empty -> .

    LEFTSQR         shift and go to state 91
    COMMA           reduce using rule 92 (empty -> .)
    RIGHTPAR        reduce using rule 92 (empty -> .)

    idarray                        shift and go to state 200
    empty                          shift and go to state 92

state 193

    (39) writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .

    ID              reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    READ            reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    IF              reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    LEFTPAR         reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    CTEINT          reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    CTEFLOAT        reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    CTECHAR         reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    RIGHTBR         reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)


state 194

    (44) mulwrite -> COMMA auxwrite mulwrite .

    RIGHTPAR        reduce using rule 44 (mulwrite -> COMMA auxwrite mulwrite .)


state 195

    (50) ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR . statutes RIGHTBR elsing
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (92) empty -> .
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RIGHTBR         reduce using rule 92 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69

  ! ID              [ reduce using rule 92 (empty -> .) ]
  ! READ            [ reduce using rule 92 (empty -> .) ]
  ! WRITE           [ reduce using rule 92 (empty -> .) ]
  ! RETURN          [ reduce using rule 92 (empty -> .) ]
  ! IF              [ reduce using rule 92 (empty -> .) ]
  ! WHILE           [ reduce using rule 92 (empty -> .) ]
  ! FOR             [ reduce using rule 92 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 92 (empty -> .) ]
  ! CTEINT          [ reduce using rule 92 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 92 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 92 (empty -> .) ]

    exp                            shift and go to state 51
    statutes                       shift and go to state 201
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    empty                          shift and go to state 61
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 196

    (53) whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR . statutes RIGHTBR
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (92) empty -> .
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RIGHTBR         reduce using rule 92 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69

  ! ID              [ reduce using rule 92 (empty -> .) ]
  ! READ            [ reduce using rule 92 (empty -> .) ]
  ! WRITE           [ reduce using rule 92 (empty -> .) ]
  ! RETURN          [ reduce using rule 92 (empty -> .) ]
  ! IF              [ reduce using rule 92 (empty -> .) ]
  ! WHILE           [ reduce using rule 92 (empty -> .) ]
  ! FOR             [ reduce using rule 92 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 92 (empty -> .) ]
  ! CTEINT          [ reduce using rule 92 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 92 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 92 (empty -> .) ]

    exp                            shift and go to state 51
    statutes                       shift and go to state 202
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    empty                          shift and go to state 61
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 197

    (54) foring -> FOR ID idarray EQUAL exp TO . exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69
    ID              shift and go to state 76

    exp                            shift and go to state 203
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 198

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR . neuralendfuncs modules
    (18) neuralendfuncs -> .

    FUNCTION        reduce using rule 18 (neuralendfuncs -> .)
    MAIN            reduce using rule 18 (neuralendfuncs -> .)

    neuralendfuncs                 shift and go to state 204

state 199

    (46) reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .

    ID              reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    READ            reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    IF              reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    LEFTPAR         reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    CTEINT          reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    CTEFLOAT        reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    CTECHAR         reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    RIGHTBR         reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)


state 200

    (47) mulread -> COMMA ID idarray . mulread
    (47) mulread -> . COMMA ID idarray mulread
    (48) mulread -> . empty
    (92) empty -> .

    COMMA           shift and go to state 180
    RIGHTPAR        reduce using rule 92 (empty -> .)

    mulread                        shift and go to state 205
    empty                          shift and go to state 181

state 201

    (50) ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes . RIGHTBR elsing

    RIGHTBR         shift and go to state 206


state 202

    (53) whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes . RIGHTBR

    RIGHTBR         shift and go to state 207


state 203

    (54) foring -> FOR ID idarray EQUAL exp TO exp . DO LEFTBR statutes RIGHTBR

    DO              shift and go to state 208


state 204

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs . modules
    (12) modules -> . FUNCTION functype neuralinsertfuncname funcparam
    (13) modules -> . empty
    (92) empty -> .

    FUNCTION        shift and go to state 10
    MAIN            reduce using rule 92 (empty -> .)

    modules                        shift and go to state 209
    empty                          shift and go to state 11

state 205

    (47) mulread -> COMMA ID idarray mulread .

    RIGHTPAR        reduce using rule 47 (mulread -> COMMA ID idarray mulread .)


state 206

    (50) ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR . elsing
    (51) elsing -> . ELSE LEFTBR statutes RIGHTBR
    (52) elsing -> . empty
    (92) empty -> .

    ELSE            shift and go to state 211
    ID              reduce using rule 92 (empty -> .)
    READ            reduce using rule 92 (empty -> .)
    WRITE           reduce using rule 92 (empty -> .)
    RETURN          reduce using rule 92 (empty -> .)
    IF              reduce using rule 92 (empty -> .)
    WHILE           reduce using rule 92 (empty -> .)
    FOR             reduce using rule 92 (empty -> .)
    LEFTPAR         reduce using rule 92 (empty -> .)
    CTEINT          reduce using rule 92 (empty -> .)
    CTEFLOAT        reduce using rule 92 (empty -> .)
    CTECHAR         reduce using rule 92 (empty -> .)
    RIGHTBR         reduce using rule 92 (empty -> .)

    elsing                         shift and go to state 210
    empty                          shift and go to state 212

state 207

    (53) whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .

    ID              reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    READ            reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    WRITE           reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    RETURN          reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    IF              reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    WHILE           reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    FOR             reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    LEFTPAR         reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    CTEINT          reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    CTEFLOAT        reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    CTECHAR         reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    RIGHTBR         reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)


state 208

    (54) foring -> FOR ID idarray EQUAL exp TO exp DO . LEFTBR statutes RIGHTBR

    LEFTBR          shift and go to state 213


state 209

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules .

    MAIN            reduce using rule 17 (funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules .)


state 210

    (50) ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .

    ID              reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    READ            reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    WRITE           reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    RETURN          reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    IF              reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    WHILE           reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    FOR             reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    LEFTPAR         reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    CTEINT          reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    CTEFLOAT        reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    CTECHAR         reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    RIGHTBR         reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)


state 211

    (51) elsing -> ELSE . LEFTBR statutes RIGHTBR

    LEFTBR          shift and go to state 214


state 212

    (52) elsing -> empty .

    ID              reduce using rule 52 (elsing -> empty .)
    READ            reduce using rule 52 (elsing -> empty .)
    WRITE           reduce using rule 52 (elsing -> empty .)
    RETURN          reduce using rule 52 (elsing -> empty .)
    IF              reduce using rule 52 (elsing -> empty .)
    WHILE           reduce using rule 52 (elsing -> empty .)
    FOR             reduce using rule 52 (elsing -> empty .)
    LEFTPAR         reduce using rule 52 (elsing -> empty .)
    CTEINT          reduce using rule 52 (elsing -> empty .)
    CTEFLOAT        reduce using rule 52 (elsing -> empty .)
    CTECHAR         reduce using rule 52 (elsing -> empty .)
    RIGHTBR         reduce using rule 52 (elsing -> empty .)


state 213

    (54) foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR . statutes RIGHTBR
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (92) empty -> .
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RIGHTBR         reduce using rule 92 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69

  ! ID              [ reduce using rule 92 (empty -> .) ]
  ! READ            [ reduce using rule 92 (empty -> .) ]
  ! WRITE           [ reduce using rule 92 (empty -> .) ]
  ! RETURN          [ reduce using rule 92 (empty -> .) ]
  ! IF              [ reduce using rule 92 (empty -> .) ]
  ! WHILE           [ reduce using rule 92 (empty -> .) ]
  ! FOR             [ reduce using rule 92 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 92 (empty -> .) ]
  ! CTEINT          [ reduce using rule 92 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 92 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 92 (empty -> .) ]

    exp                            shift and go to state 51
    statutes                       shift and go to state 215
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    empty                          shift and go to state 61
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 214

    (51) elsing -> ELSE LEFTBR . statutes RIGHTBR
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (92) empty -> .
    (63) boolexp -> . arithexp boolexp1
    (72) arithexp -> . geoexp arithexp1
    (76) geoexp -> . finexp geoexp1
    (80) finexp -> . LEFTPAR exp RIGHTPAR
    (81) finexp -> . cteexp
    (82) cteexp -> . CTEINT
    (83) cteexp -> . CTEFLOAT
    (84) cteexp -> . CTECHAR
    (85) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RIGHTBR         reduce using rule 92 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 67
    CTEFLOAT        shift and go to state 68
    CTECHAR         shift and go to state 69

  ! ID              [ reduce using rule 92 (empty -> .) ]
  ! READ            [ reduce using rule 92 (empty -> .) ]
  ! WRITE           [ reduce using rule 92 (empty -> .) ]
  ! RETURN          [ reduce using rule 92 (empty -> .) ]
  ! IF              [ reduce using rule 92 (empty -> .) ]
  ! WHILE           [ reduce using rule 92 (empty -> .) ]
  ! FOR             [ reduce using rule 92 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 92 (empty -> .) ]
  ! CTEINT          [ reduce using rule 92 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 92 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 92 (empty -> .) ]

    statutes                       shift and go to state 216
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    empty                          shift and go to state 61
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 66

state 215

    (54) foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes . RIGHTBR

    RIGHTBR         shift and go to state 217


state 216

    (51) elsing -> ELSE LEFTBR statutes . RIGHTBR

    RIGHTBR         shift and go to state 218


state 217

    (54) foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .

    ID              reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    READ            reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    WRITE           reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    RETURN          reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    IF              reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    WHILE           reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    FOR             reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    LEFTPAR         reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    CTEINT          reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    CTEFLOAT        reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    CTECHAR         reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    RIGHTBR         reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)


state 218

    (51) elsing -> ELSE LEFTBR statutes RIGHTBR .

    ID              reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    READ            reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    WRITE           reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    RETURN          reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    IF              reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    WHILE           reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    FOR             reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    LEFTPAR         reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    CTEINT          reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    CTEFLOAT        reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    CTECHAR         reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    RIGHTBR         reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 34 resolved as shift
WARNING: shift/reduce conflict for READ in state 34 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 34 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 34 resolved as shift
WARNING: shift/reduce conflict for IF in state 34 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 34 resolved as shift
WARNING: shift/reduce conflict for FOR in state 34 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 34 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 34 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 34 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 34 resolved as shift
WARNING: shift/reduce conflict for ID in state 44 resolved as shift
WARNING: shift/reduce conflict for READ in state 44 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 44 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 44 resolved as shift
WARNING: shift/reduce conflict for IF in state 44 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 44 resolved as shift
WARNING: shift/reduce conflict for FOR in state 44 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 44 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 44 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 44 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 44 resolved as shift
WARNING: shift/reduce conflict for ID in state 45 resolved as shift
WARNING: shift/reduce conflict for READ in state 45 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 45 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 45 resolved as shift
WARNING: shift/reduce conflict for IF in state 45 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 45 resolved as shift
WARNING: shift/reduce conflict for FOR in state 45 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 45 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 45 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 45 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 45 resolved as shift
WARNING: shift/reduce conflict for ID in state 46 resolved as shift
WARNING: shift/reduce conflict for READ in state 46 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 46 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 46 resolved as shift
WARNING: shift/reduce conflict for IF in state 46 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 46 resolved as shift
WARNING: shift/reduce conflict for FOR in state 46 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 46 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 46 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 46 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 46 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for READ in state 47 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 47 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 47 resolved as shift
WARNING: shift/reduce conflict for IF in state 47 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 47 resolved as shift
WARNING: shift/reduce conflict for FOR in state 47 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 47 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 47 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 47 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 48 resolved as shift
WARNING: shift/reduce conflict for READ in state 48 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 48 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 48 resolved as shift
WARNING: shift/reduce conflict for IF in state 48 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 48 resolved as shift
WARNING: shift/reduce conflict for FOR in state 48 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 48 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 48 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 48 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 48 resolved as shift
WARNING: shift/reduce conflict for ID in state 49 resolved as shift
WARNING: shift/reduce conflict for READ in state 49 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 49 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 49 resolved as shift
WARNING: shift/reduce conflict for IF in state 49 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 49 resolved as shift
WARNING: shift/reduce conflict for FOR in state 49 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 49 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 49 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 49 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 49 resolved as shift
WARNING: shift/reduce conflict for ID in state 50 resolved as shift
WARNING: shift/reduce conflict for READ in state 50 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 50 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 50 resolved as shift
WARNING: shift/reduce conflict for IF in state 50 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 50 resolved as shift
WARNING: shift/reduce conflict for FOR in state 50 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 50 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 50 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 50 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 50 resolved as shift
WARNING: shift/reduce conflict for ID in state 51 resolved as shift
WARNING: shift/reduce conflict for READ in state 51 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 51 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 51 resolved as shift
WARNING: shift/reduce conflict for IF in state 51 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 51 resolved as shift
WARNING: shift/reduce conflict for FOR in state 51 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 51 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 51 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 51 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 51 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for READ in state 52 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 52 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 52 resolved as shift
WARNING: shift/reduce conflict for FOR in state 52 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 52 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 52 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 52 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 52 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 53 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 76 resolved as shift
WARNING: shift/reduce conflict for ID in state 173 resolved as shift
WARNING: shift/reduce conflict for READ in state 173 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 173 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 173 resolved as shift
WARNING: shift/reduce conflict for IF in state 173 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 173 resolved as shift
WARNING: shift/reduce conflict for FOR in state 173 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 173 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 173 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 173 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 173 resolved as shift
WARNING: shift/reduce conflict for ID in state 195 resolved as shift
WARNING: shift/reduce conflict for READ in state 195 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 195 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 195 resolved as shift
WARNING: shift/reduce conflict for IF in state 195 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 195 resolved as shift
WARNING: shift/reduce conflict for FOR in state 195 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 195 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 195 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 195 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 195 resolved as shift
WARNING: shift/reduce conflict for ID in state 196 resolved as shift
WARNING: shift/reduce conflict for READ in state 196 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 196 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 196 resolved as shift
WARNING: shift/reduce conflict for IF in state 196 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 196 resolved as shift
WARNING: shift/reduce conflict for FOR in state 196 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 196 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 196 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 196 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 196 resolved as shift
WARNING: shift/reduce conflict for ID in state 213 resolved as shift
WARNING: shift/reduce conflict for READ in state 213 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 213 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 213 resolved as shift
WARNING: shift/reduce conflict for IF in state 213 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 213 resolved as shift
WARNING: shift/reduce conflict for FOR in state 213 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 213 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 213 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 213 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 213 resolved as shift
WARNING: shift/reduce conflict for ID in state 214 resolved as shift
WARNING: shift/reduce conflict for READ in state 214 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 214 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 214 resolved as shift
WARNING: shift/reduce conflict for IF in state 214 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 214 resolved as shift
WARNING: shift/reduce conflict for FOR in state 214 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 214 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 214 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 214 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 214 resolved as shift
WARNING: reduce/reduce conflict in state 80 resolved using rule (statutesaux -> empty)
WARNING: rejected rule (specialfunc -> empty) in state 80
WARNING: reduce/reduce conflict in state 138 resolved using rule (writetyping -> CTECHAR)
WARNING: rejected rule (cteexp -> CTECHAR) in state 138
