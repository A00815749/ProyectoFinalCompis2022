Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    STR
    TRUE
    FALSE
    MEDIA
    MEDIANA
    MODA
    VARIANZA
    STDEV
    PLOTXY

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR
Rule 2     neuraltablefunctions -> ID
Rule 3     varsgl -> VARS vars
Rule 4     varsgl -> empty
Rule 5     vars -> typing COLON neuralinsertvar varsarr varsmul vars
Rule 6     vars -> empty
Rule 7     neuralinsertvar -> ID
Rule 8     varsarr -> LEFTSQR CTEINT RIGHTSQR
Rule 9     varsarr -> empty
Rule 10    varsmul -> COMMA neuralinsertvar varsarr varsmul
Rule 11    varsmul -> SEMICOLON
Rule 12    modules -> FUNCTION functype neuralinsertfuncname funcparam
Rule 13    modules -> empty
Rule 14    neuralinsertfuncname -> ID
Rule 15    functype -> VOID
Rule 16    functype -> typing
Rule 17    funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules
Rule 18    neuralendfuncs -> <empty>
Rule 19    typing -> INT
Rule 20    typing -> FLOAT
Rule 21    typing -> CHAR
Rule 22    parameters -> typing COLON ID idarray mulparams
Rule 23    parameters -> empty
Rule 24    mulparams -> COMMA parameters
Rule 25    mulparams -> empty
Rule 26    statutes -> assign statutesaux
Rule 27    statutes -> reading statutesaux
Rule 28    statutes -> writing statutesaux
Rule 29    statutes -> returning statutesaux
Rule 30    statutes -> ifing statutesaux
Rule 31    statutes -> whiling statutesaux
Rule 32    statutes -> foring statutesaux
Rule 33    statutes -> exp statutesaux
Rule 34    statutes -> specialfunc statutesaux
Rule 35    statutesaux -> statutes
Rule 36    statutesaux -> empty
Rule 37    specialfunc -> empty
Rule 38    assign -> neuralassign1 idarray neuralassign2 exp SEMICOLON
Rule 39    neuralassign1 -> ID
Rule 40    neuralassign2 -> EQUAL
Rule 41    writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
Rule 42    auxwrite -> writetyping
Rule 43    auxwrite -> exp
Rule 44    writetyping -> STRING
Rule 45    writetyping -> CTECHAR
Rule 46    mulwrite -> COMMA auxwrite mulwrite
Rule 47    mulwrite -> empty
Rule 48    reading -> READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON
Rule 49    neuralread -> ID
Rule 50    mulread -> COMMA ID idarray mulread
Rule 51    mulread -> empty
Rule 52    returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON
Rule 53    ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing
Rule 54    neuralif -> RIGHTPAR
Rule 55    elsing -> neuralelse LEFTBR statutes RIGHTBR
Rule 56    elsing -> empty
Rule 57    neuralelse -> ELSE
Rule 58    whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
Rule 59    foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
Rule 60    idarray -> LEFTSQR exp RIGHTSQR
Rule 61    idarray -> empty
Rule 62    exp -> andexp exp1
Rule 63    exp1 -> OR exp
Rule 64    exp1 -> empty
Rule 65    andexp -> boolexp andexp1
Rule 66    andexp1 -> neuraland andexp
Rule 67    andexp1 -> empty
Rule 68    neuraland -> AND
Rule 69    boolexp -> arithexp boolexp1
Rule 70    boolexp1 -> neuralbool arithexp
Rule 71    boolexp1 -> empty
Rule 72    neuralbool -> GREATER
Rule 73    neuralbool -> GREATERAND
Rule 74    neuralbool -> LESSER
Rule 75    neuralbool -> LESSERAND
Rule 76    neuralbool -> SAME
Rule 77    neuralbool -> NOTSAME
Rule 78    neuralbool -> NOT
Rule 79    arithexp -> geoexp arithexp1
Rule 80    arithexp1 -> neuralarith arithexp
Rule 81    arithexp1 -> empty
Rule 82    neuralarith -> PLUS
Rule 83    neuralarith -> REST
Rule 84    geoexp -> finexp geoexp1
Rule 85    geoexp1 -> neuralgeo geoexp
Rule 86    geoexp1 -> empty
Rule 87    neuralgeo -> TIMES
Rule 88    neuralgeo -> DIVIDE
Rule 89    addparenth -> LEFTPAR
Rule 90    popparenth -> RIGHTPAR
Rule 91    finexp -> addparenth exp popparenth
Rule 92    finexp -> cteexp
Rule 93    cteexp -> CTEINT
Rule 94    cteexp -> CTEFLOAT
Rule 95    cteexp -> CTECHAR
Rule 96    cteexp -> ID paramsexp
Rule 97    paramsexp -> LEFTPAR paramsexp2 RIGHTPAR
Rule 98    paramsexp -> idarray
Rule 99    paramsexp2 -> exp auxparamsexp2
Rule 100   paramsexp2 -> empty
Rule 101   auxparamsexp2 -> COMMA exp auxparamsexp2
Rule 102   auxparamsexp2 -> empty
Rule 103   empty -> <empty>
Rule 104   debug -> empty

Terminals, with rules where they appear

AND                  : 68
CHAR                 : 21
COLON                : 5 22
COMMA                : 10 24 46 50 101
CTECHAR              : 45 95
CTEFLOAT             : 94
CTEINT               : 8 93
DIVIDE               : 88
DO                   : 58 59
ELSE                 : 57
EQUAL                : 40 59
FALSE                : 
FLOAT                : 20
FOR                  : 59
FUNCTION             : 12
GREATER              : 72
GREATERAND           : 73
ID                   : 2 7 14 22 39 49 50 59 96
IF                   : 53
INT                  : 19
LEFTBR               : 1 17 53 55 58 59
LEFTPAR              : 1 17 41 48 52 53 58 89 97
LEFTSQR              : 8 60
LESSER               : 74
LESSERAND            : 75
MAIN                 : 1
MEDIA                : 
MEDIANA              : 
MODA                 : 
NOT                  : 78
NOTSAME              : 77
OR                   : 63
PLOTXY               : 
PLUS                 : 82
PROGRAM              : 1
READ                 : 48
REST                 : 83
RETURN               : 52
RIGHTBR              : 1 17 53 55 58 59
RIGHTPAR             : 1 17 41 48 52 54 58 90 97
RIGHTSQR             : 8 60
SAME                 : 76
SEMICOLON            : 1 11 17 38 41 48 52
STDEV                : 
STR                  : 
STRING               : 44
THEN                 : 53
TIMES                : 87
TO                   : 59
TRUE                 : 
VARIANZA             : 
VARS                 : 3
VOID                 : 15
WHILE                : 58
WRITE                : 41
error                : 

Nonterminals, with rules where they appear

addparenth           : 91
andexp               : 62 66
andexp1              : 65
arithexp             : 69 70 80
arithexp1            : 79
assign               : 26
auxparamsexp2        : 99 101
auxwrite             : 41 46
boolexp              : 65
boolexp1             : 69
cteexp               : 92
debug                : 
elsing               : 53
empty                : 4 6 9 13 23 25 36 37 47 51 56 61 64 67 71 81 86 100 102 104
exp                  : 33 38 43 52 53 58 59 59 60 63 91 99 101
exp1                 : 62
finexp               : 84
foring               : 32
funcparam            : 12
functype             : 12
geoexp               : 79 85
geoexp1              : 84
idarray              : 22 38 48 50 59 98
ifing                : 30
modules              : 1 17
mulparams            : 22
mulread              : 48 50
mulwrite             : 41 46
neuraland            : 66
neuralarith          : 80
neuralassign1        : 38
neuralassign2        : 38
neuralbool           : 70
neuralelse           : 55
neuralendfuncs       : 17
neuralgeo            : 85
neuralif             : 53
neuralinsertfuncname : 12
neuralinsertvar      : 5 10
neuralread           : 48
neuraltablefunctions : 1
parameters           : 17 24
paramsexp            : 96
paramsexp2           : 97
popparenth           : 91
program              : 0
reading              : 27
returning            : 29
specialfunc          : 34
statutes             : 1 17 35 53 55 58 59
statutesaux          : 26 27 28 29 30 31 32 33 34
typing               : 5 16 22
vars                 : 3 5
varsarr              : 5 10
varsgl               : 1 17
varsmul              : 5 10
whiling              : 31
writetyping          : 42
writing              : 28

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR
    (2) neuraltablefunctions -> . ID

    ID              shift and go to state 4

    neuraltablefunctions           shift and go to state 3

state 3

    (1) program -> PROGRAM neuraltablefunctions . SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR

    SEMICOLON       shift and go to state 5


state 4

    (2) neuraltablefunctions -> ID .

    SEMICOLON       reduce using rule 2 (neuraltablefunctions -> ID .)


state 5

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON . varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR
    (3) varsgl -> . VARS vars
    (4) varsgl -> . empty
    (103) empty -> .

    VARS            shift and go to state 7
    FUNCTION        reduce using rule 103 (empty -> .)
    MAIN            reduce using rule 103 (empty -> .)

    varsgl                         shift and go to state 6
    empty                          shift and go to state 8

state 6

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl . modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR
    (12) modules -> . FUNCTION functype neuralinsertfuncname funcparam
    (13) modules -> . empty
    (103) empty -> .

    FUNCTION        shift and go to state 10
    MAIN            reduce using rule 103 (empty -> .)

    modules                        shift and go to state 9
    empty                          shift and go to state 11

state 7

    (3) varsgl -> VARS . vars
    (5) vars -> . typing COLON neuralinsertvar varsarr varsmul vars
    (6) vars -> . empty
    (19) typing -> . INT
    (20) typing -> . FLOAT
    (21) typing -> . CHAR
    (103) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    FUNCTION        reduce using rule 103 (empty -> .)
    MAIN            reduce using rule 103 (empty -> .)
    LEFTBR          reduce using rule 103 (empty -> .)

    vars                           shift and go to state 12
    typing                         shift and go to state 13
    empty                          shift and go to state 14

state 8

    (4) varsgl -> empty .

    FUNCTION        reduce using rule 4 (varsgl -> empty .)
    MAIN            reduce using rule 4 (varsgl -> empty .)
    LEFTBR          reduce using rule 4 (varsgl -> empty .)


state 9

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules . MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR

    MAIN            shift and go to state 18


state 10

    (12) modules -> FUNCTION . functype neuralinsertfuncname funcparam
    (15) functype -> . VOID
    (16) functype -> . typing
    (19) typing -> . INT
    (20) typing -> . FLOAT
    (21) typing -> . CHAR

    VOID            shift and go to state 20
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    functype                       shift and go to state 19
    typing                         shift and go to state 21

state 11

    (13) modules -> empty .

    MAIN            reduce using rule 13 (modules -> empty .)


state 12

    (3) varsgl -> VARS vars .

    FUNCTION        reduce using rule 3 (varsgl -> VARS vars .)
    MAIN            reduce using rule 3 (varsgl -> VARS vars .)
    LEFTBR          reduce using rule 3 (varsgl -> VARS vars .)


state 13

    (5) vars -> typing . COLON neuralinsertvar varsarr varsmul vars

    COLON           shift and go to state 22


state 14

    (6) vars -> empty .

    FUNCTION        reduce using rule 6 (vars -> empty .)
    MAIN            reduce using rule 6 (vars -> empty .)
    LEFTBR          reduce using rule 6 (vars -> empty .)


state 15

    (19) typing -> INT .

    COLON           reduce using rule 19 (typing -> INT .)
    ID              reduce using rule 19 (typing -> INT .)


state 16

    (20) typing -> FLOAT .

    COLON           reduce using rule 20 (typing -> FLOAT .)
    ID              reduce using rule 20 (typing -> FLOAT .)


state 17

    (21) typing -> CHAR .

    COLON           reduce using rule 21 (typing -> CHAR .)
    ID              reduce using rule 21 (typing -> CHAR .)


state 18

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN . LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR

    LEFTPAR         shift and go to state 23


state 19

    (12) modules -> FUNCTION functype . neuralinsertfuncname funcparam
    (14) neuralinsertfuncname -> . ID

    ID              shift and go to state 25

    neuralinsertfuncname           shift and go to state 24

state 20

    (15) functype -> VOID .

    ID              reduce using rule 15 (functype -> VOID .)


state 21

    (16) functype -> typing .

    ID              reduce using rule 16 (functype -> typing .)


state 22

    (5) vars -> typing COLON . neuralinsertvar varsarr varsmul vars
    (7) neuralinsertvar -> . ID

    ID              shift and go to state 27

    neuralinsertvar                shift and go to state 26

state 23

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR . RIGHTPAR LEFTBR statutes RIGHTBR

    RIGHTPAR        shift and go to state 28


state 24

    (12) modules -> FUNCTION functype neuralinsertfuncname . funcparam
    (17) funcparam -> . LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules

    LEFTPAR         shift and go to state 30

    funcparam                      shift and go to state 29

state 25

    (14) neuralinsertfuncname -> ID .

    LEFTPAR         reduce using rule 14 (neuralinsertfuncname -> ID .)


state 26

    (5) vars -> typing COLON neuralinsertvar . varsarr varsmul vars
    (8) varsarr -> . LEFTSQR CTEINT RIGHTSQR
    (9) varsarr -> . empty
    (103) empty -> .

    LEFTSQR         shift and go to state 32
    COMMA           reduce using rule 103 (empty -> .)
    SEMICOLON       reduce using rule 103 (empty -> .)

    varsarr                        shift and go to state 31
    empty                          shift and go to state 33

state 27

    (7) neuralinsertvar -> ID .

    LEFTSQR         reduce using rule 7 (neuralinsertvar -> ID .)
    COMMA           reduce using rule 7 (neuralinsertvar -> ID .)
    SEMICOLON       reduce using rule 7 (neuralinsertvar -> ID .)


state 28

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR . LEFTBR statutes RIGHTBR

    LEFTBR          shift and go to state 34


state 29

    (12) modules -> FUNCTION functype neuralinsertfuncname funcparam .

    MAIN            reduce using rule 12 (modules -> FUNCTION functype neuralinsertfuncname funcparam .)


state 30

    (17) funcparam -> LEFTPAR . parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules
    (22) parameters -> . typing COLON ID idarray mulparams
    (23) parameters -> . empty
    (19) typing -> . INT
    (20) typing -> . FLOAT
    (21) typing -> . CHAR
    (103) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    RIGHTPAR        reduce using rule 103 (empty -> .)

    parameters                     shift and go to state 35
    typing                         shift and go to state 36
    empty                          shift and go to state 37

state 31

    (5) vars -> typing COLON neuralinsertvar varsarr . varsmul vars
    (10) varsmul -> . COMMA neuralinsertvar varsarr varsmul
    (11) varsmul -> . SEMICOLON

    COMMA           shift and go to state 39
    SEMICOLON       shift and go to state 40

    varsmul                        shift and go to state 38

state 32

    (8) varsarr -> LEFTSQR . CTEINT RIGHTSQR

    CTEINT          shift and go to state 41


state 33

    (9) varsarr -> empty .

    COMMA           reduce using rule 9 (varsarr -> empty .)
    SEMICOLON       reduce using rule 9 (varsarr -> empty .)


state 34

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR . statutes RIGHTBR
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . neuralassign1 idarray neuralassign2 exp SEMICOLON
    (48) reading -> . READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON
    (41) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (52) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (53) ifing -> . IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing
    (58) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (59) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (39) neuralassign1 -> . ID
    (65) andexp -> . boolexp andexp1
    (103) empty -> .
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    ID              shift and go to state 60
    RIGHTBR         reduce using rule 103 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71

  ! READ            [ reduce using rule 103 (empty -> .) ]
  ! WRITE           [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 103 (empty -> .) ]
  ! CTEINT          [ reduce using rule 103 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 103 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 103 (empty -> .) ]

    statutes                       shift and go to state 43
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    neuralassign1                  shift and go to state 53
    andexp                         shift and go to state 61
    empty                          shift and go to state 62
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 35

    (17) funcparam -> LEFTPAR parameters . RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules

    RIGHTPAR        shift and go to state 72


state 36

    (22) parameters -> typing . COLON ID idarray mulparams

    COLON           shift and go to state 73


state 37

    (23) parameters -> empty .

    RIGHTPAR        reduce using rule 23 (parameters -> empty .)


state 38

    (5) vars -> typing COLON neuralinsertvar varsarr varsmul . vars
    (5) vars -> . typing COLON neuralinsertvar varsarr varsmul vars
    (6) vars -> . empty
    (19) typing -> . INT
    (20) typing -> . FLOAT
    (21) typing -> . CHAR
    (103) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    FUNCTION        reduce using rule 103 (empty -> .)
    MAIN            reduce using rule 103 (empty -> .)
    LEFTBR          reduce using rule 103 (empty -> .)

    typing                         shift and go to state 13
    vars                           shift and go to state 74
    empty                          shift and go to state 14

state 39

    (10) varsmul -> COMMA . neuralinsertvar varsarr varsmul
    (7) neuralinsertvar -> . ID

    ID              shift and go to state 27

    neuralinsertvar                shift and go to state 75

state 40

    (11) varsmul -> SEMICOLON .

    INT             reduce using rule 11 (varsmul -> SEMICOLON .)
    FLOAT           reduce using rule 11 (varsmul -> SEMICOLON .)
    CHAR            reduce using rule 11 (varsmul -> SEMICOLON .)
    FUNCTION        reduce using rule 11 (varsmul -> SEMICOLON .)
    MAIN            reduce using rule 11 (varsmul -> SEMICOLON .)
    LEFTBR          reduce using rule 11 (varsmul -> SEMICOLON .)


state 41

    (8) varsarr -> LEFTSQR CTEINT . RIGHTSQR

    RIGHTSQR        shift and go to state 76


state 42

    (89) addparenth -> LEFTPAR .

    LEFTPAR         reduce using rule 89 (addparenth -> LEFTPAR .)
    CTEINT          reduce using rule 89 (addparenth -> LEFTPAR .)
    CTEFLOAT        reduce using rule 89 (addparenth -> LEFTPAR .)
    CTECHAR         reduce using rule 89 (addparenth -> LEFTPAR .)
    ID              reduce using rule 89 (addparenth -> LEFTPAR .)


state 43

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes . RIGHTBR

    RIGHTBR         shift and go to state 77


state 44

    (26) statutes -> assign . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (103) empty -> .
    (38) assign -> . neuralassign1 idarray neuralassign2 exp SEMICOLON
    (48) reading -> . READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON
    (41) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (52) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (53) ifing -> . IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing
    (58) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (59) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (39) neuralassign1 -> . ID
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 103 (empty -> .)
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    ID              shift and go to state 60
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71

  ! READ            [ reduce using rule 103 (empty -> .) ]
  ! WRITE           [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 103 (empty -> .) ]
  ! CTEINT          [ reduce using rule 103 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 103 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 103 (empty -> .) ]

    assign                         shift and go to state 44
    statutesaux                    shift and go to state 78
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    neuralassign1                  shift and go to state 53
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 45

    (27) statutes -> reading . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (103) empty -> .
    (38) assign -> . neuralassign1 idarray neuralassign2 exp SEMICOLON
    (48) reading -> . READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON
    (41) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (52) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (53) ifing -> . IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing
    (58) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (59) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (39) neuralassign1 -> . ID
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 103 (empty -> .)
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    ID              shift and go to state 60
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71

  ! READ            [ reduce using rule 103 (empty -> .) ]
  ! WRITE           [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 103 (empty -> .) ]
  ! CTEINT          [ reduce using rule 103 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 103 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 103 (empty -> .) ]

    reading                        shift and go to state 45
    statutesaux                    shift and go to state 81
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    assign                         shift and go to state 44
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    neuralassign1                  shift and go to state 53
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 46

    (28) statutes -> writing . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (103) empty -> .
    (38) assign -> . neuralassign1 idarray neuralassign2 exp SEMICOLON
    (48) reading -> . READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON
    (41) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (52) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (53) ifing -> . IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing
    (58) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (59) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (39) neuralassign1 -> . ID
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 103 (empty -> .)
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    ID              shift and go to state 60
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71

  ! READ            [ reduce using rule 103 (empty -> .) ]
  ! WRITE           [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 103 (empty -> .) ]
  ! CTEINT          [ reduce using rule 103 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 103 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 103 (empty -> .) ]

    writing                        shift and go to state 46
    statutesaux                    shift and go to state 82
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    neuralassign1                  shift and go to state 53
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 47

    (29) statutes -> returning . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (103) empty -> .
    (38) assign -> . neuralassign1 idarray neuralassign2 exp SEMICOLON
    (48) reading -> . READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON
    (41) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (52) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (53) ifing -> . IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing
    (58) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (59) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (39) neuralassign1 -> . ID
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 103 (empty -> .)
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    ID              shift and go to state 60
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71

  ! READ            [ reduce using rule 103 (empty -> .) ]
  ! WRITE           [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 103 (empty -> .) ]
  ! CTEINT          [ reduce using rule 103 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 103 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 103 (empty -> .) ]

    returning                      shift and go to state 47
    statutesaux                    shift and go to state 83
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    neuralassign1                  shift and go to state 53
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 48

    (30) statutes -> ifing . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (103) empty -> .
    (38) assign -> . neuralassign1 idarray neuralassign2 exp SEMICOLON
    (48) reading -> . READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON
    (41) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (52) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (53) ifing -> . IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing
    (58) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (59) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (39) neuralassign1 -> . ID
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 103 (empty -> .)
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    ID              shift and go to state 60
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71

  ! READ            [ reduce using rule 103 (empty -> .) ]
  ! WRITE           [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 103 (empty -> .) ]
  ! CTEINT          [ reduce using rule 103 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 103 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 103 (empty -> .) ]

    ifing                          shift and go to state 48
    statutesaux                    shift and go to state 84
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    neuralassign1                  shift and go to state 53
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 49

    (31) statutes -> whiling . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (103) empty -> .
    (38) assign -> . neuralassign1 idarray neuralassign2 exp SEMICOLON
    (48) reading -> . READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON
    (41) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (52) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (53) ifing -> . IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing
    (58) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (59) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (39) neuralassign1 -> . ID
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 103 (empty -> .)
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    ID              shift and go to state 60
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71

  ! READ            [ reduce using rule 103 (empty -> .) ]
  ! WRITE           [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 103 (empty -> .) ]
  ! CTEINT          [ reduce using rule 103 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 103 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 103 (empty -> .) ]

    whiling                        shift and go to state 49
    statutesaux                    shift and go to state 85
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    neuralassign1                  shift and go to state 53
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 50

    (32) statutes -> foring . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (103) empty -> .
    (38) assign -> . neuralassign1 idarray neuralassign2 exp SEMICOLON
    (48) reading -> . READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON
    (41) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (52) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (53) ifing -> . IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing
    (58) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (59) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (39) neuralassign1 -> . ID
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 103 (empty -> .)
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    ID              shift and go to state 60
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71

  ! READ            [ reduce using rule 103 (empty -> .) ]
  ! WRITE           [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 103 (empty -> .) ]
  ! CTEINT          [ reduce using rule 103 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 103 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 103 (empty -> .) ]

    foring                         shift and go to state 50
    statutesaux                    shift and go to state 86
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    neuralassign1                  shift and go to state 53
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 51

    (33) statutes -> exp . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (103) empty -> .
    (38) assign -> . neuralassign1 idarray neuralassign2 exp SEMICOLON
    (48) reading -> . READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON
    (41) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (52) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (53) ifing -> . IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing
    (58) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (59) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (39) neuralassign1 -> . ID
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 103 (empty -> .)
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    ID              shift and go to state 60
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71

  ! READ            [ reduce using rule 103 (empty -> .) ]
  ! WRITE           [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 103 (empty -> .) ]
  ! CTEINT          [ reduce using rule 103 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 103 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 103 (empty -> .) ]

    exp                            shift and go to state 51
    statutesaux                    shift and go to state 87
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    specialfunc                    shift and go to state 52
    neuralassign1                  shift and go to state 53
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 52

    (34) statutes -> specialfunc . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (103) empty -> .
    (38) assign -> . neuralassign1 idarray neuralassign2 exp SEMICOLON
    (48) reading -> . READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON
    (41) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (52) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (53) ifing -> . IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing
    (58) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (59) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (39) neuralassign1 -> . ID
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 103 (empty -> .)
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    ID              shift and go to state 60
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71

  ! READ            [ reduce using rule 103 (empty -> .) ]
  ! WRITE           [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 103 (empty -> .) ]
  ! CTEINT          [ reduce using rule 103 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 103 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 103 (empty -> .) ]

    specialfunc                    shift and go to state 52
    statutesaux                    shift and go to state 88
    statutes                       shift and go to state 79
    empty                          shift and go to state 80
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    neuralassign1                  shift and go to state 53
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 53

    (38) assign -> neuralassign1 . idarray neuralassign2 exp SEMICOLON
    (60) idarray -> . LEFTSQR exp RIGHTSQR
    (61) idarray -> . empty
    (103) empty -> .

    LEFTSQR         shift and go to state 90
    EQUAL           reduce using rule 103 (empty -> .)

    idarray                        shift and go to state 89
    empty                          shift and go to state 91

state 54

    (48) reading -> READ . LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 92


state 55

    (41) writing -> WRITE . LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 93


state 56

    (52) returning -> RETURN . LEFTPAR exp RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 94


state 57

    (53) ifing -> IF . LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing

    LEFTPAR         shift and go to state 95


state 58

    (58) whiling -> WHILE . LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR

    LEFTPAR         shift and go to state 96


state 59

    (59) foring -> FOR . ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR

    ID              shift and go to state 97


state 60

    (39) neuralassign1 -> ID .
    (96) cteexp -> ID . paramsexp
    (97) paramsexp -> . LEFTPAR paramsexp2 RIGHTPAR
    (98) paramsexp -> . idarray
    (60) idarray -> . LEFTSQR exp RIGHTSQR
    (61) idarray -> . empty
    (103) empty -> .

  ! shift/reduce conflict for LEFTSQR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
    EQUAL           reduce using rule 39 (neuralassign1 -> ID .)
    LEFTPAR         shift and go to state 99
    LEFTSQR         shift and go to state 90
    TIMES           reduce using rule 103 (empty -> .)
    DIVIDE          reduce using rule 103 (empty -> .)
    PLUS            reduce using rule 103 (empty -> .)
    REST            reduce using rule 103 (empty -> .)
    GREATER         reduce using rule 103 (empty -> .)
    GREATERAND      reduce using rule 103 (empty -> .)
    LESSER          reduce using rule 103 (empty -> .)
    LESSERAND       reduce using rule 103 (empty -> .)
    SAME            reduce using rule 103 (empty -> .)
    NOTSAME         reduce using rule 103 (empty -> .)
    NOT             reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    READ            reduce using rule 103 (empty -> .)
    WRITE           reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTEINT          reduce using rule 103 (empty -> .)
    CTEFLOAT        reduce using rule 103 (empty -> .)
    CTECHAR         reduce using rule 103 (empty -> .)
    RIGHTBR         reduce using rule 103 (empty -> .)

  ! LEFTSQR         [ reduce using rule 39 (neuralassign1 -> ID .) ]
  ! LEFTPAR         [ reduce using rule 103 (empty -> .) ]

    paramsexp                      shift and go to state 98
    idarray                        shift and go to state 100
    empty                          shift and go to state 91

state 61

    (62) exp -> andexp . exp1
    (63) exp1 -> . OR exp
    (64) exp1 -> . empty
    (103) empty -> .

    OR              shift and go to state 102
    READ            reduce using rule 103 (empty -> .)
    WRITE           reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    LEFTPAR         reduce using rule 103 (empty -> .)
    CTEINT          reduce using rule 103 (empty -> .)
    CTEFLOAT        reduce using rule 103 (empty -> .)
    CTECHAR         reduce using rule 103 (empty -> .)
    RIGHTBR         reduce using rule 103 (empty -> .)
    RIGHTPAR        reduce using rule 103 (empty -> .)
    RIGHTSQR        reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)
    SEMICOLON       reduce using rule 103 (empty -> .)
    TO              reduce using rule 103 (empty -> .)
    DO              reduce using rule 103 (empty -> .)

    exp1                           shift and go to state 101
    empty                          shift and go to state 103

state 62

    (37) specialfunc -> empty .

    READ            reduce using rule 37 (specialfunc -> empty .)
    WRITE           reduce using rule 37 (specialfunc -> empty .)
    RETURN          reduce using rule 37 (specialfunc -> empty .)
    IF              reduce using rule 37 (specialfunc -> empty .)
    WHILE           reduce using rule 37 (specialfunc -> empty .)
    FOR             reduce using rule 37 (specialfunc -> empty .)
    ID              reduce using rule 37 (specialfunc -> empty .)
    LEFTPAR         reduce using rule 37 (specialfunc -> empty .)
    CTEINT          reduce using rule 37 (specialfunc -> empty .)
    CTEFLOAT        reduce using rule 37 (specialfunc -> empty .)
    CTECHAR         reduce using rule 37 (specialfunc -> empty .)
    RIGHTBR         reduce using rule 37 (specialfunc -> empty .)


state 63

    (65) andexp -> boolexp . andexp1
    (66) andexp1 -> . neuraland andexp
    (67) andexp1 -> . empty
    (68) neuraland -> . AND
    (103) empty -> .

    AND             shift and go to state 107
    OR              reduce using rule 103 (empty -> .)
    READ            reduce using rule 103 (empty -> .)
    WRITE           reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    LEFTPAR         reduce using rule 103 (empty -> .)
    CTEINT          reduce using rule 103 (empty -> .)
    CTEFLOAT        reduce using rule 103 (empty -> .)
    CTECHAR         reduce using rule 103 (empty -> .)
    RIGHTBR         reduce using rule 103 (empty -> .)
    RIGHTPAR        reduce using rule 103 (empty -> .)
    RIGHTSQR        reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)
    SEMICOLON       reduce using rule 103 (empty -> .)
    TO              reduce using rule 103 (empty -> .)
    DO              reduce using rule 103 (empty -> .)

    andexp1                        shift and go to state 104
    neuraland                      shift and go to state 105
    empty                          shift and go to state 106

state 64

    (69) boolexp -> arithexp . boolexp1
    (70) boolexp1 -> . neuralbool arithexp
    (71) boolexp1 -> . empty
    (72) neuralbool -> . GREATER
    (73) neuralbool -> . GREATERAND
    (74) neuralbool -> . LESSER
    (75) neuralbool -> . LESSERAND
    (76) neuralbool -> . SAME
    (77) neuralbool -> . NOTSAME
    (78) neuralbool -> . NOT
    (103) empty -> .

    GREATER         shift and go to state 111
    GREATERAND      shift and go to state 112
    LESSER          shift and go to state 113
    LESSERAND       shift and go to state 114
    SAME            shift and go to state 115
    NOTSAME         shift and go to state 116
    NOT             shift and go to state 117
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    READ            reduce using rule 103 (empty -> .)
    WRITE           reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    LEFTPAR         reduce using rule 103 (empty -> .)
    CTEINT          reduce using rule 103 (empty -> .)
    CTEFLOAT        reduce using rule 103 (empty -> .)
    CTECHAR         reduce using rule 103 (empty -> .)
    RIGHTBR         reduce using rule 103 (empty -> .)
    RIGHTPAR        reduce using rule 103 (empty -> .)
    RIGHTSQR        reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)
    SEMICOLON       reduce using rule 103 (empty -> .)
    TO              reduce using rule 103 (empty -> .)
    DO              reduce using rule 103 (empty -> .)

    boolexp1                       shift and go to state 108
    neuralbool                     shift and go to state 109
    empty                          shift and go to state 110

state 65

    (79) arithexp -> geoexp . arithexp1
    (80) arithexp1 -> . neuralarith arithexp
    (81) arithexp1 -> . empty
    (82) neuralarith -> . PLUS
    (83) neuralarith -> . REST
    (103) empty -> .

    PLUS            shift and go to state 121
    REST            shift and go to state 122
    GREATER         reduce using rule 103 (empty -> .)
    GREATERAND      reduce using rule 103 (empty -> .)
    LESSER          reduce using rule 103 (empty -> .)
    LESSERAND       reduce using rule 103 (empty -> .)
    SAME            reduce using rule 103 (empty -> .)
    NOTSAME         reduce using rule 103 (empty -> .)
    NOT             reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    READ            reduce using rule 103 (empty -> .)
    WRITE           reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    LEFTPAR         reduce using rule 103 (empty -> .)
    CTEINT          reduce using rule 103 (empty -> .)
    CTEFLOAT        reduce using rule 103 (empty -> .)
    CTECHAR         reduce using rule 103 (empty -> .)
    RIGHTBR         reduce using rule 103 (empty -> .)
    RIGHTPAR        reduce using rule 103 (empty -> .)
    RIGHTSQR        reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)
    SEMICOLON       reduce using rule 103 (empty -> .)
    TO              reduce using rule 103 (empty -> .)
    DO              reduce using rule 103 (empty -> .)

    arithexp1                      shift and go to state 118
    neuralarith                    shift and go to state 119
    empty                          shift and go to state 120

state 66

    (84) geoexp -> finexp . geoexp1
    (85) geoexp1 -> . neuralgeo geoexp
    (86) geoexp1 -> . empty
    (87) neuralgeo -> . TIMES
    (88) neuralgeo -> . DIVIDE
    (103) empty -> .

    TIMES           shift and go to state 126
    DIVIDE          shift and go to state 127
    PLUS            reduce using rule 103 (empty -> .)
    REST            reduce using rule 103 (empty -> .)
    GREATER         reduce using rule 103 (empty -> .)
    GREATERAND      reduce using rule 103 (empty -> .)
    LESSER          reduce using rule 103 (empty -> .)
    LESSERAND       reduce using rule 103 (empty -> .)
    SAME            reduce using rule 103 (empty -> .)
    NOTSAME         reduce using rule 103 (empty -> .)
    NOT             reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    READ            reduce using rule 103 (empty -> .)
    WRITE           reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    LEFTPAR         reduce using rule 103 (empty -> .)
    CTEINT          reduce using rule 103 (empty -> .)
    CTEFLOAT        reduce using rule 103 (empty -> .)
    CTECHAR         reduce using rule 103 (empty -> .)
    RIGHTBR         reduce using rule 103 (empty -> .)
    RIGHTPAR        reduce using rule 103 (empty -> .)
    RIGHTSQR        reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)
    SEMICOLON       reduce using rule 103 (empty -> .)
    TO              reduce using rule 103 (empty -> .)
    DO              reduce using rule 103 (empty -> .)

    geoexp1                        shift and go to state 123
    neuralgeo                      shift and go to state 124
    empty                          shift and go to state 125

state 67

    (91) finexp -> addparenth . exp popparenth
    (62) exp -> . andexp exp1
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71
    ID              shift and go to state 129

    addparenth                     shift and go to state 67
    exp                            shift and go to state 128
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    cteexp                         shift and go to state 68

state 68

    (92) finexp -> cteexp .

    TIMES           reduce using rule 92 (finexp -> cteexp .)
    DIVIDE          reduce using rule 92 (finexp -> cteexp .)
    PLUS            reduce using rule 92 (finexp -> cteexp .)
    REST            reduce using rule 92 (finexp -> cteexp .)
    GREATER         reduce using rule 92 (finexp -> cteexp .)
    GREATERAND      reduce using rule 92 (finexp -> cteexp .)
    LESSER          reduce using rule 92 (finexp -> cteexp .)
    LESSERAND       reduce using rule 92 (finexp -> cteexp .)
    SAME            reduce using rule 92 (finexp -> cteexp .)
    NOTSAME         reduce using rule 92 (finexp -> cteexp .)
    NOT             reduce using rule 92 (finexp -> cteexp .)
    AND             reduce using rule 92 (finexp -> cteexp .)
    OR              reduce using rule 92 (finexp -> cteexp .)
    READ            reduce using rule 92 (finexp -> cteexp .)
    WRITE           reduce using rule 92 (finexp -> cteexp .)
    RETURN          reduce using rule 92 (finexp -> cteexp .)
    IF              reduce using rule 92 (finexp -> cteexp .)
    WHILE           reduce using rule 92 (finexp -> cteexp .)
    FOR             reduce using rule 92 (finexp -> cteexp .)
    ID              reduce using rule 92 (finexp -> cteexp .)
    LEFTPAR         reduce using rule 92 (finexp -> cteexp .)
    CTEINT          reduce using rule 92 (finexp -> cteexp .)
    CTEFLOAT        reduce using rule 92 (finexp -> cteexp .)
    CTECHAR         reduce using rule 92 (finexp -> cteexp .)
    RIGHTBR         reduce using rule 92 (finexp -> cteexp .)
    RIGHTPAR        reduce using rule 92 (finexp -> cteexp .)
    RIGHTSQR        reduce using rule 92 (finexp -> cteexp .)
    COMMA           reduce using rule 92 (finexp -> cteexp .)
    SEMICOLON       reduce using rule 92 (finexp -> cteexp .)
    TO              reduce using rule 92 (finexp -> cteexp .)
    DO              reduce using rule 92 (finexp -> cteexp .)


state 69

    (93) cteexp -> CTEINT .

    TIMES           reduce using rule 93 (cteexp -> CTEINT .)
    DIVIDE          reduce using rule 93 (cteexp -> CTEINT .)
    PLUS            reduce using rule 93 (cteexp -> CTEINT .)
    REST            reduce using rule 93 (cteexp -> CTEINT .)
    GREATER         reduce using rule 93 (cteexp -> CTEINT .)
    GREATERAND      reduce using rule 93 (cteexp -> CTEINT .)
    LESSER          reduce using rule 93 (cteexp -> CTEINT .)
    LESSERAND       reduce using rule 93 (cteexp -> CTEINT .)
    SAME            reduce using rule 93 (cteexp -> CTEINT .)
    NOTSAME         reduce using rule 93 (cteexp -> CTEINT .)
    NOT             reduce using rule 93 (cteexp -> CTEINT .)
    AND             reduce using rule 93 (cteexp -> CTEINT .)
    OR              reduce using rule 93 (cteexp -> CTEINT .)
    READ            reduce using rule 93 (cteexp -> CTEINT .)
    WRITE           reduce using rule 93 (cteexp -> CTEINT .)
    RETURN          reduce using rule 93 (cteexp -> CTEINT .)
    IF              reduce using rule 93 (cteexp -> CTEINT .)
    WHILE           reduce using rule 93 (cteexp -> CTEINT .)
    FOR             reduce using rule 93 (cteexp -> CTEINT .)
    ID              reduce using rule 93 (cteexp -> CTEINT .)
    LEFTPAR         reduce using rule 93 (cteexp -> CTEINT .)
    CTEINT          reduce using rule 93 (cteexp -> CTEINT .)
    CTEFLOAT        reduce using rule 93 (cteexp -> CTEINT .)
    CTECHAR         reduce using rule 93 (cteexp -> CTEINT .)
    RIGHTBR         reduce using rule 93 (cteexp -> CTEINT .)
    RIGHTPAR        reduce using rule 93 (cteexp -> CTEINT .)
    RIGHTSQR        reduce using rule 93 (cteexp -> CTEINT .)
    COMMA           reduce using rule 93 (cteexp -> CTEINT .)
    SEMICOLON       reduce using rule 93 (cteexp -> CTEINT .)
    TO              reduce using rule 93 (cteexp -> CTEINT .)
    DO              reduce using rule 93 (cteexp -> CTEINT .)


state 70

    (94) cteexp -> CTEFLOAT .

    TIMES           reduce using rule 94 (cteexp -> CTEFLOAT .)
    DIVIDE          reduce using rule 94 (cteexp -> CTEFLOAT .)
    PLUS            reduce using rule 94 (cteexp -> CTEFLOAT .)
    REST            reduce using rule 94 (cteexp -> CTEFLOAT .)
    GREATER         reduce using rule 94 (cteexp -> CTEFLOAT .)
    GREATERAND      reduce using rule 94 (cteexp -> CTEFLOAT .)
    LESSER          reduce using rule 94 (cteexp -> CTEFLOAT .)
    LESSERAND       reduce using rule 94 (cteexp -> CTEFLOAT .)
    SAME            reduce using rule 94 (cteexp -> CTEFLOAT .)
    NOTSAME         reduce using rule 94 (cteexp -> CTEFLOAT .)
    NOT             reduce using rule 94 (cteexp -> CTEFLOAT .)
    AND             reduce using rule 94 (cteexp -> CTEFLOAT .)
    OR              reduce using rule 94 (cteexp -> CTEFLOAT .)
    READ            reduce using rule 94 (cteexp -> CTEFLOAT .)
    WRITE           reduce using rule 94 (cteexp -> CTEFLOAT .)
    RETURN          reduce using rule 94 (cteexp -> CTEFLOAT .)
    IF              reduce using rule 94 (cteexp -> CTEFLOAT .)
    WHILE           reduce using rule 94 (cteexp -> CTEFLOAT .)
    FOR             reduce using rule 94 (cteexp -> CTEFLOAT .)
    ID              reduce using rule 94 (cteexp -> CTEFLOAT .)
    LEFTPAR         reduce using rule 94 (cteexp -> CTEFLOAT .)
    CTEINT          reduce using rule 94 (cteexp -> CTEFLOAT .)
    CTEFLOAT        reduce using rule 94 (cteexp -> CTEFLOAT .)
    CTECHAR         reduce using rule 94 (cteexp -> CTEFLOAT .)
    RIGHTBR         reduce using rule 94 (cteexp -> CTEFLOAT .)
    RIGHTPAR        reduce using rule 94 (cteexp -> CTEFLOAT .)
    RIGHTSQR        reduce using rule 94 (cteexp -> CTEFLOAT .)
    COMMA           reduce using rule 94 (cteexp -> CTEFLOAT .)
    SEMICOLON       reduce using rule 94 (cteexp -> CTEFLOAT .)
    TO              reduce using rule 94 (cteexp -> CTEFLOAT .)
    DO              reduce using rule 94 (cteexp -> CTEFLOAT .)


state 71

    (95) cteexp -> CTECHAR .

    TIMES           reduce using rule 95 (cteexp -> CTECHAR .)
    DIVIDE          reduce using rule 95 (cteexp -> CTECHAR .)
    PLUS            reduce using rule 95 (cteexp -> CTECHAR .)
    REST            reduce using rule 95 (cteexp -> CTECHAR .)
    GREATER         reduce using rule 95 (cteexp -> CTECHAR .)
    GREATERAND      reduce using rule 95 (cteexp -> CTECHAR .)
    LESSER          reduce using rule 95 (cteexp -> CTECHAR .)
    LESSERAND       reduce using rule 95 (cteexp -> CTECHAR .)
    SAME            reduce using rule 95 (cteexp -> CTECHAR .)
    NOTSAME         reduce using rule 95 (cteexp -> CTECHAR .)
    NOT             reduce using rule 95 (cteexp -> CTECHAR .)
    AND             reduce using rule 95 (cteexp -> CTECHAR .)
    OR              reduce using rule 95 (cteexp -> CTECHAR .)
    READ            reduce using rule 95 (cteexp -> CTECHAR .)
    WRITE           reduce using rule 95 (cteexp -> CTECHAR .)
    RETURN          reduce using rule 95 (cteexp -> CTECHAR .)
    IF              reduce using rule 95 (cteexp -> CTECHAR .)
    WHILE           reduce using rule 95 (cteexp -> CTECHAR .)
    FOR             reduce using rule 95 (cteexp -> CTECHAR .)
    ID              reduce using rule 95 (cteexp -> CTECHAR .)
    LEFTPAR         reduce using rule 95 (cteexp -> CTECHAR .)
    CTEINT          reduce using rule 95 (cteexp -> CTECHAR .)
    CTEFLOAT        reduce using rule 95 (cteexp -> CTECHAR .)
    CTECHAR         reduce using rule 95 (cteexp -> CTECHAR .)
    RIGHTBR         reduce using rule 95 (cteexp -> CTECHAR .)
    RIGHTPAR        reduce using rule 95 (cteexp -> CTECHAR .)
    RIGHTSQR        reduce using rule 95 (cteexp -> CTECHAR .)
    COMMA           reduce using rule 95 (cteexp -> CTECHAR .)
    SEMICOLON       reduce using rule 95 (cteexp -> CTECHAR .)
    TO              reduce using rule 95 (cteexp -> CTECHAR .)
    DO              reduce using rule 95 (cteexp -> CTECHAR .)


state 72

    (17) funcparam -> LEFTPAR parameters RIGHTPAR . SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules

    SEMICOLON       shift and go to state 130


state 73

    (22) parameters -> typing COLON . ID idarray mulparams

    ID              shift and go to state 131


state 74

    (5) vars -> typing COLON neuralinsertvar varsarr varsmul vars .

    FUNCTION        reduce using rule 5 (vars -> typing COLON neuralinsertvar varsarr varsmul vars .)
    MAIN            reduce using rule 5 (vars -> typing COLON neuralinsertvar varsarr varsmul vars .)
    LEFTBR          reduce using rule 5 (vars -> typing COLON neuralinsertvar varsarr varsmul vars .)


state 75

    (10) varsmul -> COMMA neuralinsertvar . varsarr varsmul
    (8) varsarr -> . LEFTSQR CTEINT RIGHTSQR
    (9) varsarr -> . empty
    (103) empty -> .

    LEFTSQR         shift and go to state 32
    COMMA           reduce using rule 103 (empty -> .)
    SEMICOLON       reduce using rule 103 (empty -> .)

    varsarr                        shift and go to state 132
    empty                          shift and go to state 33

state 76

    (8) varsarr -> LEFTSQR CTEINT RIGHTSQR .

    COMMA           reduce using rule 8 (varsarr -> LEFTSQR CTEINT RIGHTSQR .)
    SEMICOLON       reduce using rule 8 (varsarr -> LEFTSQR CTEINT RIGHTSQR .)


state 77

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR .

    $end            reduce using rule 1 (program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR .)


state 78

    (26) statutes -> assign statutesaux .

    RIGHTBR         reduce using rule 26 (statutes -> assign statutesaux .)


state 79

    (35) statutesaux -> statutes .

    RIGHTBR         reduce using rule 35 (statutesaux -> statutes .)


state 80

    (36) statutesaux -> empty .
    (37) specialfunc -> empty .

  ! reduce/reduce conflict for RIGHTBR resolved using rule 36 (statutesaux -> empty .)
    RIGHTBR         reduce using rule 36 (statutesaux -> empty .)
    READ            reduce using rule 37 (specialfunc -> empty .)
    WRITE           reduce using rule 37 (specialfunc -> empty .)
    RETURN          reduce using rule 37 (specialfunc -> empty .)
    IF              reduce using rule 37 (specialfunc -> empty .)
    WHILE           reduce using rule 37 (specialfunc -> empty .)
    FOR             reduce using rule 37 (specialfunc -> empty .)
    ID              reduce using rule 37 (specialfunc -> empty .)
    LEFTPAR         reduce using rule 37 (specialfunc -> empty .)
    CTEINT          reduce using rule 37 (specialfunc -> empty .)
    CTEFLOAT        reduce using rule 37 (specialfunc -> empty .)
    CTECHAR         reduce using rule 37 (specialfunc -> empty .)

  ! RIGHTBR         [ reduce using rule 37 (specialfunc -> empty .) ]


state 81

    (27) statutes -> reading statutesaux .

    RIGHTBR         reduce using rule 27 (statutes -> reading statutesaux .)


state 82

    (28) statutes -> writing statutesaux .

    RIGHTBR         reduce using rule 28 (statutes -> writing statutesaux .)


state 83

    (29) statutes -> returning statutesaux .

    RIGHTBR         reduce using rule 29 (statutes -> returning statutesaux .)


state 84

    (30) statutes -> ifing statutesaux .

    RIGHTBR         reduce using rule 30 (statutes -> ifing statutesaux .)


state 85

    (31) statutes -> whiling statutesaux .

    RIGHTBR         reduce using rule 31 (statutes -> whiling statutesaux .)


state 86

    (32) statutes -> foring statutesaux .

    RIGHTBR         reduce using rule 32 (statutes -> foring statutesaux .)


state 87

    (33) statutes -> exp statutesaux .

    RIGHTBR         reduce using rule 33 (statutes -> exp statutesaux .)


state 88

    (34) statutes -> specialfunc statutesaux .

    RIGHTBR         reduce using rule 34 (statutes -> specialfunc statutesaux .)


state 89

    (38) assign -> neuralassign1 idarray . neuralassign2 exp SEMICOLON
    (40) neuralassign2 -> . EQUAL

    EQUAL           shift and go to state 134

    neuralassign2                  shift and go to state 133

state 90

    (60) idarray -> LEFTSQR . exp RIGHTSQR
    (62) exp -> . andexp exp1
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71
    ID              shift and go to state 129

    exp                            shift and go to state 135
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 91

    (61) idarray -> empty .

    EQUAL           reduce using rule 61 (idarray -> empty .)
    TIMES           reduce using rule 61 (idarray -> empty .)
    DIVIDE          reduce using rule 61 (idarray -> empty .)
    PLUS            reduce using rule 61 (idarray -> empty .)
    REST            reduce using rule 61 (idarray -> empty .)
    GREATER         reduce using rule 61 (idarray -> empty .)
    GREATERAND      reduce using rule 61 (idarray -> empty .)
    LESSER          reduce using rule 61 (idarray -> empty .)
    LESSERAND       reduce using rule 61 (idarray -> empty .)
    SAME            reduce using rule 61 (idarray -> empty .)
    NOTSAME         reduce using rule 61 (idarray -> empty .)
    NOT             reduce using rule 61 (idarray -> empty .)
    AND             reduce using rule 61 (idarray -> empty .)
    OR              reduce using rule 61 (idarray -> empty .)
    READ            reduce using rule 61 (idarray -> empty .)
    WRITE           reduce using rule 61 (idarray -> empty .)
    RETURN          reduce using rule 61 (idarray -> empty .)
    IF              reduce using rule 61 (idarray -> empty .)
    WHILE           reduce using rule 61 (idarray -> empty .)
    FOR             reduce using rule 61 (idarray -> empty .)
    ID              reduce using rule 61 (idarray -> empty .)
    LEFTPAR         reduce using rule 61 (idarray -> empty .)
    CTEINT          reduce using rule 61 (idarray -> empty .)
    CTEFLOAT        reduce using rule 61 (idarray -> empty .)
    CTECHAR         reduce using rule 61 (idarray -> empty .)
    RIGHTBR         reduce using rule 61 (idarray -> empty .)
    RIGHTPAR        reduce using rule 61 (idarray -> empty .)
    RIGHTSQR        reduce using rule 61 (idarray -> empty .)
    COMMA           reduce using rule 61 (idarray -> empty .)
    SEMICOLON       reduce using rule 61 (idarray -> empty .)
    TO              reduce using rule 61 (idarray -> empty .)
    DO              reduce using rule 61 (idarray -> empty .)


state 92

    (48) reading -> READ LEFTPAR . neuralread idarray mulread RIGHTPAR SEMICOLON
    (49) neuralread -> . ID

    ID              shift and go to state 137

    neuralread                     shift and go to state 136

state 93

    (41) writing -> WRITE LEFTPAR . auxwrite mulwrite RIGHTPAR SEMICOLON
    (42) auxwrite -> . writetyping
    (43) auxwrite -> . exp
    (44) writetyping -> . STRING
    (45) writetyping -> . CTECHAR
    (62) exp -> . andexp exp1
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

    STRING          shift and go to state 141
    CTECHAR         shift and go to state 142
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    ID              shift and go to state 129

    auxwrite                       shift and go to state 138
    writetyping                    shift and go to state 139
    exp                            shift and go to state 140
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 94

    (52) returning -> RETURN LEFTPAR . exp RIGHTPAR SEMICOLON
    (62) exp -> . andexp exp1
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71
    ID              shift and go to state 129

    exp                            shift and go to state 143
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 95

    (53) ifing -> IF LEFTPAR . exp neuralif THEN LEFTBR statutes RIGHTBR elsing
    (62) exp -> . andexp exp1
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71
    ID              shift and go to state 129

    exp                            shift and go to state 144
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 96

    (58) whiling -> WHILE LEFTPAR . exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71
    ID              shift and go to state 129

    exp                            shift and go to state 145
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 97

    (59) foring -> FOR ID . idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (60) idarray -> . LEFTSQR exp RIGHTSQR
    (61) idarray -> . empty
    (103) empty -> .

    LEFTSQR         shift and go to state 90
    EQUAL           reduce using rule 103 (empty -> .)

    idarray                        shift and go to state 146
    empty                          shift and go to state 91

state 98

    (96) cteexp -> ID paramsexp .

    TIMES           reduce using rule 96 (cteexp -> ID paramsexp .)
    DIVIDE          reduce using rule 96 (cteexp -> ID paramsexp .)
    PLUS            reduce using rule 96 (cteexp -> ID paramsexp .)
    REST            reduce using rule 96 (cteexp -> ID paramsexp .)
    GREATER         reduce using rule 96 (cteexp -> ID paramsexp .)
    GREATERAND      reduce using rule 96 (cteexp -> ID paramsexp .)
    LESSER          reduce using rule 96 (cteexp -> ID paramsexp .)
    LESSERAND       reduce using rule 96 (cteexp -> ID paramsexp .)
    SAME            reduce using rule 96 (cteexp -> ID paramsexp .)
    NOTSAME         reduce using rule 96 (cteexp -> ID paramsexp .)
    NOT             reduce using rule 96 (cteexp -> ID paramsexp .)
    AND             reduce using rule 96 (cteexp -> ID paramsexp .)
    OR              reduce using rule 96 (cteexp -> ID paramsexp .)
    READ            reduce using rule 96 (cteexp -> ID paramsexp .)
    WRITE           reduce using rule 96 (cteexp -> ID paramsexp .)
    RETURN          reduce using rule 96 (cteexp -> ID paramsexp .)
    IF              reduce using rule 96 (cteexp -> ID paramsexp .)
    WHILE           reduce using rule 96 (cteexp -> ID paramsexp .)
    FOR             reduce using rule 96 (cteexp -> ID paramsexp .)
    ID              reduce using rule 96 (cteexp -> ID paramsexp .)
    LEFTPAR         reduce using rule 96 (cteexp -> ID paramsexp .)
    CTEINT          reduce using rule 96 (cteexp -> ID paramsexp .)
    CTEFLOAT        reduce using rule 96 (cteexp -> ID paramsexp .)
    CTECHAR         reduce using rule 96 (cteexp -> ID paramsexp .)
    RIGHTBR         reduce using rule 96 (cteexp -> ID paramsexp .)
    RIGHTPAR        reduce using rule 96 (cteexp -> ID paramsexp .)
    RIGHTSQR        reduce using rule 96 (cteexp -> ID paramsexp .)
    COMMA           reduce using rule 96 (cteexp -> ID paramsexp .)
    SEMICOLON       reduce using rule 96 (cteexp -> ID paramsexp .)
    TO              reduce using rule 96 (cteexp -> ID paramsexp .)
    DO              reduce using rule 96 (cteexp -> ID paramsexp .)


state 99

    (97) paramsexp -> LEFTPAR . paramsexp2 RIGHTPAR
    (99) paramsexp2 -> . exp auxparamsexp2
    (100) paramsexp2 -> . empty
    (62) exp -> . andexp exp1
    (103) empty -> .
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

    RIGHTPAR        reduce using rule 103 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71
    ID              shift and go to state 129

    paramsexp2                     shift and go to state 147
    exp                            shift and go to state 148
    empty                          shift and go to state 149
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 100

    (98) paramsexp -> idarray .

    TIMES           reduce using rule 98 (paramsexp -> idarray .)
    DIVIDE          reduce using rule 98 (paramsexp -> idarray .)
    PLUS            reduce using rule 98 (paramsexp -> idarray .)
    REST            reduce using rule 98 (paramsexp -> idarray .)
    GREATER         reduce using rule 98 (paramsexp -> idarray .)
    GREATERAND      reduce using rule 98 (paramsexp -> idarray .)
    LESSER          reduce using rule 98 (paramsexp -> idarray .)
    LESSERAND       reduce using rule 98 (paramsexp -> idarray .)
    SAME            reduce using rule 98 (paramsexp -> idarray .)
    NOTSAME         reduce using rule 98 (paramsexp -> idarray .)
    NOT             reduce using rule 98 (paramsexp -> idarray .)
    AND             reduce using rule 98 (paramsexp -> idarray .)
    OR              reduce using rule 98 (paramsexp -> idarray .)
    READ            reduce using rule 98 (paramsexp -> idarray .)
    WRITE           reduce using rule 98 (paramsexp -> idarray .)
    RETURN          reduce using rule 98 (paramsexp -> idarray .)
    IF              reduce using rule 98 (paramsexp -> idarray .)
    WHILE           reduce using rule 98 (paramsexp -> idarray .)
    FOR             reduce using rule 98 (paramsexp -> idarray .)
    ID              reduce using rule 98 (paramsexp -> idarray .)
    LEFTPAR         reduce using rule 98 (paramsexp -> idarray .)
    CTEINT          reduce using rule 98 (paramsexp -> idarray .)
    CTEFLOAT        reduce using rule 98 (paramsexp -> idarray .)
    CTECHAR         reduce using rule 98 (paramsexp -> idarray .)
    RIGHTBR         reduce using rule 98 (paramsexp -> idarray .)
    RIGHTPAR        reduce using rule 98 (paramsexp -> idarray .)
    RIGHTSQR        reduce using rule 98 (paramsexp -> idarray .)
    COMMA           reduce using rule 98 (paramsexp -> idarray .)
    SEMICOLON       reduce using rule 98 (paramsexp -> idarray .)
    TO              reduce using rule 98 (paramsexp -> idarray .)
    DO              reduce using rule 98 (paramsexp -> idarray .)


state 101

    (62) exp -> andexp exp1 .

    READ            reduce using rule 62 (exp -> andexp exp1 .)
    WRITE           reduce using rule 62 (exp -> andexp exp1 .)
    RETURN          reduce using rule 62 (exp -> andexp exp1 .)
    IF              reduce using rule 62 (exp -> andexp exp1 .)
    WHILE           reduce using rule 62 (exp -> andexp exp1 .)
    FOR             reduce using rule 62 (exp -> andexp exp1 .)
    ID              reduce using rule 62 (exp -> andexp exp1 .)
    LEFTPAR         reduce using rule 62 (exp -> andexp exp1 .)
    CTEINT          reduce using rule 62 (exp -> andexp exp1 .)
    CTEFLOAT        reduce using rule 62 (exp -> andexp exp1 .)
    CTECHAR         reduce using rule 62 (exp -> andexp exp1 .)
    RIGHTBR         reduce using rule 62 (exp -> andexp exp1 .)
    RIGHTPAR        reduce using rule 62 (exp -> andexp exp1 .)
    RIGHTSQR        reduce using rule 62 (exp -> andexp exp1 .)
    COMMA           reduce using rule 62 (exp -> andexp exp1 .)
    SEMICOLON       reduce using rule 62 (exp -> andexp exp1 .)
    TO              reduce using rule 62 (exp -> andexp exp1 .)
    DO              reduce using rule 62 (exp -> andexp exp1 .)


state 102

    (63) exp1 -> OR . exp
    (62) exp -> . andexp exp1
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71
    ID              shift and go to state 129

    exp                            shift and go to state 150
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 103

    (64) exp1 -> empty .

    READ            reduce using rule 64 (exp1 -> empty .)
    WRITE           reduce using rule 64 (exp1 -> empty .)
    RETURN          reduce using rule 64 (exp1 -> empty .)
    IF              reduce using rule 64 (exp1 -> empty .)
    WHILE           reduce using rule 64 (exp1 -> empty .)
    FOR             reduce using rule 64 (exp1 -> empty .)
    ID              reduce using rule 64 (exp1 -> empty .)
    LEFTPAR         reduce using rule 64 (exp1 -> empty .)
    CTEINT          reduce using rule 64 (exp1 -> empty .)
    CTEFLOAT        reduce using rule 64 (exp1 -> empty .)
    CTECHAR         reduce using rule 64 (exp1 -> empty .)
    RIGHTBR         reduce using rule 64 (exp1 -> empty .)
    RIGHTPAR        reduce using rule 64 (exp1 -> empty .)
    RIGHTSQR        reduce using rule 64 (exp1 -> empty .)
    COMMA           reduce using rule 64 (exp1 -> empty .)
    SEMICOLON       reduce using rule 64 (exp1 -> empty .)
    TO              reduce using rule 64 (exp1 -> empty .)
    DO              reduce using rule 64 (exp1 -> empty .)


state 104

    (65) andexp -> boolexp andexp1 .

    OR              reduce using rule 65 (andexp -> boolexp andexp1 .)
    READ            reduce using rule 65 (andexp -> boolexp andexp1 .)
    WRITE           reduce using rule 65 (andexp -> boolexp andexp1 .)
    RETURN          reduce using rule 65 (andexp -> boolexp andexp1 .)
    IF              reduce using rule 65 (andexp -> boolexp andexp1 .)
    WHILE           reduce using rule 65 (andexp -> boolexp andexp1 .)
    FOR             reduce using rule 65 (andexp -> boolexp andexp1 .)
    ID              reduce using rule 65 (andexp -> boolexp andexp1 .)
    LEFTPAR         reduce using rule 65 (andexp -> boolexp andexp1 .)
    CTEINT          reduce using rule 65 (andexp -> boolexp andexp1 .)
    CTEFLOAT        reduce using rule 65 (andexp -> boolexp andexp1 .)
    CTECHAR         reduce using rule 65 (andexp -> boolexp andexp1 .)
    RIGHTBR         reduce using rule 65 (andexp -> boolexp andexp1 .)
    RIGHTPAR        reduce using rule 65 (andexp -> boolexp andexp1 .)
    RIGHTSQR        reduce using rule 65 (andexp -> boolexp andexp1 .)
    COMMA           reduce using rule 65 (andexp -> boolexp andexp1 .)
    SEMICOLON       reduce using rule 65 (andexp -> boolexp andexp1 .)
    TO              reduce using rule 65 (andexp -> boolexp andexp1 .)
    DO              reduce using rule 65 (andexp -> boolexp andexp1 .)


state 105

    (66) andexp1 -> neuraland . andexp
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71
    ID              shift and go to state 129

    andexp                         shift and go to state 151
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 106

    (67) andexp1 -> empty .

    OR              reduce using rule 67 (andexp1 -> empty .)
    READ            reduce using rule 67 (andexp1 -> empty .)
    WRITE           reduce using rule 67 (andexp1 -> empty .)
    RETURN          reduce using rule 67 (andexp1 -> empty .)
    IF              reduce using rule 67 (andexp1 -> empty .)
    WHILE           reduce using rule 67 (andexp1 -> empty .)
    FOR             reduce using rule 67 (andexp1 -> empty .)
    ID              reduce using rule 67 (andexp1 -> empty .)
    LEFTPAR         reduce using rule 67 (andexp1 -> empty .)
    CTEINT          reduce using rule 67 (andexp1 -> empty .)
    CTEFLOAT        reduce using rule 67 (andexp1 -> empty .)
    CTECHAR         reduce using rule 67 (andexp1 -> empty .)
    RIGHTBR         reduce using rule 67 (andexp1 -> empty .)
    RIGHTPAR        reduce using rule 67 (andexp1 -> empty .)
    RIGHTSQR        reduce using rule 67 (andexp1 -> empty .)
    COMMA           reduce using rule 67 (andexp1 -> empty .)
    SEMICOLON       reduce using rule 67 (andexp1 -> empty .)
    TO              reduce using rule 67 (andexp1 -> empty .)
    DO              reduce using rule 67 (andexp1 -> empty .)


state 107

    (68) neuraland -> AND .

    LEFTPAR         reduce using rule 68 (neuraland -> AND .)
    CTEINT          reduce using rule 68 (neuraland -> AND .)
    CTEFLOAT        reduce using rule 68 (neuraland -> AND .)
    CTECHAR         reduce using rule 68 (neuraland -> AND .)
    ID              reduce using rule 68 (neuraland -> AND .)


state 108

    (69) boolexp -> arithexp boolexp1 .

    AND             reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    OR              reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    READ            reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    WRITE           reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    RETURN          reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    IF              reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    WHILE           reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    FOR             reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    ID              reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    LEFTPAR         reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    CTEINT          reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    CTEFLOAT        reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    CTECHAR         reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    RIGHTBR         reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    RIGHTPAR        reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    RIGHTSQR        reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    COMMA           reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    SEMICOLON       reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    TO              reduce using rule 69 (boolexp -> arithexp boolexp1 .)
    DO              reduce using rule 69 (boolexp -> arithexp boolexp1 .)


state 109

    (70) boolexp1 -> neuralbool . arithexp
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71
    ID              shift and go to state 129

    arithexp                       shift and go to state 152
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 110

    (71) boolexp1 -> empty .

    AND             reduce using rule 71 (boolexp1 -> empty .)
    OR              reduce using rule 71 (boolexp1 -> empty .)
    READ            reduce using rule 71 (boolexp1 -> empty .)
    WRITE           reduce using rule 71 (boolexp1 -> empty .)
    RETURN          reduce using rule 71 (boolexp1 -> empty .)
    IF              reduce using rule 71 (boolexp1 -> empty .)
    WHILE           reduce using rule 71 (boolexp1 -> empty .)
    FOR             reduce using rule 71 (boolexp1 -> empty .)
    ID              reduce using rule 71 (boolexp1 -> empty .)
    LEFTPAR         reduce using rule 71 (boolexp1 -> empty .)
    CTEINT          reduce using rule 71 (boolexp1 -> empty .)
    CTEFLOAT        reduce using rule 71 (boolexp1 -> empty .)
    CTECHAR         reduce using rule 71 (boolexp1 -> empty .)
    RIGHTBR         reduce using rule 71 (boolexp1 -> empty .)
    RIGHTPAR        reduce using rule 71 (boolexp1 -> empty .)
    RIGHTSQR        reduce using rule 71 (boolexp1 -> empty .)
    COMMA           reduce using rule 71 (boolexp1 -> empty .)
    SEMICOLON       reduce using rule 71 (boolexp1 -> empty .)
    TO              reduce using rule 71 (boolexp1 -> empty .)
    DO              reduce using rule 71 (boolexp1 -> empty .)


state 111

    (72) neuralbool -> GREATER .

    LEFTPAR         reduce using rule 72 (neuralbool -> GREATER .)
    CTEINT          reduce using rule 72 (neuralbool -> GREATER .)
    CTEFLOAT        reduce using rule 72 (neuralbool -> GREATER .)
    CTECHAR         reduce using rule 72 (neuralbool -> GREATER .)
    ID              reduce using rule 72 (neuralbool -> GREATER .)


state 112

    (73) neuralbool -> GREATERAND .

    LEFTPAR         reduce using rule 73 (neuralbool -> GREATERAND .)
    CTEINT          reduce using rule 73 (neuralbool -> GREATERAND .)
    CTEFLOAT        reduce using rule 73 (neuralbool -> GREATERAND .)
    CTECHAR         reduce using rule 73 (neuralbool -> GREATERAND .)
    ID              reduce using rule 73 (neuralbool -> GREATERAND .)


state 113

    (74) neuralbool -> LESSER .

    LEFTPAR         reduce using rule 74 (neuralbool -> LESSER .)
    CTEINT          reduce using rule 74 (neuralbool -> LESSER .)
    CTEFLOAT        reduce using rule 74 (neuralbool -> LESSER .)
    CTECHAR         reduce using rule 74 (neuralbool -> LESSER .)
    ID              reduce using rule 74 (neuralbool -> LESSER .)


state 114

    (75) neuralbool -> LESSERAND .

    LEFTPAR         reduce using rule 75 (neuralbool -> LESSERAND .)
    CTEINT          reduce using rule 75 (neuralbool -> LESSERAND .)
    CTEFLOAT        reduce using rule 75 (neuralbool -> LESSERAND .)
    CTECHAR         reduce using rule 75 (neuralbool -> LESSERAND .)
    ID              reduce using rule 75 (neuralbool -> LESSERAND .)


state 115

    (76) neuralbool -> SAME .

    LEFTPAR         reduce using rule 76 (neuralbool -> SAME .)
    CTEINT          reduce using rule 76 (neuralbool -> SAME .)
    CTEFLOAT        reduce using rule 76 (neuralbool -> SAME .)
    CTECHAR         reduce using rule 76 (neuralbool -> SAME .)
    ID              reduce using rule 76 (neuralbool -> SAME .)


state 116

    (77) neuralbool -> NOTSAME .

    LEFTPAR         reduce using rule 77 (neuralbool -> NOTSAME .)
    CTEINT          reduce using rule 77 (neuralbool -> NOTSAME .)
    CTEFLOAT        reduce using rule 77 (neuralbool -> NOTSAME .)
    CTECHAR         reduce using rule 77 (neuralbool -> NOTSAME .)
    ID              reduce using rule 77 (neuralbool -> NOTSAME .)


state 117

    (78) neuralbool -> NOT .

    LEFTPAR         reduce using rule 78 (neuralbool -> NOT .)
    CTEINT          reduce using rule 78 (neuralbool -> NOT .)
    CTEFLOAT        reduce using rule 78 (neuralbool -> NOT .)
    CTECHAR         reduce using rule 78 (neuralbool -> NOT .)
    ID              reduce using rule 78 (neuralbool -> NOT .)


state 118

    (79) arithexp -> geoexp arithexp1 .

    GREATER         reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    GREATERAND      reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    LESSER          reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    LESSERAND       reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    SAME            reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    NOTSAME         reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    NOT             reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    AND             reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    OR              reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    READ            reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    WRITE           reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    RETURN          reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    IF              reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    WHILE           reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    FOR             reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    ID              reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    LEFTPAR         reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    CTEINT          reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    CTEFLOAT        reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    CTECHAR         reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    RIGHTBR         reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    RIGHTPAR        reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    RIGHTSQR        reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    COMMA           reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    SEMICOLON       reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    TO              reduce using rule 79 (arithexp -> geoexp arithexp1 .)
    DO              reduce using rule 79 (arithexp -> geoexp arithexp1 .)


state 119

    (80) arithexp1 -> neuralarith . arithexp
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71
    ID              shift and go to state 129

    arithexp                       shift and go to state 153
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 120

    (81) arithexp1 -> empty .

    GREATER         reduce using rule 81 (arithexp1 -> empty .)
    GREATERAND      reduce using rule 81 (arithexp1 -> empty .)
    LESSER          reduce using rule 81 (arithexp1 -> empty .)
    LESSERAND       reduce using rule 81 (arithexp1 -> empty .)
    SAME            reduce using rule 81 (arithexp1 -> empty .)
    NOTSAME         reduce using rule 81 (arithexp1 -> empty .)
    NOT             reduce using rule 81 (arithexp1 -> empty .)
    AND             reduce using rule 81 (arithexp1 -> empty .)
    OR              reduce using rule 81 (arithexp1 -> empty .)
    READ            reduce using rule 81 (arithexp1 -> empty .)
    WRITE           reduce using rule 81 (arithexp1 -> empty .)
    RETURN          reduce using rule 81 (arithexp1 -> empty .)
    IF              reduce using rule 81 (arithexp1 -> empty .)
    WHILE           reduce using rule 81 (arithexp1 -> empty .)
    FOR             reduce using rule 81 (arithexp1 -> empty .)
    ID              reduce using rule 81 (arithexp1 -> empty .)
    LEFTPAR         reduce using rule 81 (arithexp1 -> empty .)
    CTEINT          reduce using rule 81 (arithexp1 -> empty .)
    CTEFLOAT        reduce using rule 81 (arithexp1 -> empty .)
    CTECHAR         reduce using rule 81 (arithexp1 -> empty .)
    RIGHTBR         reduce using rule 81 (arithexp1 -> empty .)
    RIGHTPAR        reduce using rule 81 (arithexp1 -> empty .)
    RIGHTSQR        reduce using rule 81 (arithexp1 -> empty .)
    COMMA           reduce using rule 81 (arithexp1 -> empty .)
    SEMICOLON       reduce using rule 81 (arithexp1 -> empty .)
    TO              reduce using rule 81 (arithexp1 -> empty .)
    DO              reduce using rule 81 (arithexp1 -> empty .)


state 121

    (82) neuralarith -> PLUS .

    LEFTPAR         reduce using rule 82 (neuralarith -> PLUS .)
    CTEINT          reduce using rule 82 (neuralarith -> PLUS .)
    CTEFLOAT        reduce using rule 82 (neuralarith -> PLUS .)
    CTECHAR         reduce using rule 82 (neuralarith -> PLUS .)
    ID              reduce using rule 82 (neuralarith -> PLUS .)


state 122

    (83) neuralarith -> REST .

    LEFTPAR         reduce using rule 83 (neuralarith -> REST .)
    CTEINT          reduce using rule 83 (neuralarith -> REST .)
    CTEFLOAT        reduce using rule 83 (neuralarith -> REST .)
    CTECHAR         reduce using rule 83 (neuralarith -> REST .)
    ID              reduce using rule 83 (neuralarith -> REST .)


state 123

    (84) geoexp -> finexp geoexp1 .

    PLUS            reduce using rule 84 (geoexp -> finexp geoexp1 .)
    REST            reduce using rule 84 (geoexp -> finexp geoexp1 .)
    GREATER         reduce using rule 84 (geoexp -> finexp geoexp1 .)
    GREATERAND      reduce using rule 84 (geoexp -> finexp geoexp1 .)
    LESSER          reduce using rule 84 (geoexp -> finexp geoexp1 .)
    LESSERAND       reduce using rule 84 (geoexp -> finexp geoexp1 .)
    SAME            reduce using rule 84 (geoexp -> finexp geoexp1 .)
    NOTSAME         reduce using rule 84 (geoexp -> finexp geoexp1 .)
    NOT             reduce using rule 84 (geoexp -> finexp geoexp1 .)
    AND             reduce using rule 84 (geoexp -> finexp geoexp1 .)
    OR              reduce using rule 84 (geoexp -> finexp geoexp1 .)
    READ            reduce using rule 84 (geoexp -> finexp geoexp1 .)
    WRITE           reduce using rule 84 (geoexp -> finexp geoexp1 .)
    RETURN          reduce using rule 84 (geoexp -> finexp geoexp1 .)
    IF              reduce using rule 84 (geoexp -> finexp geoexp1 .)
    WHILE           reduce using rule 84 (geoexp -> finexp geoexp1 .)
    FOR             reduce using rule 84 (geoexp -> finexp geoexp1 .)
    ID              reduce using rule 84 (geoexp -> finexp geoexp1 .)
    LEFTPAR         reduce using rule 84 (geoexp -> finexp geoexp1 .)
    CTEINT          reduce using rule 84 (geoexp -> finexp geoexp1 .)
    CTEFLOAT        reduce using rule 84 (geoexp -> finexp geoexp1 .)
    CTECHAR         reduce using rule 84 (geoexp -> finexp geoexp1 .)
    RIGHTBR         reduce using rule 84 (geoexp -> finexp geoexp1 .)
    RIGHTPAR        reduce using rule 84 (geoexp -> finexp geoexp1 .)
    RIGHTSQR        reduce using rule 84 (geoexp -> finexp geoexp1 .)
    COMMA           reduce using rule 84 (geoexp -> finexp geoexp1 .)
    SEMICOLON       reduce using rule 84 (geoexp -> finexp geoexp1 .)
    TO              reduce using rule 84 (geoexp -> finexp geoexp1 .)
    DO              reduce using rule 84 (geoexp -> finexp geoexp1 .)


state 124

    (85) geoexp1 -> neuralgeo . geoexp
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71
    ID              shift and go to state 129

    geoexp                         shift and go to state 154
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 125

    (86) geoexp1 -> empty .

    PLUS            reduce using rule 86 (geoexp1 -> empty .)
    REST            reduce using rule 86 (geoexp1 -> empty .)
    GREATER         reduce using rule 86 (geoexp1 -> empty .)
    GREATERAND      reduce using rule 86 (geoexp1 -> empty .)
    LESSER          reduce using rule 86 (geoexp1 -> empty .)
    LESSERAND       reduce using rule 86 (geoexp1 -> empty .)
    SAME            reduce using rule 86 (geoexp1 -> empty .)
    NOTSAME         reduce using rule 86 (geoexp1 -> empty .)
    NOT             reduce using rule 86 (geoexp1 -> empty .)
    AND             reduce using rule 86 (geoexp1 -> empty .)
    OR              reduce using rule 86 (geoexp1 -> empty .)
    READ            reduce using rule 86 (geoexp1 -> empty .)
    WRITE           reduce using rule 86 (geoexp1 -> empty .)
    RETURN          reduce using rule 86 (geoexp1 -> empty .)
    IF              reduce using rule 86 (geoexp1 -> empty .)
    WHILE           reduce using rule 86 (geoexp1 -> empty .)
    FOR             reduce using rule 86 (geoexp1 -> empty .)
    ID              reduce using rule 86 (geoexp1 -> empty .)
    LEFTPAR         reduce using rule 86 (geoexp1 -> empty .)
    CTEINT          reduce using rule 86 (geoexp1 -> empty .)
    CTEFLOAT        reduce using rule 86 (geoexp1 -> empty .)
    CTECHAR         reduce using rule 86 (geoexp1 -> empty .)
    RIGHTBR         reduce using rule 86 (geoexp1 -> empty .)
    RIGHTPAR        reduce using rule 86 (geoexp1 -> empty .)
    RIGHTSQR        reduce using rule 86 (geoexp1 -> empty .)
    COMMA           reduce using rule 86 (geoexp1 -> empty .)
    SEMICOLON       reduce using rule 86 (geoexp1 -> empty .)
    TO              reduce using rule 86 (geoexp1 -> empty .)
    DO              reduce using rule 86 (geoexp1 -> empty .)


state 126

    (87) neuralgeo -> TIMES .

    LEFTPAR         reduce using rule 87 (neuralgeo -> TIMES .)
    CTEINT          reduce using rule 87 (neuralgeo -> TIMES .)
    CTEFLOAT        reduce using rule 87 (neuralgeo -> TIMES .)
    CTECHAR         reduce using rule 87 (neuralgeo -> TIMES .)
    ID              reduce using rule 87 (neuralgeo -> TIMES .)


state 127

    (88) neuralgeo -> DIVIDE .

    LEFTPAR         reduce using rule 88 (neuralgeo -> DIVIDE .)
    CTEINT          reduce using rule 88 (neuralgeo -> DIVIDE .)
    CTEFLOAT        reduce using rule 88 (neuralgeo -> DIVIDE .)
    CTECHAR         reduce using rule 88 (neuralgeo -> DIVIDE .)
    ID              reduce using rule 88 (neuralgeo -> DIVIDE .)


state 128

    (91) finexp -> addparenth exp . popparenth
    (90) popparenth -> . RIGHTPAR

    RIGHTPAR        shift and go to state 156

    popparenth                     shift and go to state 155

state 129

    (96) cteexp -> ID . paramsexp
    (97) paramsexp -> . LEFTPAR paramsexp2 RIGHTPAR
    (98) paramsexp -> . idarray
    (60) idarray -> . LEFTSQR exp RIGHTSQR
    (61) idarray -> . empty
    (103) empty -> .

  ! shift/reduce conflict for LEFTPAR resolved as shift
    LEFTPAR         shift and go to state 99
    LEFTSQR         shift and go to state 90
    TIMES           reduce using rule 103 (empty -> .)
    DIVIDE          reduce using rule 103 (empty -> .)
    PLUS            reduce using rule 103 (empty -> .)
    REST            reduce using rule 103 (empty -> .)
    GREATER         reduce using rule 103 (empty -> .)
    GREATERAND      reduce using rule 103 (empty -> .)
    LESSER          reduce using rule 103 (empty -> .)
    LESSERAND       reduce using rule 103 (empty -> .)
    SAME            reduce using rule 103 (empty -> .)
    NOTSAME         reduce using rule 103 (empty -> .)
    NOT             reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    RIGHTPAR        reduce using rule 103 (empty -> .)
    RIGHTSQR        reduce using rule 103 (empty -> .)
    COMMA           reduce using rule 103 (empty -> .)
    READ            reduce using rule 103 (empty -> .)
    WRITE           reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    CTEINT          reduce using rule 103 (empty -> .)
    CTEFLOAT        reduce using rule 103 (empty -> .)
    CTECHAR         reduce using rule 103 (empty -> .)
    RIGHTBR         reduce using rule 103 (empty -> .)
    SEMICOLON       reduce using rule 103 (empty -> .)
    TO              reduce using rule 103 (empty -> .)
    DO              reduce using rule 103 (empty -> .)

  ! LEFTPAR         [ reduce using rule 103 (empty -> .) ]

    paramsexp                      shift and go to state 98
    idarray                        shift and go to state 100
    empty                          shift and go to state 91

state 130

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON . varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules
    (3) varsgl -> . VARS vars
    (4) varsgl -> . empty
    (103) empty -> .

    VARS            shift and go to state 7
    LEFTBR          reduce using rule 103 (empty -> .)

    varsgl                         shift and go to state 157
    empty                          shift and go to state 8

state 131

    (22) parameters -> typing COLON ID . idarray mulparams
    (60) idarray -> . LEFTSQR exp RIGHTSQR
    (61) idarray -> . empty
    (103) empty -> .

    LEFTSQR         shift and go to state 90
    COMMA           reduce using rule 103 (empty -> .)
    RIGHTPAR        reduce using rule 103 (empty -> .)

    idarray                        shift and go to state 158
    empty                          shift and go to state 91

state 132

    (10) varsmul -> COMMA neuralinsertvar varsarr . varsmul
    (10) varsmul -> . COMMA neuralinsertvar varsarr varsmul
    (11) varsmul -> . SEMICOLON

    COMMA           shift and go to state 39
    SEMICOLON       shift and go to state 40

    varsmul                        shift and go to state 159

state 133

    (38) assign -> neuralassign1 idarray neuralassign2 . exp SEMICOLON
    (62) exp -> . andexp exp1
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71
    ID              shift and go to state 129

    exp                            shift and go to state 160
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 134

    (40) neuralassign2 -> EQUAL .

    LEFTPAR         reduce using rule 40 (neuralassign2 -> EQUAL .)
    CTEINT          reduce using rule 40 (neuralassign2 -> EQUAL .)
    CTEFLOAT        reduce using rule 40 (neuralassign2 -> EQUAL .)
    CTECHAR         reduce using rule 40 (neuralassign2 -> EQUAL .)
    ID              reduce using rule 40 (neuralassign2 -> EQUAL .)


state 135

    (60) idarray -> LEFTSQR exp . RIGHTSQR

    RIGHTSQR        shift and go to state 161


state 136

    (48) reading -> READ LEFTPAR neuralread . idarray mulread RIGHTPAR SEMICOLON
    (60) idarray -> . LEFTSQR exp RIGHTSQR
    (61) idarray -> . empty
    (103) empty -> .

    LEFTSQR         shift and go to state 90
    COMMA           reduce using rule 103 (empty -> .)
    RIGHTPAR        reduce using rule 103 (empty -> .)

    idarray                        shift and go to state 162
    empty                          shift and go to state 91

state 137

    (49) neuralread -> ID .

    LEFTSQR         reduce using rule 49 (neuralread -> ID .)
    COMMA           reduce using rule 49 (neuralread -> ID .)
    RIGHTPAR        reduce using rule 49 (neuralread -> ID .)


state 138

    (41) writing -> WRITE LEFTPAR auxwrite . mulwrite RIGHTPAR SEMICOLON
    (46) mulwrite -> . COMMA auxwrite mulwrite
    (47) mulwrite -> . empty
    (103) empty -> .

    COMMA           shift and go to state 164
    RIGHTPAR        reduce using rule 103 (empty -> .)

    mulwrite                       shift and go to state 163
    empty                          shift and go to state 165

state 139

    (42) auxwrite -> writetyping .

    COMMA           reduce using rule 42 (auxwrite -> writetyping .)
    RIGHTPAR        reduce using rule 42 (auxwrite -> writetyping .)


state 140

    (43) auxwrite -> exp .

    COMMA           reduce using rule 43 (auxwrite -> exp .)
    RIGHTPAR        reduce using rule 43 (auxwrite -> exp .)


state 141

    (44) writetyping -> STRING .

    COMMA           reduce using rule 44 (writetyping -> STRING .)
    RIGHTPAR        reduce using rule 44 (writetyping -> STRING .)


state 142

    (45) writetyping -> CTECHAR .
    (95) cteexp -> CTECHAR .

  ! reduce/reduce conflict for COMMA resolved using rule 45 (writetyping -> CTECHAR .)
  ! reduce/reduce conflict for RIGHTPAR resolved using rule 45 (writetyping -> CTECHAR .)
    COMMA           reduce using rule 45 (writetyping -> CTECHAR .)
    RIGHTPAR        reduce using rule 45 (writetyping -> CTECHAR .)
    TIMES           reduce using rule 95 (cteexp -> CTECHAR .)
    DIVIDE          reduce using rule 95 (cteexp -> CTECHAR .)
    PLUS            reduce using rule 95 (cteexp -> CTECHAR .)
    REST            reduce using rule 95 (cteexp -> CTECHAR .)
    GREATER         reduce using rule 95 (cteexp -> CTECHAR .)
    GREATERAND      reduce using rule 95 (cteexp -> CTECHAR .)
    LESSER          reduce using rule 95 (cteexp -> CTECHAR .)
    LESSERAND       reduce using rule 95 (cteexp -> CTECHAR .)
    SAME            reduce using rule 95 (cteexp -> CTECHAR .)
    NOTSAME         reduce using rule 95 (cteexp -> CTECHAR .)
    NOT             reduce using rule 95 (cteexp -> CTECHAR .)
    AND             reduce using rule 95 (cteexp -> CTECHAR .)
    OR              reduce using rule 95 (cteexp -> CTECHAR .)

  ! COMMA           [ reduce using rule 95 (cteexp -> CTECHAR .) ]
  ! RIGHTPAR        [ reduce using rule 95 (cteexp -> CTECHAR .) ]


state 143

    (52) returning -> RETURN LEFTPAR exp . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 166


state 144

    (53) ifing -> IF LEFTPAR exp . neuralif THEN LEFTBR statutes RIGHTBR elsing
    (54) neuralif -> . RIGHTPAR

    RIGHTPAR        shift and go to state 168

    neuralif                       shift and go to state 167

state 145

    (58) whiling -> WHILE LEFTPAR exp . RIGHTPAR DO LEFTBR statutes RIGHTBR

    RIGHTPAR        shift and go to state 169


state 146

    (59) foring -> FOR ID idarray . EQUAL exp TO exp DO LEFTBR statutes RIGHTBR

    EQUAL           shift and go to state 170


state 147

    (97) paramsexp -> LEFTPAR paramsexp2 . RIGHTPAR

    RIGHTPAR        shift and go to state 171


state 148

    (99) paramsexp2 -> exp . auxparamsexp2
    (101) auxparamsexp2 -> . COMMA exp auxparamsexp2
    (102) auxparamsexp2 -> . empty
    (103) empty -> .

    COMMA           shift and go to state 173
    RIGHTPAR        reduce using rule 103 (empty -> .)

    auxparamsexp2                  shift and go to state 172
    empty                          shift and go to state 174

state 149

    (100) paramsexp2 -> empty .

    RIGHTPAR        reduce using rule 100 (paramsexp2 -> empty .)


state 150

    (63) exp1 -> OR exp .

    READ            reduce using rule 63 (exp1 -> OR exp .)
    WRITE           reduce using rule 63 (exp1 -> OR exp .)
    RETURN          reduce using rule 63 (exp1 -> OR exp .)
    IF              reduce using rule 63 (exp1 -> OR exp .)
    WHILE           reduce using rule 63 (exp1 -> OR exp .)
    FOR             reduce using rule 63 (exp1 -> OR exp .)
    ID              reduce using rule 63 (exp1 -> OR exp .)
    LEFTPAR         reduce using rule 63 (exp1 -> OR exp .)
    CTEINT          reduce using rule 63 (exp1 -> OR exp .)
    CTEFLOAT        reduce using rule 63 (exp1 -> OR exp .)
    CTECHAR         reduce using rule 63 (exp1 -> OR exp .)
    RIGHTBR         reduce using rule 63 (exp1 -> OR exp .)
    RIGHTPAR        reduce using rule 63 (exp1 -> OR exp .)
    RIGHTSQR        reduce using rule 63 (exp1 -> OR exp .)
    COMMA           reduce using rule 63 (exp1 -> OR exp .)
    SEMICOLON       reduce using rule 63 (exp1 -> OR exp .)
    TO              reduce using rule 63 (exp1 -> OR exp .)
    DO              reduce using rule 63 (exp1 -> OR exp .)


state 151

    (66) andexp1 -> neuraland andexp .

    OR              reduce using rule 66 (andexp1 -> neuraland andexp .)
    READ            reduce using rule 66 (andexp1 -> neuraland andexp .)
    WRITE           reduce using rule 66 (andexp1 -> neuraland andexp .)
    RETURN          reduce using rule 66 (andexp1 -> neuraland andexp .)
    IF              reduce using rule 66 (andexp1 -> neuraland andexp .)
    WHILE           reduce using rule 66 (andexp1 -> neuraland andexp .)
    FOR             reduce using rule 66 (andexp1 -> neuraland andexp .)
    ID              reduce using rule 66 (andexp1 -> neuraland andexp .)
    LEFTPAR         reduce using rule 66 (andexp1 -> neuraland andexp .)
    CTEINT          reduce using rule 66 (andexp1 -> neuraland andexp .)
    CTEFLOAT        reduce using rule 66 (andexp1 -> neuraland andexp .)
    CTECHAR         reduce using rule 66 (andexp1 -> neuraland andexp .)
    RIGHTBR         reduce using rule 66 (andexp1 -> neuraland andexp .)
    RIGHTPAR        reduce using rule 66 (andexp1 -> neuraland andexp .)
    RIGHTSQR        reduce using rule 66 (andexp1 -> neuraland andexp .)
    COMMA           reduce using rule 66 (andexp1 -> neuraland andexp .)
    SEMICOLON       reduce using rule 66 (andexp1 -> neuraland andexp .)
    TO              reduce using rule 66 (andexp1 -> neuraland andexp .)
    DO              reduce using rule 66 (andexp1 -> neuraland andexp .)


state 152

    (70) boolexp1 -> neuralbool arithexp .

    AND             reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    OR              reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    READ            reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    WRITE           reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    RETURN          reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    IF              reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    WHILE           reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    FOR             reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    ID              reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    LEFTPAR         reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    CTEINT          reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    CTEFLOAT        reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    CTECHAR         reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    RIGHTBR         reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    RIGHTPAR        reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    RIGHTSQR        reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    COMMA           reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    SEMICOLON       reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    TO              reduce using rule 70 (boolexp1 -> neuralbool arithexp .)
    DO              reduce using rule 70 (boolexp1 -> neuralbool arithexp .)


state 153

    (80) arithexp1 -> neuralarith arithexp .

    GREATER         reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    GREATERAND      reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    LESSER          reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    LESSERAND       reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    SAME            reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    NOTSAME         reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    NOT             reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    AND             reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    OR              reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    READ            reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    WRITE           reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    RETURN          reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    IF              reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    WHILE           reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    FOR             reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    ID              reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    LEFTPAR         reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    CTEINT          reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    CTEFLOAT        reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    CTECHAR         reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    RIGHTBR         reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    RIGHTPAR        reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    RIGHTSQR        reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    COMMA           reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    SEMICOLON       reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    TO              reduce using rule 80 (arithexp1 -> neuralarith arithexp .)
    DO              reduce using rule 80 (arithexp1 -> neuralarith arithexp .)


state 154

    (85) geoexp1 -> neuralgeo geoexp .

    PLUS            reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    REST            reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    GREATER         reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    GREATERAND      reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    LESSER          reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    LESSERAND       reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    SAME            reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    NOTSAME         reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    NOT             reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    AND             reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    OR              reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    READ            reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    WRITE           reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    RETURN          reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    IF              reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    WHILE           reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    FOR             reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    ID              reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    LEFTPAR         reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    CTEINT          reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    CTEFLOAT        reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    CTECHAR         reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    RIGHTBR         reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    RIGHTPAR        reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    RIGHTSQR        reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    COMMA           reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    SEMICOLON       reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    TO              reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)
    DO              reduce using rule 85 (geoexp1 -> neuralgeo geoexp .)


state 155

    (91) finexp -> addparenth exp popparenth .

    TIMES           reduce using rule 91 (finexp -> addparenth exp popparenth .)
    DIVIDE          reduce using rule 91 (finexp -> addparenth exp popparenth .)
    PLUS            reduce using rule 91 (finexp -> addparenth exp popparenth .)
    REST            reduce using rule 91 (finexp -> addparenth exp popparenth .)
    GREATER         reduce using rule 91 (finexp -> addparenth exp popparenth .)
    GREATERAND      reduce using rule 91 (finexp -> addparenth exp popparenth .)
    LESSER          reduce using rule 91 (finexp -> addparenth exp popparenth .)
    LESSERAND       reduce using rule 91 (finexp -> addparenth exp popparenth .)
    SAME            reduce using rule 91 (finexp -> addparenth exp popparenth .)
    NOTSAME         reduce using rule 91 (finexp -> addparenth exp popparenth .)
    NOT             reduce using rule 91 (finexp -> addparenth exp popparenth .)
    AND             reduce using rule 91 (finexp -> addparenth exp popparenth .)
    OR              reduce using rule 91 (finexp -> addparenth exp popparenth .)
    READ            reduce using rule 91 (finexp -> addparenth exp popparenth .)
    WRITE           reduce using rule 91 (finexp -> addparenth exp popparenth .)
    RETURN          reduce using rule 91 (finexp -> addparenth exp popparenth .)
    IF              reduce using rule 91 (finexp -> addparenth exp popparenth .)
    WHILE           reduce using rule 91 (finexp -> addparenth exp popparenth .)
    FOR             reduce using rule 91 (finexp -> addparenth exp popparenth .)
    ID              reduce using rule 91 (finexp -> addparenth exp popparenth .)
    LEFTPAR         reduce using rule 91 (finexp -> addparenth exp popparenth .)
    CTEINT          reduce using rule 91 (finexp -> addparenth exp popparenth .)
    CTEFLOAT        reduce using rule 91 (finexp -> addparenth exp popparenth .)
    CTECHAR         reduce using rule 91 (finexp -> addparenth exp popparenth .)
    RIGHTBR         reduce using rule 91 (finexp -> addparenth exp popparenth .)
    RIGHTPAR        reduce using rule 91 (finexp -> addparenth exp popparenth .)
    RIGHTSQR        reduce using rule 91 (finexp -> addparenth exp popparenth .)
    COMMA           reduce using rule 91 (finexp -> addparenth exp popparenth .)
    SEMICOLON       reduce using rule 91 (finexp -> addparenth exp popparenth .)
    TO              reduce using rule 91 (finexp -> addparenth exp popparenth .)
    DO              reduce using rule 91 (finexp -> addparenth exp popparenth .)


state 156

    (90) popparenth -> RIGHTPAR .

    TIMES           reduce using rule 90 (popparenth -> RIGHTPAR .)
    DIVIDE          reduce using rule 90 (popparenth -> RIGHTPAR .)
    PLUS            reduce using rule 90 (popparenth -> RIGHTPAR .)
    REST            reduce using rule 90 (popparenth -> RIGHTPAR .)
    GREATER         reduce using rule 90 (popparenth -> RIGHTPAR .)
    GREATERAND      reduce using rule 90 (popparenth -> RIGHTPAR .)
    LESSER          reduce using rule 90 (popparenth -> RIGHTPAR .)
    LESSERAND       reduce using rule 90 (popparenth -> RIGHTPAR .)
    SAME            reduce using rule 90 (popparenth -> RIGHTPAR .)
    NOTSAME         reduce using rule 90 (popparenth -> RIGHTPAR .)
    NOT             reduce using rule 90 (popparenth -> RIGHTPAR .)
    AND             reduce using rule 90 (popparenth -> RIGHTPAR .)
    OR              reduce using rule 90 (popparenth -> RIGHTPAR .)
    READ            reduce using rule 90 (popparenth -> RIGHTPAR .)
    WRITE           reduce using rule 90 (popparenth -> RIGHTPAR .)
    RETURN          reduce using rule 90 (popparenth -> RIGHTPAR .)
    IF              reduce using rule 90 (popparenth -> RIGHTPAR .)
    WHILE           reduce using rule 90 (popparenth -> RIGHTPAR .)
    FOR             reduce using rule 90 (popparenth -> RIGHTPAR .)
    ID              reduce using rule 90 (popparenth -> RIGHTPAR .)
    LEFTPAR         reduce using rule 90 (popparenth -> RIGHTPAR .)
    CTEINT          reduce using rule 90 (popparenth -> RIGHTPAR .)
    CTEFLOAT        reduce using rule 90 (popparenth -> RIGHTPAR .)
    CTECHAR         reduce using rule 90 (popparenth -> RIGHTPAR .)
    RIGHTBR         reduce using rule 90 (popparenth -> RIGHTPAR .)
    RIGHTPAR        reduce using rule 90 (popparenth -> RIGHTPAR .)
    RIGHTSQR        reduce using rule 90 (popparenth -> RIGHTPAR .)
    COMMA           reduce using rule 90 (popparenth -> RIGHTPAR .)
    SEMICOLON       reduce using rule 90 (popparenth -> RIGHTPAR .)
    TO              reduce using rule 90 (popparenth -> RIGHTPAR .)
    DO              reduce using rule 90 (popparenth -> RIGHTPAR .)


state 157

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl . LEFTBR statutes RIGHTBR neuralendfuncs modules

    LEFTBR          shift and go to state 175


state 158

    (22) parameters -> typing COLON ID idarray . mulparams
    (24) mulparams -> . COMMA parameters
    (25) mulparams -> . empty
    (103) empty -> .

    COMMA           shift and go to state 177
    RIGHTPAR        reduce using rule 103 (empty -> .)

    mulparams                      shift and go to state 176
    empty                          shift and go to state 178

state 159

    (10) varsmul -> COMMA neuralinsertvar varsarr varsmul .

    INT             reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)
    FLOAT           reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)
    CHAR            reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)
    FUNCTION        reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)
    MAIN            reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)
    LEFTBR          reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)


state 160

    (38) assign -> neuralassign1 idarray neuralassign2 exp . SEMICOLON

    SEMICOLON       shift and go to state 179


state 161

    (60) idarray -> LEFTSQR exp RIGHTSQR .

    EQUAL           reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    TIMES           reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    DIVIDE          reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    PLUS            reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    REST            reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    GREATER         reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    GREATERAND      reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    LESSER          reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    LESSERAND       reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    SAME            reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    NOTSAME         reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    NOT             reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    AND             reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    OR              reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    READ            reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    WRITE           reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    RETURN          reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    IF              reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    WHILE           reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    FOR             reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    ID              reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    LEFTPAR         reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    CTEINT          reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    CTEFLOAT        reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    CTECHAR         reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    RIGHTBR         reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    RIGHTPAR        reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    RIGHTSQR        reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    COMMA           reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    SEMICOLON       reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    TO              reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)
    DO              reduce using rule 60 (idarray -> LEFTSQR exp RIGHTSQR .)


state 162

    (48) reading -> READ LEFTPAR neuralread idarray . mulread RIGHTPAR SEMICOLON
    (50) mulread -> . COMMA ID idarray mulread
    (51) mulread -> . empty
    (103) empty -> .

    COMMA           shift and go to state 181
    RIGHTPAR        reduce using rule 103 (empty -> .)

    mulread                        shift and go to state 180
    empty                          shift and go to state 182

state 163

    (41) writing -> WRITE LEFTPAR auxwrite mulwrite . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 183


state 164

    (46) mulwrite -> COMMA . auxwrite mulwrite
    (42) auxwrite -> . writetyping
    (43) auxwrite -> . exp
    (44) writetyping -> . STRING
    (45) writetyping -> . CTECHAR
    (62) exp -> . andexp exp1
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

    STRING          shift and go to state 141
    CTECHAR         shift and go to state 142
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    ID              shift and go to state 129

    auxwrite                       shift and go to state 184
    writetyping                    shift and go to state 139
    exp                            shift and go to state 140
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 165

    (47) mulwrite -> empty .

    RIGHTPAR        reduce using rule 47 (mulwrite -> empty .)


state 166

    (52) returning -> RETURN LEFTPAR exp RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 185


state 167

    (53) ifing -> IF LEFTPAR exp neuralif . THEN LEFTBR statutes RIGHTBR elsing

    THEN            shift and go to state 186


state 168

    (54) neuralif -> RIGHTPAR .

    THEN            reduce using rule 54 (neuralif -> RIGHTPAR .)


state 169

    (58) whiling -> WHILE LEFTPAR exp RIGHTPAR . DO LEFTBR statutes RIGHTBR

    DO              shift and go to state 187


state 170

    (59) foring -> FOR ID idarray EQUAL . exp TO exp DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71
    ID              shift and go to state 129

    exp                            shift and go to state 188
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 171

    (97) paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .

    TIMES           reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    DIVIDE          reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    PLUS            reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    REST            reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    GREATER         reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    GREATERAND      reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    LESSER          reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    LESSERAND       reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    SAME            reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    NOTSAME         reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    NOT             reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    AND             reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    OR              reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    READ            reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    WRITE           reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    RETURN          reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    IF              reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    WHILE           reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    FOR             reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    ID              reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    LEFTPAR         reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    CTEINT          reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    CTEFLOAT        reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    CTECHAR         reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    RIGHTBR         reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    RIGHTPAR        reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    RIGHTSQR        reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    COMMA           reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    SEMICOLON       reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    TO              reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    DO              reduce using rule 97 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)


state 172

    (99) paramsexp2 -> exp auxparamsexp2 .

    RIGHTPAR        reduce using rule 99 (paramsexp2 -> exp auxparamsexp2 .)


state 173

    (101) auxparamsexp2 -> COMMA . exp auxparamsexp2
    (62) exp -> . andexp exp1
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71
    ID              shift and go to state 129

    exp                            shift and go to state 189
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 174

    (102) auxparamsexp2 -> empty .

    RIGHTPAR        reduce using rule 102 (auxparamsexp2 -> empty .)


state 175

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR . statutes RIGHTBR neuralendfuncs modules
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . neuralassign1 idarray neuralassign2 exp SEMICOLON
    (48) reading -> . READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON
    (41) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (52) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (53) ifing -> . IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing
    (58) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (59) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (39) neuralassign1 -> . ID
    (65) andexp -> . boolexp andexp1
    (103) empty -> .
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    ID              shift and go to state 60
    RIGHTBR         reduce using rule 103 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71

  ! READ            [ reduce using rule 103 (empty -> .) ]
  ! WRITE           [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 103 (empty -> .) ]
  ! CTEINT          [ reduce using rule 103 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 103 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 103 (empty -> .) ]

    statutes                       shift and go to state 190
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    neuralassign1                  shift and go to state 53
    andexp                         shift and go to state 61
    empty                          shift and go to state 62
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 176

    (22) parameters -> typing COLON ID idarray mulparams .

    RIGHTPAR        reduce using rule 22 (parameters -> typing COLON ID idarray mulparams .)


state 177

    (24) mulparams -> COMMA . parameters
    (22) parameters -> . typing COLON ID idarray mulparams
    (23) parameters -> . empty
    (19) typing -> . INT
    (20) typing -> . FLOAT
    (21) typing -> . CHAR
    (103) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    RIGHTPAR        reduce using rule 103 (empty -> .)

    parameters                     shift and go to state 191
    typing                         shift and go to state 36
    empty                          shift and go to state 37

state 178

    (25) mulparams -> empty .

    RIGHTPAR        reduce using rule 25 (mulparams -> empty .)


state 179

    (38) assign -> neuralassign1 idarray neuralassign2 exp SEMICOLON .

    READ            reduce using rule 38 (assign -> neuralassign1 idarray neuralassign2 exp SEMICOLON .)
    WRITE           reduce using rule 38 (assign -> neuralassign1 idarray neuralassign2 exp SEMICOLON .)
    RETURN          reduce using rule 38 (assign -> neuralassign1 idarray neuralassign2 exp SEMICOLON .)
    IF              reduce using rule 38 (assign -> neuralassign1 idarray neuralassign2 exp SEMICOLON .)
    WHILE           reduce using rule 38 (assign -> neuralassign1 idarray neuralassign2 exp SEMICOLON .)
    FOR             reduce using rule 38 (assign -> neuralassign1 idarray neuralassign2 exp SEMICOLON .)
    ID              reduce using rule 38 (assign -> neuralassign1 idarray neuralassign2 exp SEMICOLON .)
    LEFTPAR         reduce using rule 38 (assign -> neuralassign1 idarray neuralassign2 exp SEMICOLON .)
    CTEINT          reduce using rule 38 (assign -> neuralassign1 idarray neuralassign2 exp SEMICOLON .)
    CTEFLOAT        reduce using rule 38 (assign -> neuralassign1 idarray neuralassign2 exp SEMICOLON .)
    CTECHAR         reduce using rule 38 (assign -> neuralassign1 idarray neuralassign2 exp SEMICOLON .)
    RIGHTBR         reduce using rule 38 (assign -> neuralassign1 idarray neuralassign2 exp SEMICOLON .)


state 180

    (48) reading -> READ LEFTPAR neuralread idarray mulread . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 192


state 181

    (50) mulread -> COMMA . ID idarray mulread

    ID              shift and go to state 193


state 182

    (51) mulread -> empty .

    RIGHTPAR        reduce using rule 51 (mulread -> empty .)


state 183

    (41) writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 194


state 184

    (46) mulwrite -> COMMA auxwrite . mulwrite
    (46) mulwrite -> . COMMA auxwrite mulwrite
    (47) mulwrite -> . empty
    (103) empty -> .

    COMMA           shift and go to state 164
    RIGHTPAR        reduce using rule 103 (empty -> .)

    mulwrite                       shift and go to state 195
    empty                          shift and go to state 165

state 185

    (52) returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .

    READ            reduce using rule 52 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 52 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 52 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    IF              reduce using rule 52 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 52 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 52 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    ID              reduce using rule 52 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    LEFTPAR         reduce using rule 52 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    CTEINT          reduce using rule 52 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    CTEFLOAT        reduce using rule 52 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    CTECHAR         reduce using rule 52 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    RIGHTBR         reduce using rule 52 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)


state 186

    (53) ifing -> IF LEFTPAR exp neuralif THEN . LEFTBR statutes RIGHTBR elsing

    LEFTBR          shift and go to state 196


state 187

    (58) whiling -> WHILE LEFTPAR exp RIGHTPAR DO . LEFTBR statutes RIGHTBR

    LEFTBR          shift and go to state 197


state 188

    (59) foring -> FOR ID idarray EQUAL exp . TO exp DO LEFTBR statutes RIGHTBR

    TO              shift and go to state 198


state 189

    (101) auxparamsexp2 -> COMMA exp . auxparamsexp2
    (101) auxparamsexp2 -> . COMMA exp auxparamsexp2
    (102) auxparamsexp2 -> . empty
    (103) empty -> .

    COMMA           shift and go to state 173
    RIGHTPAR        reduce using rule 103 (empty -> .)

    auxparamsexp2                  shift and go to state 199
    empty                          shift and go to state 174

state 190

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes . RIGHTBR neuralendfuncs modules

    RIGHTBR         shift and go to state 200


state 191

    (24) mulparams -> COMMA parameters .

    RIGHTPAR        reduce using rule 24 (mulparams -> COMMA parameters .)


state 192

    (48) reading -> READ LEFTPAR neuralread idarray mulread RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 201


state 193

    (50) mulread -> COMMA ID . idarray mulread
    (60) idarray -> . LEFTSQR exp RIGHTSQR
    (61) idarray -> . empty
    (103) empty -> .

    LEFTSQR         shift and go to state 90
    COMMA           reduce using rule 103 (empty -> .)
    RIGHTPAR        reduce using rule 103 (empty -> .)

    idarray                        shift and go to state 202
    empty                          shift and go to state 91

state 194

    (41) writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .

    READ            reduce using rule 41 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 41 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 41 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    IF              reduce using rule 41 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 41 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 41 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    ID              reduce using rule 41 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    LEFTPAR         reduce using rule 41 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    CTEINT          reduce using rule 41 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    CTEFLOAT        reduce using rule 41 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    CTECHAR         reduce using rule 41 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    RIGHTBR         reduce using rule 41 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)


state 195

    (46) mulwrite -> COMMA auxwrite mulwrite .

    RIGHTPAR        reduce using rule 46 (mulwrite -> COMMA auxwrite mulwrite .)


state 196

    (53) ifing -> IF LEFTPAR exp neuralif THEN LEFTBR . statutes RIGHTBR elsing
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . neuralassign1 idarray neuralassign2 exp SEMICOLON
    (48) reading -> . READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON
    (41) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (52) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (53) ifing -> . IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing
    (58) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (59) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (39) neuralassign1 -> . ID
    (65) andexp -> . boolexp andexp1
    (103) empty -> .
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    ID              shift and go to state 60
    RIGHTBR         reduce using rule 103 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71

  ! READ            [ reduce using rule 103 (empty -> .) ]
  ! WRITE           [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 103 (empty -> .) ]
  ! CTEINT          [ reduce using rule 103 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 103 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 103 (empty -> .) ]

    exp                            shift and go to state 51
    statutes                       shift and go to state 203
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    specialfunc                    shift and go to state 52
    neuralassign1                  shift and go to state 53
    andexp                         shift and go to state 61
    empty                          shift and go to state 62
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 197

    (58) whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR . statutes RIGHTBR
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . neuralassign1 idarray neuralassign2 exp SEMICOLON
    (48) reading -> . READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON
    (41) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (52) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (53) ifing -> . IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing
    (58) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (59) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (39) neuralassign1 -> . ID
    (65) andexp -> . boolexp andexp1
    (103) empty -> .
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    ID              shift and go to state 60
    RIGHTBR         reduce using rule 103 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71

  ! READ            [ reduce using rule 103 (empty -> .) ]
  ! WRITE           [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 103 (empty -> .) ]
  ! CTEINT          [ reduce using rule 103 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 103 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 103 (empty -> .) ]

    exp                            shift and go to state 51
    statutes                       shift and go to state 204
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    specialfunc                    shift and go to state 52
    neuralassign1                  shift and go to state 53
    andexp                         shift and go to state 61
    empty                          shift and go to state 62
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 198

    (59) foring -> FOR ID idarray EQUAL exp TO . exp DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (65) andexp -> . boolexp andexp1
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71
    ID              shift and go to state 129

    exp                            shift and go to state 205
    andexp                         shift and go to state 61
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 199

    (101) auxparamsexp2 -> COMMA exp auxparamsexp2 .

    RIGHTPAR        reduce using rule 101 (auxparamsexp2 -> COMMA exp auxparamsexp2 .)


state 200

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR . neuralendfuncs modules
    (18) neuralendfuncs -> .

    FUNCTION        reduce using rule 18 (neuralendfuncs -> .)
    MAIN            reduce using rule 18 (neuralendfuncs -> .)

    neuralendfuncs                 shift and go to state 206

state 201

    (48) reading -> READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON .

    READ            reduce using rule 48 (reading -> READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 48 (reading -> READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 48 (reading -> READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON .)
    IF              reduce using rule 48 (reading -> READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 48 (reading -> READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 48 (reading -> READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON .)
    ID              reduce using rule 48 (reading -> READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON .)
    LEFTPAR         reduce using rule 48 (reading -> READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON .)
    CTEINT          reduce using rule 48 (reading -> READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON .)
    CTEFLOAT        reduce using rule 48 (reading -> READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON .)
    CTECHAR         reduce using rule 48 (reading -> READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON .)
    RIGHTBR         reduce using rule 48 (reading -> READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON .)


state 202

    (50) mulread -> COMMA ID idarray . mulread
    (50) mulread -> . COMMA ID idarray mulread
    (51) mulread -> . empty
    (103) empty -> .

    COMMA           shift and go to state 181
    RIGHTPAR        reduce using rule 103 (empty -> .)

    mulread                        shift and go to state 207
    empty                          shift and go to state 182

state 203

    (53) ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes . RIGHTBR elsing

    RIGHTBR         shift and go to state 208


state 204

    (58) whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes . RIGHTBR

    RIGHTBR         shift and go to state 209


state 205

    (59) foring -> FOR ID idarray EQUAL exp TO exp . DO LEFTBR statutes RIGHTBR

    DO              shift and go to state 210


state 206

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs . modules
    (12) modules -> . FUNCTION functype neuralinsertfuncname funcparam
    (13) modules -> . empty
    (103) empty -> .

    FUNCTION        shift and go to state 10
    MAIN            reduce using rule 103 (empty -> .)

    modules                        shift and go to state 211
    empty                          shift and go to state 11

state 207

    (50) mulread -> COMMA ID idarray mulread .

    RIGHTPAR        reduce using rule 50 (mulread -> COMMA ID idarray mulread .)


state 208

    (53) ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR . elsing
    (55) elsing -> . neuralelse LEFTBR statutes RIGHTBR
    (56) elsing -> . empty
    (57) neuralelse -> . ELSE
    (103) empty -> .

    ELSE            shift and go to state 215
    READ            reduce using rule 103 (empty -> .)
    WRITE           reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    LEFTPAR         reduce using rule 103 (empty -> .)
    CTEINT          reduce using rule 103 (empty -> .)
    CTEFLOAT        reduce using rule 103 (empty -> .)
    CTECHAR         reduce using rule 103 (empty -> .)
    RIGHTBR         reduce using rule 103 (empty -> .)

    elsing                         shift and go to state 212
    neuralelse                     shift and go to state 213
    empty                          shift and go to state 214

state 209

    (58) whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .

    READ            reduce using rule 58 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    WRITE           reduce using rule 58 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    RETURN          reduce using rule 58 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    IF              reduce using rule 58 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    WHILE           reduce using rule 58 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    FOR             reduce using rule 58 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    ID              reduce using rule 58 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    LEFTPAR         reduce using rule 58 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    CTEINT          reduce using rule 58 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    CTEFLOAT        reduce using rule 58 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    CTECHAR         reduce using rule 58 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    RIGHTBR         reduce using rule 58 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)


state 210

    (59) foring -> FOR ID idarray EQUAL exp TO exp DO . LEFTBR statutes RIGHTBR

    LEFTBR          shift and go to state 216


state 211

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules .

    MAIN            reduce using rule 17 (funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules .)


state 212

    (53) ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing .

    READ            reduce using rule 53 (ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing .)
    WRITE           reduce using rule 53 (ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing .)
    RETURN          reduce using rule 53 (ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing .)
    IF              reduce using rule 53 (ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing .)
    WHILE           reduce using rule 53 (ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing .)
    FOR             reduce using rule 53 (ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing .)
    ID              reduce using rule 53 (ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing .)
    LEFTPAR         reduce using rule 53 (ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing .)
    CTEINT          reduce using rule 53 (ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing .)
    CTEFLOAT        reduce using rule 53 (ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing .)
    CTECHAR         reduce using rule 53 (ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing .)
    RIGHTBR         reduce using rule 53 (ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing .)


state 213

    (55) elsing -> neuralelse . LEFTBR statutes RIGHTBR

    LEFTBR          shift and go to state 217


state 214

    (56) elsing -> empty .

    READ            reduce using rule 56 (elsing -> empty .)
    WRITE           reduce using rule 56 (elsing -> empty .)
    RETURN          reduce using rule 56 (elsing -> empty .)
    IF              reduce using rule 56 (elsing -> empty .)
    WHILE           reduce using rule 56 (elsing -> empty .)
    FOR             reduce using rule 56 (elsing -> empty .)
    ID              reduce using rule 56 (elsing -> empty .)
    LEFTPAR         reduce using rule 56 (elsing -> empty .)
    CTEINT          reduce using rule 56 (elsing -> empty .)
    CTEFLOAT        reduce using rule 56 (elsing -> empty .)
    CTECHAR         reduce using rule 56 (elsing -> empty .)
    RIGHTBR         reduce using rule 56 (elsing -> empty .)


state 215

    (57) neuralelse -> ELSE .

    LEFTBR          reduce using rule 57 (neuralelse -> ELSE .)


state 216

    (59) foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR . statutes RIGHTBR
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . neuralassign1 idarray neuralassign2 exp SEMICOLON
    (48) reading -> . READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON
    (41) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (52) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (53) ifing -> . IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing
    (58) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (59) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (39) neuralassign1 -> . ID
    (65) andexp -> . boolexp andexp1
    (103) empty -> .
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    ID              shift and go to state 60
    RIGHTBR         reduce using rule 103 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71

  ! READ            [ reduce using rule 103 (empty -> .) ]
  ! WRITE           [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 103 (empty -> .) ]
  ! CTEINT          [ reduce using rule 103 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 103 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 103 (empty -> .) ]

    exp                            shift and go to state 51
    statutes                       shift and go to state 218
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    specialfunc                    shift and go to state 52
    neuralassign1                  shift and go to state 53
    andexp                         shift and go to state 61
    empty                          shift and go to state 62
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 217

    (55) elsing -> neuralelse LEFTBR . statutes RIGHTBR
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . neuralassign1 idarray neuralassign2 exp SEMICOLON
    (48) reading -> . READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON
    (41) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (52) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (53) ifing -> . IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing
    (58) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (59) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (62) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (39) neuralassign1 -> . ID
    (65) andexp -> . boolexp andexp1
    (103) empty -> .
    (69) boolexp -> . arithexp boolexp1
    (79) arithexp -> . geoexp arithexp1
    (84) geoexp -> . finexp geoexp1
    (91) finexp -> . addparenth exp popparenth
    (92) finexp -> . cteexp
    (89) addparenth -> . LEFTPAR
    (93) cteexp -> . CTEINT
    (94) cteexp -> . CTEFLOAT
    (95) cteexp -> . CTECHAR
    (96) cteexp -> . ID paramsexp

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    ID              shift and go to state 60
    RIGHTBR         reduce using rule 103 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 70
    CTECHAR         shift and go to state 71

  ! READ            [ reduce using rule 103 (empty -> .) ]
  ! WRITE           [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 103 (empty -> .) ]
  ! CTEINT          [ reduce using rule 103 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 103 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 103 (empty -> .) ]

    statutes                       shift and go to state 219
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    neuralassign1                  shift and go to state 53
    andexp                         shift and go to state 61
    empty                          shift and go to state 62
    boolexp                        shift and go to state 63
    arithexp                       shift and go to state 64
    geoexp                         shift and go to state 65
    finexp                         shift and go to state 66
    addparenth                     shift and go to state 67
    cteexp                         shift and go to state 68

state 218

    (59) foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes . RIGHTBR

    RIGHTBR         shift and go to state 220


state 219

    (55) elsing -> neuralelse LEFTBR statutes . RIGHTBR

    RIGHTBR         shift and go to state 221


state 220

    (59) foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .

    READ            reduce using rule 59 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    WRITE           reduce using rule 59 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    RETURN          reduce using rule 59 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    IF              reduce using rule 59 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    WHILE           reduce using rule 59 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    FOR             reduce using rule 59 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    ID              reduce using rule 59 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    LEFTPAR         reduce using rule 59 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    CTEINT          reduce using rule 59 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    CTEFLOAT        reduce using rule 59 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    CTECHAR         reduce using rule 59 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    RIGHTBR         reduce using rule 59 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)


state 221

    (55) elsing -> neuralelse LEFTBR statutes RIGHTBR .

    READ            reduce using rule 55 (elsing -> neuralelse LEFTBR statutes RIGHTBR .)
    WRITE           reduce using rule 55 (elsing -> neuralelse LEFTBR statutes RIGHTBR .)
    RETURN          reduce using rule 55 (elsing -> neuralelse LEFTBR statutes RIGHTBR .)
    IF              reduce using rule 55 (elsing -> neuralelse LEFTBR statutes RIGHTBR .)
    WHILE           reduce using rule 55 (elsing -> neuralelse LEFTBR statutes RIGHTBR .)
    FOR             reduce using rule 55 (elsing -> neuralelse LEFTBR statutes RIGHTBR .)
    ID              reduce using rule 55 (elsing -> neuralelse LEFTBR statutes RIGHTBR .)
    LEFTPAR         reduce using rule 55 (elsing -> neuralelse LEFTBR statutes RIGHTBR .)
    CTEINT          reduce using rule 55 (elsing -> neuralelse LEFTBR statutes RIGHTBR .)
    CTEFLOAT        reduce using rule 55 (elsing -> neuralelse LEFTBR statutes RIGHTBR .)
    CTECHAR         reduce using rule 55 (elsing -> neuralelse LEFTBR statutes RIGHTBR .)
    RIGHTBR         reduce using rule 55 (elsing -> neuralelse LEFTBR statutes RIGHTBR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for READ in state 34 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 34 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 34 resolved as shift
WARNING: shift/reduce conflict for IF in state 34 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 34 resolved as shift
WARNING: shift/reduce conflict for FOR in state 34 resolved as shift
WARNING: shift/reduce conflict for ID in state 34 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 34 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 34 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 34 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 34 resolved as shift
WARNING: shift/reduce conflict for READ in state 44 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 44 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 44 resolved as shift
WARNING: shift/reduce conflict for IF in state 44 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 44 resolved as shift
WARNING: shift/reduce conflict for FOR in state 44 resolved as shift
WARNING: shift/reduce conflict for ID in state 44 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 44 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 44 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 44 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 44 resolved as shift
WARNING: shift/reduce conflict for READ in state 45 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 45 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 45 resolved as shift
WARNING: shift/reduce conflict for IF in state 45 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 45 resolved as shift
WARNING: shift/reduce conflict for FOR in state 45 resolved as shift
WARNING: shift/reduce conflict for ID in state 45 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 45 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 45 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 45 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 45 resolved as shift
WARNING: shift/reduce conflict for READ in state 46 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 46 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 46 resolved as shift
WARNING: shift/reduce conflict for IF in state 46 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 46 resolved as shift
WARNING: shift/reduce conflict for FOR in state 46 resolved as shift
WARNING: shift/reduce conflict for ID in state 46 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 46 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 46 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 46 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 46 resolved as shift
WARNING: shift/reduce conflict for READ in state 47 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 47 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 47 resolved as shift
WARNING: shift/reduce conflict for IF in state 47 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 47 resolved as shift
WARNING: shift/reduce conflict for FOR in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 47 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 47 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 47 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 47 resolved as shift
WARNING: shift/reduce conflict for READ in state 48 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 48 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 48 resolved as shift
WARNING: shift/reduce conflict for IF in state 48 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 48 resolved as shift
WARNING: shift/reduce conflict for FOR in state 48 resolved as shift
WARNING: shift/reduce conflict for ID in state 48 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 48 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 48 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 48 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 48 resolved as shift
WARNING: shift/reduce conflict for READ in state 49 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 49 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 49 resolved as shift
WARNING: shift/reduce conflict for IF in state 49 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 49 resolved as shift
WARNING: shift/reduce conflict for FOR in state 49 resolved as shift
WARNING: shift/reduce conflict for ID in state 49 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 49 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 49 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 49 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 49 resolved as shift
WARNING: shift/reduce conflict for READ in state 50 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 50 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 50 resolved as shift
WARNING: shift/reduce conflict for IF in state 50 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 50 resolved as shift
WARNING: shift/reduce conflict for FOR in state 50 resolved as shift
WARNING: shift/reduce conflict for ID in state 50 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 50 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 50 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 50 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 50 resolved as shift
WARNING: shift/reduce conflict for READ in state 51 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 51 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 51 resolved as shift
WARNING: shift/reduce conflict for IF in state 51 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 51 resolved as shift
WARNING: shift/reduce conflict for FOR in state 51 resolved as shift
WARNING: shift/reduce conflict for ID in state 51 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 51 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 51 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 51 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 51 resolved as shift
WARNING: shift/reduce conflict for READ in state 52 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 52 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 52 resolved as shift
WARNING: shift/reduce conflict for FOR in state 52 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 52 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 52 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 52 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 52 resolved as shift
WARNING: shift/reduce conflict for LEFTSQR in state 60 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 60 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 129 resolved as shift
WARNING: shift/reduce conflict for READ in state 175 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 175 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 175 resolved as shift
WARNING: shift/reduce conflict for IF in state 175 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 175 resolved as shift
WARNING: shift/reduce conflict for FOR in state 175 resolved as shift
WARNING: shift/reduce conflict for ID in state 175 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 175 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 175 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 175 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 175 resolved as shift
WARNING: shift/reduce conflict for READ in state 196 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 196 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 196 resolved as shift
WARNING: shift/reduce conflict for IF in state 196 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 196 resolved as shift
WARNING: shift/reduce conflict for FOR in state 196 resolved as shift
WARNING: shift/reduce conflict for ID in state 196 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 196 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 196 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 196 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 196 resolved as shift
WARNING: shift/reduce conflict for READ in state 197 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 197 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 197 resolved as shift
WARNING: shift/reduce conflict for IF in state 197 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 197 resolved as shift
WARNING: shift/reduce conflict for FOR in state 197 resolved as shift
WARNING: shift/reduce conflict for ID in state 197 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 197 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 197 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 197 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 197 resolved as shift
WARNING: shift/reduce conflict for READ in state 216 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 216 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 216 resolved as shift
WARNING: shift/reduce conflict for IF in state 216 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 216 resolved as shift
WARNING: shift/reduce conflict for FOR in state 216 resolved as shift
WARNING: shift/reduce conflict for ID in state 216 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 216 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 216 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 216 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 216 resolved as shift
WARNING: shift/reduce conflict for READ in state 217 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 217 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 217 resolved as shift
WARNING: shift/reduce conflict for IF in state 217 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 217 resolved as shift
WARNING: shift/reduce conflict for FOR in state 217 resolved as shift
WARNING: shift/reduce conflict for ID in state 217 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 217 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 217 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 217 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 217 resolved as shift
WARNING: reduce/reduce conflict in state 80 resolved using rule (statutesaux -> empty)
WARNING: rejected rule (specialfunc -> empty) in state 80
WARNING: reduce/reduce conflict in state 142 resolved using rule (writetyping -> CTECHAR)
WARNING: rejected rule (cteexp -> CTECHAR) in state 142
