Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    STR
    TRUE
    FALSE
    MEDIA
    MEDIANA
    MODA
    VARIANZA
    STDEV
    PLOTXY

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR
Rule 2     neuraltablefunctions -> <empty>
Rule 3     varsgl -> VARS vars
Rule 4     varsgl -> empty
Rule 5     vars -> typing COLON ID varsarr varsmul vars
Rule 6     vars -> empty
Rule 7     varsarr -> LEFTSQR CTEINT RIGHTSQR
Rule 8     varsarr -> empty
Rule 9     varsmul -> COMMA ID varsarr varsmul
Rule 10    varsmul -> SEMICOLON
Rule 11    modules -> FUNCTION functype ID funcparam
Rule 12    modules -> empty
Rule 13    functype -> VOID
Rule 14    functype -> typing
Rule 15    funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR modules
Rule 16    typing -> INT
Rule 17    typing -> FLOAT
Rule 18    typing -> CHAR
Rule 19    parameters -> typing COLON ID idarray mulparams
Rule 20    parameters -> empty
Rule 21    mulparams -> COMMA parameters
Rule 22    mulparams -> empty
Rule 23    statutes -> assign statutesaux
Rule 24    statutes -> reading statutesaux
Rule 25    statutes -> writing statutesaux
Rule 26    statutes -> returning statutesaux
Rule 27    statutes -> ifing statutesaux
Rule 28    statutes -> whiling statutesaux
Rule 29    statutes -> foring statutesaux
Rule 30    statutes -> exp statutesaux
Rule 31    statutes -> specialfunc statutesaux
Rule 32    statutesaux -> statutes
Rule 33    statutesaux -> empty
Rule 34    specialfunc -> empty
Rule 35    assign -> ID idarray EQUAL exp SEMICOLON
Rule 36    writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
Rule 37    auxwrite -> writetyping
Rule 38    auxwrite -> exp
Rule 39    writetyping -> STRING
Rule 40    writetyping -> CTECHAR
Rule 41    mulwrite -> COMMA auxwrite mulwrite
Rule 42    mulwrite -> empty
Rule 43    reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
Rule 44    mulread -> COMMA ID idarray mulread
Rule 45    mulread -> empty
Rule 46    returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON
Rule 47    ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
Rule 48    elsing -> ELSE LEFTBR statutes RIGHTBR
Rule 49    elsing -> empty
Rule 50    whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
Rule 51    foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
Rule 52    idarray -> LEFTSQR exp RIGHTSQR
Rule 53    idarray -> empty
Rule 54    exp -> andexp exp1
Rule 55    exp1 -> OR exp
Rule 56    exp1 -> empty
Rule 57    andexp -> boolexp andexp1
Rule 58    andexp1 -> AND andexp
Rule 59    andexp1 -> empty
Rule 60    boolexp -> arithexp boolexp1
Rule 61    boolexp1 -> GREATER arithexp
Rule 62    boolexp1 -> GREATERAND arithexp
Rule 63    boolexp1 -> LESSER arithexp
Rule 64    boolexp1 -> LESSERAND arithexp
Rule 65    boolexp1 -> SAME arithexp
Rule 66    boolexp1 -> NOTSAME arithexp
Rule 67    boolexp1 -> NOT arithexp
Rule 68    boolexp1 -> empty
Rule 69    arithexp -> geoexp arithexp1
Rule 70    arithexp1 -> PLUS arithexp
Rule 71    arithexp1 -> REST arithexp
Rule 72    arithexp1 -> empty
Rule 73    geoexp -> finexp geoexp1
Rule 74    geoexp1 -> TIMES geoexp
Rule 75    geoexp1 -> DIVIDE geoexp
Rule 76    geoexp1 -> empty
Rule 77    finexp -> LEFTPAR exp RIGHTPAR
Rule 78    finexp -> cteexp
Rule 79    cteexp -> CTEINT
Rule 80    cteexp -> CTEFLOAT
Rule 81    cteexp -> CTECHAR
Rule 82    cteexp -> ID paramsexp
Rule 83    paramsexp -> LEFTPAR paramsexp2 RIGHTPAR
Rule 84    paramsexp -> idarray
Rule 85    paramsexp2 -> exp auxparamsexp2
Rule 86    paramsexp2 -> empty
Rule 87    auxparamsexp2 -> COMMA exp auxparamsexp2
Rule 88    auxparamsexp2 -> empty
Rule 89    empty -> <empty>
Rule 90    debug -> empty

Terminals, with rules where they appear

AND                  : 58
CHAR                 : 18
COLON                : 5 19
COMMA                : 9 21 41 44 87
CTECHAR              : 40 81
CTEFLOAT             : 80
CTEINT               : 7 79
DIVIDE               : 75
DO                   : 50 51
ELSE                 : 48
EQUAL                : 35 51
FALSE                : 
FLOAT                : 17
FOR                  : 51
FUNCTION             : 11
GREATER              : 61
GREATERAND           : 62
ID                   : 1 5 9 11 19 35 43 44 51 82
IF                   : 47
INT                  : 16
LEFTBR               : 1 15 47 48 50 51
LEFTPAR              : 1 15 36 43 46 47 50 77 83
LEFTSQR              : 7 52
LESSER               : 63
LESSERAND            : 64
MAIN                 : 1
MEDIA                : 
MEDIANA              : 
MODA                 : 
NOT                  : 67
NOTSAME              : 66
OR                   : 55
PLOTXY               : 
PLUS                 : 70
PROGRAM              : 1
READ                 : 43
REST                 : 71
RETURN               : 46
RIGHTBR              : 1 15 47 48 50 51
RIGHTPAR             : 1 15 36 43 46 47 50 77 83
RIGHTSQR             : 7 52
SAME                 : 65
SEMICOLON            : 1 10 15 35 36 43 46
STDEV                : 
STR                  : 
STRING               : 39
THEN                 : 47
TIMES                : 74
TO                   : 51
TRUE                 : 
VARIANZA             : 
VARS                 : 3
VOID                 : 13
WHILE                : 50
WRITE                : 36
error                : 

Nonterminals, with rules where they appear

andexp               : 54 58
andexp1              : 57
arithexp             : 60 61 62 63 64 65 66 67 70 71
arithexp1            : 69
assign               : 23
auxparamsexp2        : 85 87
auxwrite             : 36 41
boolexp              : 57
boolexp1             : 60
cteexp               : 78
debug                : 
elsing               : 47
empty                : 4 6 8 12 20 22 33 34 42 45 49 53 56 59 68 72 76 86 88 90
exp                  : 30 35 38 46 47 50 51 51 52 55 77 85 87
exp1                 : 54
finexp               : 73
foring               : 29
funcparam            : 11
functype             : 11
geoexp               : 69 74 75
geoexp1              : 73
idarray              : 19 35 43 44 51 84
ifing                : 27
modules              : 1 15
mulparams            : 19
mulread              : 43 44
mulwrite             : 36 41
neuraltablefunctions : 1
parameters           : 15 21
paramsexp            : 82
paramsexp2           : 83
program              : 0
reading              : 24
returning            : 26
specialfunc          : 31
statutes             : 1 15 32 47 48 50 51
statutesaux          : 23 24 25 26 27 28 29 30 31
typing               : 5 14 19
vars                 : 3 5
varsarr              : 5 9
varsgl               : 1 15
varsmul              : 5 9
whiling              : 28
writetyping          : 37
writing              : 25

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR
    (2) neuraltablefunctions -> .

    SEMICOLON       reduce using rule 2 (neuraltablefunctions -> .)

    neuraltablefunctions           shift and go to state 4

state 4

    (1) program -> PROGRAM ID neuraltablefunctions . SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM ID neuraltablefunctions SEMICOLON . varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR
    (3) varsgl -> . VARS vars
    (4) varsgl -> . empty
    (89) empty -> .

    VARS            shift and go to state 7
    FUNCTION        reduce using rule 89 (empty -> .)
    MAIN            reduce using rule 89 (empty -> .)

    varsgl                         shift and go to state 6
    empty                          shift and go to state 8

state 6

    (1) program -> PROGRAM ID neuraltablefunctions SEMICOLON varsgl . modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR
    (11) modules -> . FUNCTION functype ID funcparam
    (12) modules -> . empty
    (89) empty -> .

    FUNCTION        shift and go to state 10
    MAIN            reduce using rule 89 (empty -> .)

    modules                        shift and go to state 9
    empty                          shift and go to state 11

state 7

    (3) varsgl -> VARS . vars
    (5) vars -> . typing COLON ID varsarr varsmul vars
    (6) vars -> . empty
    (16) typing -> . INT
    (17) typing -> . FLOAT
    (18) typing -> . CHAR
    (89) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    FUNCTION        reduce using rule 89 (empty -> .)
    MAIN            reduce using rule 89 (empty -> .)
    LEFTBR          reduce using rule 89 (empty -> .)

    vars                           shift and go to state 12
    typing                         shift and go to state 13
    empty                          shift and go to state 14

state 8

    (4) varsgl -> empty .

    FUNCTION        reduce using rule 4 (varsgl -> empty .)
    MAIN            reduce using rule 4 (varsgl -> empty .)
    LEFTBR          reduce using rule 4 (varsgl -> empty .)


state 9

    (1) program -> PROGRAM ID neuraltablefunctions SEMICOLON varsgl modules . MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR

    MAIN            shift and go to state 18


state 10

    (11) modules -> FUNCTION . functype ID funcparam
    (13) functype -> . VOID
    (14) functype -> . typing
    (16) typing -> . INT
    (17) typing -> . FLOAT
    (18) typing -> . CHAR

    VOID            shift and go to state 20
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    functype                       shift and go to state 19
    typing                         shift and go to state 21

state 11

    (12) modules -> empty .

    MAIN            reduce using rule 12 (modules -> empty .)


state 12

    (3) varsgl -> VARS vars .

    FUNCTION        reduce using rule 3 (varsgl -> VARS vars .)
    MAIN            reduce using rule 3 (varsgl -> VARS vars .)
    LEFTBR          reduce using rule 3 (varsgl -> VARS vars .)


state 13

    (5) vars -> typing . COLON ID varsarr varsmul vars

    COLON           shift and go to state 22


state 14

    (6) vars -> empty .

    FUNCTION        reduce using rule 6 (vars -> empty .)
    MAIN            reduce using rule 6 (vars -> empty .)
    LEFTBR          reduce using rule 6 (vars -> empty .)


state 15

    (16) typing -> INT .

    COLON           reduce using rule 16 (typing -> INT .)
    ID              reduce using rule 16 (typing -> INT .)


state 16

    (17) typing -> FLOAT .

    COLON           reduce using rule 17 (typing -> FLOAT .)
    ID              reduce using rule 17 (typing -> FLOAT .)


state 17

    (18) typing -> CHAR .

    COLON           reduce using rule 18 (typing -> CHAR .)
    ID              reduce using rule 18 (typing -> CHAR .)


state 18

    (1) program -> PROGRAM ID neuraltablefunctions SEMICOLON varsgl modules MAIN . LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR

    LEFTPAR         shift and go to state 23


state 19

    (11) modules -> FUNCTION functype . ID funcparam

    ID              shift and go to state 24


state 20

    (13) functype -> VOID .

    ID              reduce using rule 13 (functype -> VOID .)


state 21

    (14) functype -> typing .

    ID              reduce using rule 14 (functype -> typing .)


state 22

    (5) vars -> typing COLON . ID varsarr varsmul vars

    ID              shift and go to state 25


state 23

    (1) program -> PROGRAM ID neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR . RIGHTPAR LEFTBR statutes RIGHTBR

    RIGHTPAR        shift and go to state 26


state 24

    (11) modules -> FUNCTION functype ID . funcparam
    (15) funcparam -> . LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR modules

    LEFTPAR         shift and go to state 28

    funcparam                      shift and go to state 27

state 25

    (5) vars -> typing COLON ID . varsarr varsmul vars
    (7) varsarr -> . LEFTSQR CTEINT RIGHTSQR
    (8) varsarr -> . empty
    (89) empty -> .

    LEFTSQR         shift and go to state 30
    COMMA           reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)

    varsarr                        shift and go to state 29
    empty                          shift and go to state 31

state 26

    (1) program -> PROGRAM ID neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR . LEFTBR statutes RIGHTBR

    LEFTBR          shift and go to state 32


state 27

    (11) modules -> FUNCTION functype ID funcparam .

    MAIN            reduce using rule 11 (modules -> FUNCTION functype ID funcparam .)


state 28

    (15) funcparam -> LEFTPAR . parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR modules
    (19) parameters -> . typing COLON ID idarray mulparams
    (20) parameters -> . empty
    (16) typing -> . INT
    (17) typing -> . FLOAT
    (18) typing -> . CHAR
    (89) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    RIGHTPAR        reduce using rule 89 (empty -> .)

    parameters                     shift and go to state 33
    typing                         shift and go to state 34
    empty                          shift and go to state 35

state 29

    (5) vars -> typing COLON ID varsarr . varsmul vars
    (9) varsmul -> . COMMA ID varsarr varsmul
    (10) varsmul -> . SEMICOLON

    COMMA           shift and go to state 37
    SEMICOLON       shift and go to state 38

    varsmul                        shift and go to state 36

state 30

    (7) varsarr -> LEFTSQR . CTEINT RIGHTSQR

    CTEINT          shift and go to state 39


state 31

    (8) varsarr -> empty .

    COMMA           reduce using rule 8 (varsarr -> empty .)
    SEMICOLON       reduce using rule 8 (varsarr -> empty .)


state 32

    (1) program -> PROGRAM ID neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR . statutes RIGHTBR
    (23) statutes -> . assign statutesaux
    (24) statutes -> . reading statutesaux
    (25) statutes -> . writing statutesaux
    (26) statutes -> . returning statutesaux
    (27) statutes -> . ifing statutesaux
    (28) statutes -> . whiling statutesaux
    (29) statutes -> . foring statutesaux
    (30) statutes -> . exp statutesaux
    (31) statutes -> . specialfunc statutesaux
    (35) assign -> . ID idarray EQUAL exp SEMICOLON
    (43) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (36) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (46) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (47) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (50) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (51) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (34) specialfunc -> . empty
    (57) andexp -> . boolexp andexp1
    (89) empty -> .
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 40
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    RIGHTBR         reduce using rule 89 (empty -> .)
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! READ            [ reduce using rule 89 (empty -> .) ]
  ! WRITE           [ reduce using rule 89 (empty -> .) ]
  ! RETURN          [ reduce using rule 89 (empty -> .) ]
  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 89 (empty -> .) ]
  ! CTEINT          [ reduce using rule 89 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 89 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 89 (empty -> .) ]

    statutes                       shift and go to state 42
    assign                         shift and go to state 43
    reading                        shift and go to state 44
    writing                        shift and go to state 45
    returning                      shift and go to state 46
    ifing                          shift and go to state 47
    whiling                        shift and go to state 48
    foring                         shift and go to state 49
    exp                            shift and go to state 50
    specialfunc                    shift and go to state 51
    andexp                         shift and go to state 58
    empty                          shift and go to state 59
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 33

    (15) funcparam -> LEFTPAR parameters . RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR modules

    RIGHTPAR        shift and go to state 68


state 34

    (19) parameters -> typing . COLON ID idarray mulparams

    COLON           shift and go to state 69


state 35

    (20) parameters -> empty .

    RIGHTPAR        reduce using rule 20 (parameters -> empty .)


state 36

    (5) vars -> typing COLON ID varsarr varsmul . vars
    (5) vars -> . typing COLON ID varsarr varsmul vars
    (6) vars -> . empty
    (16) typing -> . INT
    (17) typing -> . FLOAT
    (18) typing -> . CHAR
    (89) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    FUNCTION        reduce using rule 89 (empty -> .)
    MAIN            reduce using rule 89 (empty -> .)
    LEFTBR          reduce using rule 89 (empty -> .)

    typing                         shift and go to state 13
    vars                           shift and go to state 70
    empty                          shift and go to state 14

state 37

    (9) varsmul -> COMMA . ID varsarr varsmul

    ID              shift and go to state 71


state 38

    (10) varsmul -> SEMICOLON .

    INT             reduce using rule 10 (varsmul -> SEMICOLON .)
    FLOAT           reduce using rule 10 (varsmul -> SEMICOLON .)
    CHAR            reduce using rule 10 (varsmul -> SEMICOLON .)
    FUNCTION        reduce using rule 10 (varsmul -> SEMICOLON .)
    MAIN            reduce using rule 10 (varsmul -> SEMICOLON .)
    LEFTBR          reduce using rule 10 (varsmul -> SEMICOLON .)


state 39

    (7) varsarr -> LEFTSQR CTEINT . RIGHTSQR

    RIGHTSQR        shift and go to state 72


state 40

    (35) assign -> ID . idarray EQUAL exp SEMICOLON
    (82) cteexp -> ID . paramsexp
    (52) idarray -> . LEFTSQR exp RIGHTSQR
    (53) idarray -> . empty
    (83) paramsexp -> . LEFTPAR paramsexp2 RIGHTPAR
    (84) paramsexp -> . idarray
    (89) empty -> .

  ! shift/reduce conflict for LEFTPAR resolved as shift
    LEFTSQR         shift and go to state 75
    LEFTPAR         shift and go to state 77
    EQUAL           reduce using rule 89 (empty -> .)
    TIMES           reduce using rule 89 (empty -> .)
    DIVIDE          reduce using rule 89 (empty -> .)
    PLUS            reduce using rule 89 (empty -> .)
    REST            reduce using rule 89 (empty -> .)
    GREATER         reduce using rule 89 (empty -> .)
    GREATERAND      reduce using rule 89 (empty -> .)
    LESSER          reduce using rule 89 (empty -> .)
    LESSERAND       reduce using rule 89 (empty -> .)
    SAME            reduce using rule 89 (empty -> .)
    NOTSAME         reduce using rule 89 (empty -> .)
    NOT             reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    READ            reduce using rule 89 (empty -> .)
    WRITE           reduce using rule 89 (empty -> .)
    RETURN          reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    FOR             reduce using rule 89 (empty -> .)
    CTEINT          reduce using rule 89 (empty -> .)
    CTEFLOAT        reduce using rule 89 (empty -> .)
    CTECHAR         reduce using rule 89 (empty -> .)
    RIGHTBR         reduce using rule 89 (empty -> .)

  ! LEFTPAR         [ reduce using rule 89 (empty -> .) ]

    idarray                        shift and go to state 73
    paramsexp                      shift and go to state 74
    empty                          shift and go to state 76

state 41

    (77) finexp -> LEFTPAR . exp RIGHTPAR
    (54) exp -> . andexp exp1
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    exp                            shift and go to state 78
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 42

    (1) program -> PROGRAM ID neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes . RIGHTBR

    RIGHTBR         shift and go to state 80


state 43

    (23) statutes -> assign . statutesaux
    (32) statutesaux -> . statutes
    (33) statutesaux -> . empty
    (23) statutes -> . assign statutesaux
    (24) statutes -> . reading statutesaux
    (25) statutes -> . writing statutesaux
    (26) statutes -> . returning statutesaux
    (27) statutes -> . ifing statutesaux
    (28) statutes -> . whiling statutesaux
    (29) statutes -> . foring statutesaux
    (30) statutes -> . exp statutesaux
    (31) statutes -> . specialfunc statutesaux
    (89) empty -> .
    (35) assign -> . ID idarray EQUAL exp SEMICOLON
    (43) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (36) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (46) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (47) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (50) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (51) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (34) specialfunc -> . empty
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 89 (empty -> .)
    ID              shift and go to state 40
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! READ            [ reduce using rule 89 (empty -> .) ]
  ! WRITE           [ reduce using rule 89 (empty -> .) ]
  ! RETURN          [ reduce using rule 89 (empty -> .) ]
  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 89 (empty -> .) ]
  ! CTEINT          [ reduce using rule 89 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 89 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 89 (empty -> .) ]

    assign                         shift and go to state 43
    statutesaux                    shift and go to state 81
    statutes                       shift and go to state 82
    empty                          shift and go to state 83
    reading                        shift and go to state 44
    writing                        shift and go to state 45
    returning                      shift and go to state 46
    ifing                          shift and go to state 47
    whiling                        shift and go to state 48
    foring                         shift and go to state 49
    exp                            shift and go to state 50
    specialfunc                    shift and go to state 51
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 44

    (24) statutes -> reading . statutesaux
    (32) statutesaux -> . statutes
    (33) statutesaux -> . empty
    (23) statutes -> . assign statutesaux
    (24) statutes -> . reading statutesaux
    (25) statutes -> . writing statutesaux
    (26) statutes -> . returning statutesaux
    (27) statutes -> . ifing statutesaux
    (28) statutes -> . whiling statutesaux
    (29) statutes -> . foring statutesaux
    (30) statutes -> . exp statutesaux
    (31) statutes -> . specialfunc statutesaux
    (89) empty -> .
    (35) assign -> . ID idarray EQUAL exp SEMICOLON
    (43) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (36) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (46) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (47) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (50) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (51) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (34) specialfunc -> . empty
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 89 (empty -> .)
    ID              shift and go to state 40
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! READ            [ reduce using rule 89 (empty -> .) ]
  ! WRITE           [ reduce using rule 89 (empty -> .) ]
  ! RETURN          [ reduce using rule 89 (empty -> .) ]
  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 89 (empty -> .) ]
  ! CTEINT          [ reduce using rule 89 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 89 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 89 (empty -> .) ]

    reading                        shift and go to state 44
    statutesaux                    shift and go to state 84
    statutes                       shift and go to state 82
    empty                          shift and go to state 83
    assign                         shift and go to state 43
    writing                        shift and go to state 45
    returning                      shift and go to state 46
    ifing                          shift and go to state 47
    whiling                        shift and go to state 48
    foring                         shift and go to state 49
    exp                            shift and go to state 50
    specialfunc                    shift and go to state 51
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 45

    (25) statutes -> writing . statutesaux
    (32) statutesaux -> . statutes
    (33) statutesaux -> . empty
    (23) statutes -> . assign statutesaux
    (24) statutes -> . reading statutesaux
    (25) statutes -> . writing statutesaux
    (26) statutes -> . returning statutesaux
    (27) statutes -> . ifing statutesaux
    (28) statutes -> . whiling statutesaux
    (29) statutes -> . foring statutesaux
    (30) statutes -> . exp statutesaux
    (31) statutes -> . specialfunc statutesaux
    (89) empty -> .
    (35) assign -> . ID idarray EQUAL exp SEMICOLON
    (43) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (36) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (46) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (47) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (50) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (51) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (34) specialfunc -> . empty
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 89 (empty -> .)
    ID              shift and go to state 40
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! READ            [ reduce using rule 89 (empty -> .) ]
  ! WRITE           [ reduce using rule 89 (empty -> .) ]
  ! RETURN          [ reduce using rule 89 (empty -> .) ]
  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 89 (empty -> .) ]
  ! CTEINT          [ reduce using rule 89 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 89 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 89 (empty -> .) ]

    writing                        shift and go to state 45
    statutesaux                    shift and go to state 85
    statutes                       shift and go to state 82
    empty                          shift and go to state 83
    assign                         shift and go to state 43
    reading                        shift and go to state 44
    returning                      shift and go to state 46
    ifing                          shift and go to state 47
    whiling                        shift and go to state 48
    foring                         shift and go to state 49
    exp                            shift and go to state 50
    specialfunc                    shift and go to state 51
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 46

    (26) statutes -> returning . statutesaux
    (32) statutesaux -> . statutes
    (33) statutesaux -> . empty
    (23) statutes -> . assign statutesaux
    (24) statutes -> . reading statutesaux
    (25) statutes -> . writing statutesaux
    (26) statutes -> . returning statutesaux
    (27) statutes -> . ifing statutesaux
    (28) statutes -> . whiling statutesaux
    (29) statutes -> . foring statutesaux
    (30) statutes -> . exp statutesaux
    (31) statutes -> . specialfunc statutesaux
    (89) empty -> .
    (35) assign -> . ID idarray EQUAL exp SEMICOLON
    (43) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (36) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (46) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (47) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (50) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (51) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (34) specialfunc -> . empty
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 89 (empty -> .)
    ID              shift and go to state 40
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! READ            [ reduce using rule 89 (empty -> .) ]
  ! WRITE           [ reduce using rule 89 (empty -> .) ]
  ! RETURN          [ reduce using rule 89 (empty -> .) ]
  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 89 (empty -> .) ]
  ! CTEINT          [ reduce using rule 89 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 89 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 89 (empty -> .) ]

    returning                      shift and go to state 46
    statutesaux                    shift and go to state 86
    statutes                       shift and go to state 82
    empty                          shift and go to state 83
    assign                         shift and go to state 43
    reading                        shift and go to state 44
    writing                        shift and go to state 45
    ifing                          shift and go to state 47
    whiling                        shift and go to state 48
    foring                         shift and go to state 49
    exp                            shift and go to state 50
    specialfunc                    shift and go to state 51
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 47

    (27) statutes -> ifing . statutesaux
    (32) statutesaux -> . statutes
    (33) statutesaux -> . empty
    (23) statutes -> . assign statutesaux
    (24) statutes -> . reading statutesaux
    (25) statutes -> . writing statutesaux
    (26) statutes -> . returning statutesaux
    (27) statutes -> . ifing statutesaux
    (28) statutes -> . whiling statutesaux
    (29) statutes -> . foring statutesaux
    (30) statutes -> . exp statutesaux
    (31) statutes -> . specialfunc statutesaux
    (89) empty -> .
    (35) assign -> . ID idarray EQUAL exp SEMICOLON
    (43) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (36) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (46) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (47) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (50) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (51) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (34) specialfunc -> . empty
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 89 (empty -> .)
    ID              shift and go to state 40
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! READ            [ reduce using rule 89 (empty -> .) ]
  ! WRITE           [ reduce using rule 89 (empty -> .) ]
  ! RETURN          [ reduce using rule 89 (empty -> .) ]
  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 89 (empty -> .) ]
  ! CTEINT          [ reduce using rule 89 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 89 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 89 (empty -> .) ]

    ifing                          shift and go to state 47
    statutesaux                    shift and go to state 87
    statutes                       shift and go to state 82
    empty                          shift and go to state 83
    assign                         shift and go to state 43
    reading                        shift and go to state 44
    writing                        shift and go to state 45
    returning                      shift and go to state 46
    whiling                        shift and go to state 48
    foring                         shift and go to state 49
    exp                            shift and go to state 50
    specialfunc                    shift and go to state 51
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 48

    (28) statutes -> whiling . statutesaux
    (32) statutesaux -> . statutes
    (33) statutesaux -> . empty
    (23) statutes -> . assign statutesaux
    (24) statutes -> . reading statutesaux
    (25) statutes -> . writing statutesaux
    (26) statutes -> . returning statutesaux
    (27) statutes -> . ifing statutesaux
    (28) statutes -> . whiling statutesaux
    (29) statutes -> . foring statutesaux
    (30) statutes -> . exp statutesaux
    (31) statutes -> . specialfunc statutesaux
    (89) empty -> .
    (35) assign -> . ID idarray EQUAL exp SEMICOLON
    (43) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (36) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (46) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (47) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (50) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (51) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (34) specialfunc -> . empty
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 89 (empty -> .)
    ID              shift and go to state 40
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! READ            [ reduce using rule 89 (empty -> .) ]
  ! WRITE           [ reduce using rule 89 (empty -> .) ]
  ! RETURN          [ reduce using rule 89 (empty -> .) ]
  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 89 (empty -> .) ]
  ! CTEINT          [ reduce using rule 89 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 89 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 89 (empty -> .) ]

    whiling                        shift and go to state 48
    statutesaux                    shift and go to state 88
    statutes                       shift and go to state 82
    empty                          shift and go to state 83
    assign                         shift and go to state 43
    reading                        shift and go to state 44
    writing                        shift and go to state 45
    returning                      shift and go to state 46
    ifing                          shift and go to state 47
    foring                         shift and go to state 49
    exp                            shift and go to state 50
    specialfunc                    shift and go to state 51
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 49

    (29) statutes -> foring . statutesaux
    (32) statutesaux -> . statutes
    (33) statutesaux -> . empty
    (23) statutes -> . assign statutesaux
    (24) statutes -> . reading statutesaux
    (25) statutes -> . writing statutesaux
    (26) statutes -> . returning statutesaux
    (27) statutes -> . ifing statutesaux
    (28) statutes -> . whiling statutesaux
    (29) statutes -> . foring statutesaux
    (30) statutes -> . exp statutesaux
    (31) statutes -> . specialfunc statutesaux
    (89) empty -> .
    (35) assign -> . ID idarray EQUAL exp SEMICOLON
    (43) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (36) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (46) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (47) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (50) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (51) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (34) specialfunc -> . empty
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 89 (empty -> .)
    ID              shift and go to state 40
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! READ            [ reduce using rule 89 (empty -> .) ]
  ! WRITE           [ reduce using rule 89 (empty -> .) ]
  ! RETURN          [ reduce using rule 89 (empty -> .) ]
  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 89 (empty -> .) ]
  ! CTEINT          [ reduce using rule 89 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 89 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 89 (empty -> .) ]

    foring                         shift and go to state 49
    statutesaux                    shift and go to state 89
    statutes                       shift and go to state 82
    empty                          shift and go to state 83
    assign                         shift and go to state 43
    reading                        shift and go to state 44
    writing                        shift and go to state 45
    returning                      shift and go to state 46
    ifing                          shift and go to state 47
    whiling                        shift and go to state 48
    exp                            shift and go to state 50
    specialfunc                    shift and go to state 51
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 50

    (30) statutes -> exp . statutesaux
    (32) statutesaux -> . statutes
    (33) statutesaux -> . empty
    (23) statutes -> . assign statutesaux
    (24) statutes -> . reading statutesaux
    (25) statutes -> . writing statutesaux
    (26) statutes -> . returning statutesaux
    (27) statutes -> . ifing statutesaux
    (28) statutes -> . whiling statutesaux
    (29) statutes -> . foring statutesaux
    (30) statutes -> . exp statutesaux
    (31) statutes -> . specialfunc statutesaux
    (89) empty -> .
    (35) assign -> . ID idarray EQUAL exp SEMICOLON
    (43) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (36) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (46) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (47) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (50) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (51) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (34) specialfunc -> . empty
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 89 (empty -> .)
    ID              shift and go to state 40
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! READ            [ reduce using rule 89 (empty -> .) ]
  ! WRITE           [ reduce using rule 89 (empty -> .) ]
  ! RETURN          [ reduce using rule 89 (empty -> .) ]
  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 89 (empty -> .) ]
  ! CTEINT          [ reduce using rule 89 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 89 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 89 (empty -> .) ]

    exp                            shift and go to state 50
    statutesaux                    shift and go to state 90
    statutes                       shift and go to state 82
    empty                          shift and go to state 83
    assign                         shift and go to state 43
    reading                        shift and go to state 44
    writing                        shift and go to state 45
    returning                      shift and go to state 46
    ifing                          shift and go to state 47
    whiling                        shift and go to state 48
    foring                         shift and go to state 49
    specialfunc                    shift and go to state 51
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 51

    (31) statutes -> specialfunc . statutesaux
    (32) statutesaux -> . statutes
    (33) statutesaux -> . empty
    (23) statutes -> . assign statutesaux
    (24) statutes -> . reading statutesaux
    (25) statutes -> . writing statutesaux
    (26) statutes -> . returning statutesaux
    (27) statutes -> . ifing statutesaux
    (28) statutes -> . whiling statutesaux
    (29) statutes -> . foring statutesaux
    (30) statutes -> . exp statutesaux
    (31) statutes -> . specialfunc statutesaux
    (89) empty -> .
    (35) assign -> . ID idarray EQUAL exp SEMICOLON
    (43) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (36) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (46) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (47) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (50) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (51) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (34) specialfunc -> . empty
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 89 (empty -> .)
    ID              shift and go to state 40
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! READ            [ reduce using rule 89 (empty -> .) ]
  ! WRITE           [ reduce using rule 89 (empty -> .) ]
  ! RETURN          [ reduce using rule 89 (empty -> .) ]
  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 89 (empty -> .) ]
  ! CTEINT          [ reduce using rule 89 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 89 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 89 (empty -> .) ]

    specialfunc                    shift and go to state 51
    statutesaux                    shift and go to state 91
    statutes                       shift and go to state 82
    empty                          shift and go to state 83
    assign                         shift and go to state 43
    reading                        shift and go to state 44
    writing                        shift and go to state 45
    returning                      shift and go to state 46
    ifing                          shift and go to state 47
    whiling                        shift and go to state 48
    foring                         shift and go to state 49
    exp                            shift and go to state 50
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 52

    (43) reading -> READ . LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 92


state 53

    (36) writing -> WRITE . LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 93


state 54

    (46) returning -> RETURN . LEFTPAR exp RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 94


state 55

    (47) ifing -> IF . LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing

    LEFTPAR         shift and go to state 95


state 56

    (50) whiling -> WHILE . LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR

    LEFTPAR         shift and go to state 96


state 57

    (51) foring -> FOR . ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR

    ID              shift and go to state 97


state 58

    (54) exp -> andexp . exp1
    (55) exp1 -> . OR exp
    (56) exp1 -> . empty
    (89) empty -> .

    OR              shift and go to state 99
    ID              reduce using rule 89 (empty -> .)
    READ            reduce using rule 89 (empty -> .)
    WRITE           reduce using rule 89 (empty -> .)
    RETURN          reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    FOR             reduce using rule 89 (empty -> .)
    LEFTPAR         reduce using rule 89 (empty -> .)
    CTEINT          reduce using rule 89 (empty -> .)
    CTEFLOAT        reduce using rule 89 (empty -> .)
    CTECHAR         reduce using rule 89 (empty -> .)
    RIGHTBR         reduce using rule 89 (empty -> .)
    RIGHTPAR        reduce using rule 89 (empty -> .)
    RIGHTSQR        reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    TO              reduce using rule 89 (empty -> .)
    DO              reduce using rule 89 (empty -> .)

    exp1                           shift and go to state 98
    empty                          shift and go to state 100

state 59

    (34) specialfunc -> empty .

    ID              reduce using rule 34 (specialfunc -> empty .)
    READ            reduce using rule 34 (specialfunc -> empty .)
    WRITE           reduce using rule 34 (specialfunc -> empty .)
    RETURN          reduce using rule 34 (specialfunc -> empty .)
    IF              reduce using rule 34 (specialfunc -> empty .)
    WHILE           reduce using rule 34 (specialfunc -> empty .)
    FOR             reduce using rule 34 (specialfunc -> empty .)
    LEFTPAR         reduce using rule 34 (specialfunc -> empty .)
    CTEINT          reduce using rule 34 (specialfunc -> empty .)
    CTEFLOAT        reduce using rule 34 (specialfunc -> empty .)
    CTECHAR         reduce using rule 34 (specialfunc -> empty .)
    RIGHTBR         reduce using rule 34 (specialfunc -> empty .)


state 60

    (57) andexp -> boolexp . andexp1
    (58) andexp1 -> . AND andexp
    (59) andexp1 -> . empty
    (89) empty -> .

    AND             shift and go to state 102
    OR              reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    READ            reduce using rule 89 (empty -> .)
    WRITE           reduce using rule 89 (empty -> .)
    RETURN          reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    FOR             reduce using rule 89 (empty -> .)
    LEFTPAR         reduce using rule 89 (empty -> .)
    CTEINT          reduce using rule 89 (empty -> .)
    CTEFLOAT        reduce using rule 89 (empty -> .)
    CTECHAR         reduce using rule 89 (empty -> .)
    RIGHTBR         reduce using rule 89 (empty -> .)
    RIGHTPAR        reduce using rule 89 (empty -> .)
    RIGHTSQR        reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    TO              reduce using rule 89 (empty -> .)
    DO              reduce using rule 89 (empty -> .)

    andexp1                        shift and go to state 101
    empty                          shift and go to state 103

state 61

    (60) boolexp -> arithexp . boolexp1
    (61) boolexp1 -> . GREATER arithexp
    (62) boolexp1 -> . GREATERAND arithexp
    (63) boolexp1 -> . LESSER arithexp
    (64) boolexp1 -> . LESSERAND arithexp
    (65) boolexp1 -> . SAME arithexp
    (66) boolexp1 -> . NOTSAME arithexp
    (67) boolexp1 -> . NOT arithexp
    (68) boolexp1 -> . empty
    (89) empty -> .

    GREATER         shift and go to state 105
    GREATERAND      shift and go to state 106
    LESSER          shift and go to state 107
    LESSERAND       shift and go to state 108
    SAME            shift and go to state 109
    NOTSAME         shift and go to state 110
    NOT             shift and go to state 111
    AND             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    READ            reduce using rule 89 (empty -> .)
    WRITE           reduce using rule 89 (empty -> .)
    RETURN          reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    FOR             reduce using rule 89 (empty -> .)
    LEFTPAR         reduce using rule 89 (empty -> .)
    CTEINT          reduce using rule 89 (empty -> .)
    CTEFLOAT        reduce using rule 89 (empty -> .)
    CTECHAR         reduce using rule 89 (empty -> .)
    RIGHTBR         reduce using rule 89 (empty -> .)
    RIGHTPAR        reduce using rule 89 (empty -> .)
    RIGHTSQR        reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    TO              reduce using rule 89 (empty -> .)
    DO              reduce using rule 89 (empty -> .)

    boolexp1                       shift and go to state 104
    empty                          shift and go to state 112

state 62

    (69) arithexp -> geoexp . arithexp1
    (70) arithexp1 -> . PLUS arithexp
    (71) arithexp1 -> . REST arithexp
    (72) arithexp1 -> . empty
    (89) empty -> .

    PLUS            shift and go to state 114
    REST            shift and go to state 115
    GREATER         reduce using rule 89 (empty -> .)
    GREATERAND      reduce using rule 89 (empty -> .)
    LESSER          reduce using rule 89 (empty -> .)
    LESSERAND       reduce using rule 89 (empty -> .)
    SAME            reduce using rule 89 (empty -> .)
    NOTSAME         reduce using rule 89 (empty -> .)
    NOT             reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    READ            reduce using rule 89 (empty -> .)
    WRITE           reduce using rule 89 (empty -> .)
    RETURN          reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    FOR             reduce using rule 89 (empty -> .)
    LEFTPAR         reduce using rule 89 (empty -> .)
    CTEINT          reduce using rule 89 (empty -> .)
    CTEFLOAT        reduce using rule 89 (empty -> .)
    CTECHAR         reduce using rule 89 (empty -> .)
    RIGHTBR         reduce using rule 89 (empty -> .)
    RIGHTPAR        reduce using rule 89 (empty -> .)
    RIGHTSQR        reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    TO              reduce using rule 89 (empty -> .)
    DO              reduce using rule 89 (empty -> .)

    arithexp1                      shift and go to state 113
    empty                          shift and go to state 116

state 63

    (73) geoexp -> finexp . geoexp1
    (74) geoexp1 -> . TIMES geoexp
    (75) geoexp1 -> . DIVIDE geoexp
    (76) geoexp1 -> . empty
    (89) empty -> .

    TIMES           shift and go to state 118
    DIVIDE          shift and go to state 119
    PLUS            reduce using rule 89 (empty -> .)
    REST            reduce using rule 89 (empty -> .)
    GREATER         reduce using rule 89 (empty -> .)
    GREATERAND      reduce using rule 89 (empty -> .)
    LESSER          reduce using rule 89 (empty -> .)
    LESSERAND       reduce using rule 89 (empty -> .)
    SAME            reduce using rule 89 (empty -> .)
    NOTSAME         reduce using rule 89 (empty -> .)
    NOT             reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    READ            reduce using rule 89 (empty -> .)
    WRITE           reduce using rule 89 (empty -> .)
    RETURN          reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    FOR             reduce using rule 89 (empty -> .)
    LEFTPAR         reduce using rule 89 (empty -> .)
    CTEINT          reduce using rule 89 (empty -> .)
    CTEFLOAT        reduce using rule 89 (empty -> .)
    CTECHAR         reduce using rule 89 (empty -> .)
    RIGHTBR         reduce using rule 89 (empty -> .)
    RIGHTPAR        reduce using rule 89 (empty -> .)
    RIGHTSQR        reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    TO              reduce using rule 89 (empty -> .)
    DO              reduce using rule 89 (empty -> .)

    geoexp1                        shift and go to state 117
    empty                          shift and go to state 120

state 64

    (78) finexp -> cteexp .

    TIMES           reduce using rule 78 (finexp -> cteexp .)
    DIVIDE          reduce using rule 78 (finexp -> cteexp .)
    PLUS            reduce using rule 78 (finexp -> cteexp .)
    REST            reduce using rule 78 (finexp -> cteexp .)
    GREATER         reduce using rule 78 (finexp -> cteexp .)
    GREATERAND      reduce using rule 78 (finexp -> cteexp .)
    LESSER          reduce using rule 78 (finexp -> cteexp .)
    LESSERAND       reduce using rule 78 (finexp -> cteexp .)
    SAME            reduce using rule 78 (finexp -> cteexp .)
    NOTSAME         reduce using rule 78 (finexp -> cteexp .)
    NOT             reduce using rule 78 (finexp -> cteexp .)
    AND             reduce using rule 78 (finexp -> cteexp .)
    OR              reduce using rule 78 (finexp -> cteexp .)
    ID              reduce using rule 78 (finexp -> cteexp .)
    READ            reduce using rule 78 (finexp -> cteexp .)
    WRITE           reduce using rule 78 (finexp -> cteexp .)
    RETURN          reduce using rule 78 (finexp -> cteexp .)
    IF              reduce using rule 78 (finexp -> cteexp .)
    WHILE           reduce using rule 78 (finexp -> cteexp .)
    FOR             reduce using rule 78 (finexp -> cteexp .)
    LEFTPAR         reduce using rule 78 (finexp -> cteexp .)
    CTEINT          reduce using rule 78 (finexp -> cteexp .)
    CTEFLOAT        reduce using rule 78 (finexp -> cteexp .)
    CTECHAR         reduce using rule 78 (finexp -> cteexp .)
    RIGHTBR         reduce using rule 78 (finexp -> cteexp .)
    RIGHTPAR        reduce using rule 78 (finexp -> cteexp .)
    RIGHTSQR        reduce using rule 78 (finexp -> cteexp .)
    COMMA           reduce using rule 78 (finexp -> cteexp .)
    SEMICOLON       reduce using rule 78 (finexp -> cteexp .)
    TO              reduce using rule 78 (finexp -> cteexp .)
    DO              reduce using rule 78 (finexp -> cteexp .)


state 65

    (79) cteexp -> CTEINT .

    TIMES           reduce using rule 79 (cteexp -> CTEINT .)
    DIVIDE          reduce using rule 79 (cteexp -> CTEINT .)
    PLUS            reduce using rule 79 (cteexp -> CTEINT .)
    REST            reduce using rule 79 (cteexp -> CTEINT .)
    GREATER         reduce using rule 79 (cteexp -> CTEINT .)
    GREATERAND      reduce using rule 79 (cteexp -> CTEINT .)
    LESSER          reduce using rule 79 (cteexp -> CTEINT .)
    LESSERAND       reduce using rule 79 (cteexp -> CTEINT .)
    SAME            reduce using rule 79 (cteexp -> CTEINT .)
    NOTSAME         reduce using rule 79 (cteexp -> CTEINT .)
    NOT             reduce using rule 79 (cteexp -> CTEINT .)
    AND             reduce using rule 79 (cteexp -> CTEINT .)
    OR              reduce using rule 79 (cteexp -> CTEINT .)
    ID              reduce using rule 79 (cteexp -> CTEINT .)
    READ            reduce using rule 79 (cteexp -> CTEINT .)
    WRITE           reduce using rule 79 (cteexp -> CTEINT .)
    RETURN          reduce using rule 79 (cteexp -> CTEINT .)
    IF              reduce using rule 79 (cteexp -> CTEINT .)
    WHILE           reduce using rule 79 (cteexp -> CTEINT .)
    FOR             reduce using rule 79 (cteexp -> CTEINT .)
    LEFTPAR         reduce using rule 79 (cteexp -> CTEINT .)
    CTEINT          reduce using rule 79 (cteexp -> CTEINT .)
    CTEFLOAT        reduce using rule 79 (cteexp -> CTEINT .)
    CTECHAR         reduce using rule 79 (cteexp -> CTEINT .)
    RIGHTBR         reduce using rule 79 (cteexp -> CTEINT .)
    RIGHTPAR        reduce using rule 79 (cteexp -> CTEINT .)
    RIGHTSQR        reduce using rule 79 (cteexp -> CTEINT .)
    COMMA           reduce using rule 79 (cteexp -> CTEINT .)
    SEMICOLON       reduce using rule 79 (cteexp -> CTEINT .)
    TO              reduce using rule 79 (cteexp -> CTEINT .)
    DO              reduce using rule 79 (cteexp -> CTEINT .)


state 66

    (80) cteexp -> CTEFLOAT .

    TIMES           reduce using rule 80 (cteexp -> CTEFLOAT .)
    DIVIDE          reduce using rule 80 (cteexp -> CTEFLOAT .)
    PLUS            reduce using rule 80 (cteexp -> CTEFLOAT .)
    REST            reduce using rule 80 (cteexp -> CTEFLOAT .)
    GREATER         reduce using rule 80 (cteexp -> CTEFLOAT .)
    GREATERAND      reduce using rule 80 (cteexp -> CTEFLOAT .)
    LESSER          reduce using rule 80 (cteexp -> CTEFLOAT .)
    LESSERAND       reduce using rule 80 (cteexp -> CTEFLOAT .)
    SAME            reduce using rule 80 (cteexp -> CTEFLOAT .)
    NOTSAME         reduce using rule 80 (cteexp -> CTEFLOAT .)
    NOT             reduce using rule 80 (cteexp -> CTEFLOAT .)
    AND             reduce using rule 80 (cteexp -> CTEFLOAT .)
    OR              reduce using rule 80 (cteexp -> CTEFLOAT .)
    ID              reduce using rule 80 (cteexp -> CTEFLOAT .)
    READ            reduce using rule 80 (cteexp -> CTEFLOAT .)
    WRITE           reduce using rule 80 (cteexp -> CTEFLOAT .)
    RETURN          reduce using rule 80 (cteexp -> CTEFLOAT .)
    IF              reduce using rule 80 (cteexp -> CTEFLOAT .)
    WHILE           reduce using rule 80 (cteexp -> CTEFLOAT .)
    FOR             reduce using rule 80 (cteexp -> CTEFLOAT .)
    LEFTPAR         reduce using rule 80 (cteexp -> CTEFLOAT .)
    CTEINT          reduce using rule 80 (cteexp -> CTEFLOAT .)
    CTEFLOAT        reduce using rule 80 (cteexp -> CTEFLOAT .)
    CTECHAR         reduce using rule 80 (cteexp -> CTEFLOAT .)
    RIGHTBR         reduce using rule 80 (cteexp -> CTEFLOAT .)
    RIGHTPAR        reduce using rule 80 (cteexp -> CTEFLOAT .)
    RIGHTSQR        reduce using rule 80 (cteexp -> CTEFLOAT .)
    COMMA           reduce using rule 80 (cteexp -> CTEFLOAT .)
    SEMICOLON       reduce using rule 80 (cteexp -> CTEFLOAT .)
    TO              reduce using rule 80 (cteexp -> CTEFLOAT .)
    DO              reduce using rule 80 (cteexp -> CTEFLOAT .)


state 67

    (81) cteexp -> CTECHAR .

    TIMES           reduce using rule 81 (cteexp -> CTECHAR .)
    DIVIDE          reduce using rule 81 (cteexp -> CTECHAR .)
    PLUS            reduce using rule 81 (cteexp -> CTECHAR .)
    REST            reduce using rule 81 (cteexp -> CTECHAR .)
    GREATER         reduce using rule 81 (cteexp -> CTECHAR .)
    GREATERAND      reduce using rule 81 (cteexp -> CTECHAR .)
    LESSER          reduce using rule 81 (cteexp -> CTECHAR .)
    LESSERAND       reduce using rule 81 (cteexp -> CTECHAR .)
    SAME            reduce using rule 81 (cteexp -> CTECHAR .)
    NOTSAME         reduce using rule 81 (cteexp -> CTECHAR .)
    NOT             reduce using rule 81 (cteexp -> CTECHAR .)
    AND             reduce using rule 81 (cteexp -> CTECHAR .)
    OR              reduce using rule 81 (cteexp -> CTECHAR .)
    ID              reduce using rule 81 (cteexp -> CTECHAR .)
    READ            reduce using rule 81 (cteexp -> CTECHAR .)
    WRITE           reduce using rule 81 (cteexp -> CTECHAR .)
    RETURN          reduce using rule 81 (cteexp -> CTECHAR .)
    IF              reduce using rule 81 (cteexp -> CTECHAR .)
    WHILE           reduce using rule 81 (cteexp -> CTECHAR .)
    FOR             reduce using rule 81 (cteexp -> CTECHAR .)
    LEFTPAR         reduce using rule 81 (cteexp -> CTECHAR .)
    CTEINT          reduce using rule 81 (cteexp -> CTECHAR .)
    CTEFLOAT        reduce using rule 81 (cteexp -> CTECHAR .)
    CTECHAR         reduce using rule 81 (cteexp -> CTECHAR .)
    RIGHTBR         reduce using rule 81 (cteexp -> CTECHAR .)
    RIGHTPAR        reduce using rule 81 (cteexp -> CTECHAR .)
    RIGHTSQR        reduce using rule 81 (cteexp -> CTECHAR .)
    COMMA           reduce using rule 81 (cteexp -> CTECHAR .)
    SEMICOLON       reduce using rule 81 (cteexp -> CTECHAR .)
    TO              reduce using rule 81 (cteexp -> CTECHAR .)
    DO              reduce using rule 81 (cteexp -> CTECHAR .)


state 68

    (15) funcparam -> LEFTPAR parameters RIGHTPAR . SEMICOLON varsgl LEFTBR statutes RIGHTBR modules

    SEMICOLON       shift and go to state 121


state 69

    (19) parameters -> typing COLON . ID idarray mulparams

    ID              shift and go to state 122


state 70

    (5) vars -> typing COLON ID varsarr varsmul vars .

    FUNCTION        reduce using rule 5 (vars -> typing COLON ID varsarr varsmul vars .)
    MAIN            reduce using rule 5 (vars -> typing COLON ID varsarr varsmul vars .)
    LEFTBR          reduce using rule 5 (vars -> typing COLON ID varsarr varsmul vars .)


state 71

    (9) varsmul -> COMMA ID . varsarr varsmul
    (7) varsarr -> . LEFTSQR CTEINT RIGHTSQR
    (8) varsarr -> . empty
    (89) empty -> .

    LEFTSQR         shift and go to state 30
    COMMA           reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)

    varsarr                        shift and go to state 123
    empty                          shift and go to state 31

state 72

    (7) varsarr -> LEFTSQR CTEINT RIGHTSQR .

    COMMA           reduce using rule 7 (varsarr -> LEFTSQR CTEINT RIGHTSQR .)
    SEMICOLON       reduce using rule 7 (varsarr -> LEFTSQR CTEINT RIGHTSQR .)


state 73

    (35) assign -> ID idarray . EQUAL exp SEMICOLON
    (84) paramsexp -> idarray .

    EQUAL           shift and go to state 124
    TIMES           reduce using rule 84 (paramsexp -> idarray .)
    DIVIDE          reduce using rule 84 (paramsexp -> idarray .)
    PLUS            reduce using rule 84 (paramsexp -> idarray .)
    REST            reduce using rule 84 (paramsexp -> idarray .)
    GREATER         reduce using rule 84 (paramsexp -> idarray .)
    GREATERAND      reduce using rule 84 (paramsexp -> idarray .)
    LESSER          reduce using rule 84 (paramsexp -> idarray .)
    LESSERAND       reduce using rule 84 (paramsexp -> idarray .)
    SAME            reduce using rule 84 (paramsexp -> idarray .)
    NOTSAME         reduce using rule 84 (paramsexp -> idarray .)
    NOT             reduce using rule 84 (paramsexp -> idarray .)
    AND             reduce using rule 84 (paramsexp -> idarray .)
    OR              reduce using rule 84 (paramsexp -> idarray .)
    ID              reduce using rule 84 (paramsexp -> idarray .)
    READ            reduce using rule 84 (paramsexp -> idarray .)
    WRITE           reduce using rule 84 (paramsexp -> idarray .)
    RETURN          reduce using rule 84 (paramsexp -> idarray .)
    IF              reduce using rule 84 (paramsexp -> idarray .)
    WHILE           reduce using rule 84 (paramsexp -> idarray .)
    FOR             reduce using rule 84 (paramsexp -> idarray .)
    LEFTPAR         reduce using rule 84 (paramsexp -> idarray .)
    CTEINT          reduce using rule 84 (paramsexp -> idarray .)
    CTEFLOAT        reduce using rule 84 (paramsexp -> idarray .)
    CTECHAR         reduce using rule 84 (paramsexp -> idarray .)
    RIGHTBR         reduce using rule 84 (paramsexp -> idarray .)


state 74

    (82) cteexp -> ID paramsexp .

    TIMES           reduce using rule 82 (cteexp -> ID paramsexp .)
    DIVIDE          reduce using rule 82 (cteexp -> ID paramsexp .)
    PLUS            reduce using rule 82 (cteexp -> ID paramsexp .)
    REST            reduce using rule 82 (cteexp -> ID paramsexp .)
    GREATER         reduce using rule 82 (cteexp -> ID paramsexp .)
    GREATERAND      reduce using rule 82 (cteexp -> ID paramsexp .)
    LESSER          reduce using rule 82 (cteexp -> ID paramsexp .)
    LESSERAND       reduce using rule 82 (cteexp -> ID paramsexp .)
    SAME            reduce using rule 82 (cteexp -> ID paramsexp .)
    NOTSAME         reduce using rule 82 (cteexp -> ID paramsexp .)
    NOT             reduce using rule 82 (cteexp -> ID paramsexp .)
    AND             reduce using rule 82 (cteexp -> ID paramsexp .)
    OR              reduce using rule 82 (cteexp -> ID paramsexp .)
    ID              reduce using rule 82 (cteexp -> ID paramsexp .)
    READ            reduce using rule 82 (cteexp -> ID paramsexp .)
    WRITE           reduce using rule 82 (cteexp -> ID paramsexp .)
    RETURN          reduce using rule 82 (cteexp -> ID paramsexp .)
    IF              reduce using rule 82 (cteexp -> ID paramsexp .)
    WHILE           reduce using rule 82 (cteexp -> ID paramsexp .)
    FOR             reduce using rule 82 (cteexp -> ID paramsexp .)
    LEFTPAR         reduce using rule 82 (cteexp -> ID paramsexp .)
    CTEINT          reduce using rule 82 (cteexp -> ID paramsexp .)
    CTEFLOAT        reduce using rule 82 (cteexp -> ID paramsexp .)
    CTECHAR         reduce using rule 82 (cteexp -> ID paramsexp .)
    RIGHTBR         reduce using rule 82 (cteexp -> ID paramsexp .)
    RIGHTPAR        reduce using rule 82 (cteexp -> ID paramsexp .)
    RIGHTSQR        reduce using rule 82 (cteexp -> ID paramsexp .)
    COMMA           reduce using rule 82 (cteexp -> ID paramsexp .)
    SEMICOLON       reduce using rule 82 (cteexp -> ID paramsexp .)
    TO              reduce using rule 82 (cteexp -> ID paramsexp .)
    DO              reduce using rule 82 (cteexp -> ID paramsexp .)


state 75

    (52) idarray -> LEFTSQR . exp RIGHTSQR
    (54) exp -> . andexp exp1
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    exp                            shift and go to state 125
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 76

    (53) idarray -> empty .

    EQUAL           reduce using rule 53 (idarray -> empty .)
    TIMES           reduce using rule 53 (idarray -> empty .)
    DIVIDE          reduce using rule 53 (idarray -> empty .)
    PLUS            reduce using rule 53 (idarray -> empty .)
    REST            reduce using rule 53 (idarray -> empty .)
    GREATER         reduce using rule 53 (idarray -> empty .)
    GREATERAND      reduce using rule 53 (idarray -> empty .)
    LESSER          reduce using rule 53 (idarray -> empty .)
    LESSERAND       reduce using rule 53 (idarray -> empty .)
    SAME            reduce using rule 53 (idarray -> empty .)
    NOTSAME         reduce using rule 53 (idarray -> empty .)
    NOT             reduce using rule 53 (idarray -> empty .)
    AND             reduce using rule 53 (idarray -> empty .)
    OR              reduce using rule 53 (idarray -> empty .)
    ID              reduce using rule 53 (idarray -> empty .)
    READ            reduce using rule 53 (idarray -> empty .)
    WRITE           reduce using rule 53 (idarray -> empty .)
    RETURN          reduce using rule 53 (idarray -> empty .)
    IF              reduce using rule 53 (idarray -> empty .)
    WHILE           reduce using rule 53 (idarray -> empty .)
    FOR             reduce using rule 53 (idarray -> empty .)
    LEFTPAR         reduce using rule 53 (idarray -> empty .)
    CTEINT          reduce using rule 53 (idarray -> empty .)
    CTEFLOAT        reduce using rule 53 (idarray -> empty .)
    CTECHAR         reduce using rule 53 (idarray -> empty .)
    RIGHTBR         reduce using rule 53 (idarray -> empty .)
    RIGHTPAR        reduce using rule 53 (idarray -> empty .)
    RIGHTSQR        reduce using rule 53 (idarray -> empty .)
    COMMA           reduce using rule 53 (idarray -> empty .)
    SEMICOLON       reduce using rule 53 (idarray -> empty .)
    TO              reduce using rule 53 (idarray -> empty .)
    DO              reduce using rule 53 (idarray -> empty .)


state 77

    (83) paramsexp -> LEFTPAR . paramsexp2 RIGHTPAR
    (85) paramsexp2 -> . exp auxparamsexp2
    (86) paramsexp2 -> . empty
    (54) exp -> . andexp exp1
    (89) empty -> .
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    RIGHTPAR        reduce using rule 89 (empty -> .)
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    paramsexp2                     shift and go to state 126
    exp                            shift and go to state 127
    empty                          shift and go to state 128
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 78

    (77) finexp -> LEFTPAR exp . RIGHTPAR

    RIGHTPAR        shift and go to state 129


state 79

    (82) cteexp -> ID . paramsexp
    (83) paramsexp -> . LEFTPAR paramsexp2 RIGHTPAR
    (84) paramsexp -> . idarray
    (52) idarray -> . LEFTSQR exp RIGHTSQR
    (53) idarray -> . empty
    (89) empty -> .

  ! shift/reduce conflict for LEFTPAR resolved as shift
    LEFTPAR         shift and go to state 77
    LEFTSQR         shift and go to state 75
    TIMES           reduce using rule 89 (empty -> .)
    DIVIDE          reduce using rule 89 (empty -> .)
    PLUS            reduce using rule 89 (empty -> .)
    REST            reduce using rule 89 (empty -> .)
    GREATER         reduce using rule 89 (empty -> .)
    GREATERAND      reduce using rule 89 (empty -> .)
    LESSER          reduce using rule 89 (empty -> .)
    LESSERAND       reduce using rule 89 (empty -> .)
    SAME            reduce using rule 89 (empty -> .)
    NOTSAME         reduce using rule 89 (empty -> .)
    NOT             reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    RIGHTPAR        reduce using rule 89 (empty -> .)
    RIGHTSQR        reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    READ            reduce using rule 89 (empty -> .)
    WRITE           reduce using rule 89 (empty -> .)
    RETURN          reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    FOR             reduce using rule 89 (empty -> .)
    CTEINT          reduce using rule 89 (empty -> .)
    CTEFLOAT        reduce using rule 89 (empty -> .)
    CTECHAR         reduce using rule 89 (empty -> .)
    RIGHTBR         reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    TO              reduce using rule 89 (empty -> .)
    DO              reduce using rule 89 (empty -> .)

  ! LEFTPAR         [ reduce using rule 89 (empty -> .) ]

    paramsexp                      shift and go to state 74
    idarray                        shift and go to state 130
    empty                          shift and go to state 76

state 80

    (1) program -> PROGRAM ID neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR .

    $end            reduce using rule 1 (program -> PROGRAM ID neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR .)


state 81

    (23) statutes -> assign statutesaux .

    RIGHTBR         reduce using rule 23 (statutes -> assign statutesaux .)


state 82

    (32) statutesaux -> statutes .

    RIGHTBR         reduce using rule 32 (statutesaux -> statutes .)


state 83

    (33) statutesaux -> empty .
    (34) specialfunc -> empty .

  ! reduce/reduce conflict for RIGHTBR resolved using rule 33 (statutesaux -> empty .)
    RIGHTBR         reduce using rule 33 (statutesaux -> empty .)
    ID              reduce using rule 34 (specialfunc -> empty .)
    READ            reduce using rule 34 (specialfunc -> empty .)
    WRITE           reduce using rule 34 (specialfunc -> empty .)
    RETURN          reduce using rule 34 (specialfunc -> empty .)
    IF              reduce using rule 34 (specialfunc -> empty .)
    WHILE           reduce using rule 34 (specialfunc -> empty .)
    FOR             reduce using rule 34 (specialfunc -> empty .)
    LEFTPAR         reduce using rule 34 (specialfunc -> empty .)
    CTEINT          reduce using rule 34 (specialfunc -> empty .)
    CTEFLOAT        reduce using rule 34 (specialfunc -> empty .)
    CTECHAR         reduce using rule 34 (specialfunc -> empty .)

  ! RIGHTBR         [ reduce using rule 34 (specialfunc -> empty .) ]


state 84

    (24) statutes -> reading statutesaux .

    RIGHTBR         reduce using rule 24 (statutes -> reading statutesaux .)


state 85

    (25) statutes -> writing statutesaux .

    RIGHTBR         reduce using rule 25 (statutes -> writing statutesaux .)


state 86

    (26) statutes -> returning statutesaux .

    RIGHTBR         reduce using rule 26 (statutes -> returning statutesaux .)


state 87

    (27) statutes -> ifing statutesaux .

    RIGHTBR         reduce using rule 27 (statutes -> ifing statutesaux .)


state 88

    (28) statutes -> whiling statutesaux .

    RIGHTBR         reduce using rule 28 (statutes -> whiling statutesaux .)


state 89

    (29) statutes -> foring statutesaux .

    RIGHTBR         reduce using rule 29 (statutes -> foring statutesaux .)


state 90

    (30) statutes -> exp statutesaux .

    RIGHTBR         reduce using rule 30 (statutes -> exp statutesaux .)


state 91

    (31) statutes -> specialfunc statutesaux .

    RIGHTBR         reduce using rule 31 (statutes -> specialfunc statutesaux .)


state 92

    (43) reading -> READ LEFTPAR . ID idarray mulread RIGHTPAR SEMICOLON

    ID              shift and go to state 131


state 93

    (36) writing -> WRITE LEFTPAR . auxwrite mulwrite RIGHTPAR SEMICOLON
    (37) auxwrite -> . writetyping
    (38) auxwrite -> . exp
    (39) writetyping -> . STRING
    (40) writetyping -> . CTECHAR
    (54) exp -> . andexp exp1
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    STRING          shift and go to state 135
    CTECHAR         shift and go to state 136
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    ID              shift and go to state 79

    auxwrite                       shift and go to state 132
    writetyping                    shift and go to state 133
    exp                            shift and go to state 134
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 94

    (46) returning -> RETURN LEFTPAR . exp RIGHTPAR SEMICOLON
    (54) exp -> . andexp exp1
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    exp                            shift and go to state 137
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 95

    (47) ifing -> IF LEFTPAR . exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (54) exp -> . andexp exp1
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    exp                            shift and go to state 138
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 96

    (50) whiling -> WHILE LEFTPAR . exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    exp                            shift and go to state 139
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 97

    (51) foring -> FOR ID . idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (52) idarray -> . LEFTSQR exp RIGHTSQR
    (53) idarray -> . empty
    (89) empty -> .

    LEFTSQR         shift and go to state 75
    EQUAL           reduce using rule 89 (empty -> .)

    idarray                        shift and go to state 140
    empty                          shift and go to state 76

state 98

    (54) exp -> andexp exp1 .

    ID              reduce using rule 54 (exp -> andexp exp1 .)
    READ            reduce using rule 54 (exp -> andexp exp1 .)
    WRITE           reduce using rule 54 (exp -> andexp exp1 .)
    RETURN          reduce using rule 54 (exp -> andexp exp1 .)
    IF              reduce using rule 54 (exp -> andexp exp1 .)
    WHILE           reduce using rule 54 (exp -> andexp exp1 .)
    FOR             reduce using rule 54 (exp -> andexp exp1 .)
    LEFTPAR         reduce using rule 54 (exp -> andexp exp1 .)
    CTEINT          reduce using rule 54 (exp -> andexp exp1 .)
    CTEFLOAT        reduce using rule 54 (exp -> andexp exp1 .)
    CTECHAR         reduce using rule 54 (exp -> andexp exp1 .)
    RIGHTBR         reduce using rule 54 (exp -> andexp exp1 .)
    RIGHTPAR        reduce using rule 54 (exp -> andexp exp1 .)
    RIGHTSQR        reduce using rule 54 (exp -> andexp exp1 .)
    COMMA           reduce using rule 54 (exp -> andexp exp1 .)
    SEMICOLON       reduce using rule 54 (exp -> andexp exp1 .)
    TO              reduce using rule 54 (exp -> andexp exp1 .)
    DO              reduce using rule 54 (exp -> andexp exp1 .)


state 99

    (55) exp1 -> OR . exp
    (54) exp -> . andexp exp1
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    exp                            shift and go to state 141
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 100

    (56) exp1 -> empty .

    ID              reduce using rule 56 (exp1 -> empty .)
    READ            reduce using rule 56 (exp1 -> empty .)
    WRITE           reduce using rule 56 (exp1 -> empty .)
    RETURN          reduce using rule 56 (exp1 -> empty .)
    IF              reduce using rule 56 (exp1 -> empty .)
    WHILE           reduce using rule 56 (exp1 -> empty .)
    FOR             reduce using rule 56 (exp1 -> empty .)
    LEFTPAR         reduce using rule 56 (exp1 -> empty .)
    CTEINT          reduce using rule 56 (exp1 -> empty .)
    CTEFLOAT        reduce using rule 56 (exp1 -> empty .)
    CTECHAR         reduce using rule 56 (exp1 -> empty .)
    RIGHTBR         reduce using rule 56 (exp1 -> empty .)
    RIGHTPAR        reduce using rule 56 (exp1 -> empty .)
    RIGHTSQR        reduce using rule 56 (exp1 -> empty .)
    COMMA           reduce using rule 56 (exp1 -> empty .)
    SEMICOLON       reduce using rule 56 (exp1 -> empty .)
    TO              reduce using rule 56 (exp1 -> empty .)
    DO              reduce using rule 56 (exp1 -> empty .)


state 101

    (57) andexp -> boolexp andexp1 .

    OR              reduce using rule 57 (andexp -> boolexp andexp1 .)
    ID              reduce using rule 57 (andexp -> boolexp andexp1 .)
    READ            reduce using rule 57 (andexp -> boolexp andexp1 .)
    WRITE           reduce using rule 57 (andexp -> boolexp andexp1 .)
    RETURN          reduce using rule 57 (andexp -> boolexp andexp1 .)
    IF              reduce using rule 57 (andexp -> boolexp andexp1 .)
    WHILE           reduce using rule 57 (andexp -> boolexp andexp1 .)
    FOR             reduce using rule 57 (andexp -> boolexp andexp1 .)
    LEFTPAR         reduce using rule 57 (andexp -> boolexp andexp1 .)
    CTEINT          reduce using rule 57 (andexp -> boolexp andexp1 .)
    CTEFLOAT        reduce using rule 57 (andexp -> boolexp andexp1 .)
    CTECHAR         reduce using rule 57 (andexp -> boolexp andexp1 .)
    RIGHTBR         reduce using rule 57 (andexp -> boolexp andexp1 .)
    RIGHTPAR        reduce using rule 57 (andexp -> boolexp andexp1 .)
    RIGHTSQR        reduce using rule 57 (andexp -> boolexp andexp1 .)
    COMMA           reduce using rule 57 (andexp -> boolexp andexp1 .)
    SEMICOLON       reduce using rule 57 (andexp -> boolexp andexp1 .)
    TO              reduce using rule 57 (andexp -> boolexp andexp1 .)
    DO              reduce using rule 57 (andexp -> boolexp andexp1 .)


state 102

    (58) andexp1 -> AND . andexp
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    andexp                         shift and go to state 142
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 103

    (59) andexp1 -> empty .

    OR              reduce using rule 59 (andexp1 -> empty .)
    ID              reduce using rule 59 (andexp1 -> empty .)
    READ            reduce using rule 59 (andexp1 -> empty .)
    WRITE           reduce using rule 59 (andexp1 -> empty .)
    RETURN          reduce using rule 59 (andexp1 -> empty .)
    IF              reduce using rule 59 (andexp1 -> empty .)
    WHILE           reduce using rule 59 (andexp1 -> empty .)
    FOR             reduce using rule 59 (andexp1 -> empty .)
    LEFTPAR         reduce using rule 59 (andexp1 -> empty .)
    CTEINT          reduce using rule 59 (andexp1 -> empty .)
    CTEFLOAT        reduce using rule 59 (andexp1 -> empty .)
    CTECHAR         reduce using rule 59 (andexp1 -> empty .)
    RIGHTBR         reduce using rule 59 (andexp1 -> empty .)
    RIGHTPAR        reduce using rule 59 (andexp1 -> empty .)
    RIGHTSQR        reduce using rule 59 (andexp1 -> empty .)
    COMMA           reduce using rule 59 (andexp1 -> empty .)
    SEMICOLON       reduce using rule 59 (andexp1 -> empty .)
    TO              reduce using rule 59 (andexp1 -> empty .)
    DO              reduce using rule 59 (andexp1 -> empty .)


state 104

    (60) boolexp -> arithexp boolexp1 .

    AND             reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    OR              reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    ID              reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    READ            reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    WRITE           reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    RETURN          reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    IF              reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    WHILE           reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    FOR             reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    LEFTPAR         reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    CTEINT          reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    CTEFLOAT        reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    CTECHAR         reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    RIGHTBR         reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    RIGHTPAR        reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    RIGHTSQR        reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    COMMA           reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    SEMICOLON       reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    TO              reduce using rule 60 (boolexp -> arithexp boolexp1 .)
    DO              reduce using rule 60 (boolexp -> arithexp boolexp1 .)


state 105

    (61) boolexp1 -> GREATER . arithexp
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    arithexp                       shift and go to state 143
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 106

    (62) boolexp1 -> GREATERAND . arithexp
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    arithexp                       shift and go to state 144
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 107

    (63) boolexp1 -> LESSER . arithexp
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    arithexp                       shift and go to state 145
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 108

    (64) boolexp1 -> LESSERAND . arithexp
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    arithexp                       shift and go to state 146
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 109

    (65) boolexp1 -> SAME . arithexp
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    arithexp                       shift and go to state 147
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 110

    (66) boolexp1 -> NOTSAME . arithexp
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    arithexp                       shift and go to state 148
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 111

    (67) boolexp1 -> NOT . arithexp
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    arithexp                       shift and go to state 149
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 112

    (68) boolexp1 -> empty .

    AND             reduce using rule 68 (boolexp1 -> empty .)
    OR              reduce using rule 68 (boolexp1 -> empty .)
    ID              reduce using rule 68 (boolexp1 -> empty .)
    READ            reduce using rule 68 (boolexp1 -> empty .)
    WRITE           reduce using rule 68 (boolexp1 -> empty .)
    RETURN          reduce using rule 68 (boolexp1 -> empty .)
    IF              reduce using rule 68 (boolexp1 -> empty .)
    WHILE           reduce using rule 68 (boolexp1 -> empty .)
    FOR             reduce using rule 68 (boolexp1 -> empty .)
    LEFTPAR         reduce using rule 68 (boolexp1 -> empty .)
    CTEINT          reduce using rule 68 (boolexp1 -> empty .)
    CTEFLOAT        reduce using rule 68 (boolexp1 -> empty .)
    CTECHAR         reduce using rule 68 (boolexp1 -> empty .)
    RIGHTBR         reduce using rule 68 (boolexp1 -> empty .)
    RIGHTPAR        reduce using rule 68 (boolexp1 -> empty .)
    RIGHTSQR        reduce using rule 68 (boolexp1 -> empty .)
    COMMA           reduce using rule 68 (boolexp1 -> empty .)
    SEMICOLON       reduce using rule 68 (boolexp1 -> empty .)
    TO              reduce using rule 68 (boolexp1 -> empty .)
    DO              reduce using rule 68 (boolexp1 -> empty .)


state 113

    (69) arithexp -> geoexp arithexp1 .

    GREATER         reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    GREATERAND      reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    LESSER          reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    LESSERAND       reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    SAME            reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    NOTSAME         reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    NOT             reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    AND             reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    OR              reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    ID              reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    READ            reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    WRITE           reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    RETURN          reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    IF              reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    WHILE           reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    FOR             reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    LEFTPAR         reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    CTEINT          reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    CTEFLOAT        reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    CTECHAR         reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    RIGHTBR         reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    RIGHTPAR        reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    RIGHTSQR        reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    COMMA           reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    SEMICOLON       reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    TO              reduce using rule 69 (arithexp -> geoexp arithexp1 .)
    DO              reduce using rule 69 (arithexp -> geoexp arithexp1 .)


state 114

    (70) arithexp1 -> PLUS . arithexp
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    arithexp                       shift and go to state 150
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 115

    (71) arithexp1 -> REST . arithexp
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    arithexp                       shift and go to state 151
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 116

    (72) arithexp1 -> empty .

    GREATER         reduce using rule 72 (arithexp1 -> empty .)
    GREATERAND      reduce using rule 72 (arithexp1 -> empty .)
    LESSER          reduce using rule 72 (arithexp1 -> empty .)
    LESSERAND       reduce using rule 72 (arithexp1 -> empty .)
    SAME            reduce using rule 72 (arithexp1 -> empty .)
    NOTSAME         reduce using rule 72 (arithexp1 -> empty .)
    NOT             reduce using rule 72 (arithexp1 -> empty .)
    AND             reduce using rule 72 (arithexp1 -> empty .)
    OR              reduce using rule 72 (arithexp1 -> empty .)
    ID              reduce using rule 72 (arithexp1 -> empty .)
    READ            reduce using rule 72 (arithexp1 -> empty .)
    WRITE           reduce using rule 72 (arithexp1 -> empty .)
    RETURN          reduce using rule 72 (arithexp1 -> empty .)
    IF              reduce using rule 72 (arithexp1 -> empty .)
    WHILE           reduce using rule 72 (arithexp1 -> empty .)
    FOR             reduce using rule 72 (arithexp1 -> empty .)
    LEFTPAR         reduce using rule 72 (arithexp1 -> empty .)
    CTEINT          reduce using rule 72 (arithexp1 -> empty .)
    CTEFLOAT        reduce using rule 72 (arithexp1 -> empty .)
    CTECHAR         reduce using rule 72 (arithexp1 -> empty .)
    RIGHTBR         reduce using rule 72 (arithexp1 -> empty .)
    RIGHTPAR        reduce using rule 72 (arithexp1 -> empty .)
    RIGHTSQR        reduce using rule 72 (arithexp1 -> empty .)
    COMMA           reduce using rule 72 (arithexp1 -> empty .)
    SEMICOLON       reduce using rule 72 (arithexp1 -> empty .)
    TO              reduce using rule 72 (arithexp1 -> empty .)
    DO              reduce using rule 72 (arithexp1 -> empty .)


state 117

    (73) geoexp -> finexp geoexp1 .

    PLUS            reduce using rule 73 (geoexp -> finexp geoexp1 .)
    REST            reduce using rule 73 (geoexp -> finexp geoexp1 .)
    GREATER         reduce using rule 73 (geoexp -> finexp geoexp1 .)
    GREATERAND      reduce using rule 73 (geoexp -> finexp geoexp1 .)
    LESSER          reduce using rule 73 (geoexp -> finexp geoexp1 .)
    LESSERAND       reduce using rule 73 (geoexp -> finexp geoexp1 .)
    SAME            reduce using rule 73 (geoexp -> finexp geoexp1 .)
    NOTSAME         reduce using rule 73 (geoexp -> finexp geoexp1 .)
    NOT             reduce using rule 73 (geoexp -> finexp geoexp1 .)
    AND             reduce using rule 73 (geoexp -> finexp geoexp1 .)
    OR              reduce using rule 73 (geoexp -> finexp geoexp1 .)
    ID              reduce using rule 73 (geoexp -> finexp geoexp1 .)
    READ            reduce using rule 73 (geoexp -> finexp geoexp1 .)
    WRITE           reduce using rule 73 (geoexp -> finexp geoexp1 .)
    RETURN          reduce using rule 73 (geoexp -> finexp geoexp1 .)
    IF              reduce using rule 73 (geoexp -> finexp geoexp1 .)
    WHILE           reduce using rule 73 (geoexp -> finexp geoexp1 .)
    FOR             reduce using rule 73 (geoexp -> finexp geoexp1 .)
    LEFTPAR         reduce using rule 73 (geoexp -> finexp geoexp1 .)
    CTEINT          reduce using rule 73 (geoexp -> finexp geoexp1 .)
    CTEFLOAT        reduce using rule 73 (geoexp -> finexp geoexp1 .)
    CTECHAR         reduce using rule 73 (geoexp -> finexp geoexp1 .)
    RIGHTBR         reduce using rule 73 (geoexp -> finexp geoexp1 .)
    RIGHTPAR        reduce using rule 73 (geoexp -> finexp geoexp1 .)
    RIGHTSQR        reduce using rule 73 (geoexp -> finexp geoexp1 .)
    COMMA           reduce using rule 73 (geoexp -> finexp geoexp1 .)
    SEMICOLON       reduce using rule 73 (geoexp -> finexp geoexp1 .)
    TO              reduce using rule 73 (geoexp -> finexp geoexp1 .)
    DO              reduce using rule 73 (geoexp -> finexp geoexp1 .)


state 118

    (74) geoexp1 -> TIMES . geoexp
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    geoexp                         shift and go to state 152
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 119

    (75) geoexp1 -> DIVIDE . geoexp
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    geoexp                         shift and go to state 153
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 120

    (76) geoexp1 -> empty .

    PLUS            reduce using rule 76 (geoexp1 -> empty .)
    REST            reduce using rule 76 (geoexp1 -> empty .)
    GREATER         reduce using rule 76 (geoexp1 -> empty .)
    GREATERAND      reduce using rule 76 (geoexp1 -> empty .)
    LESSER          reduce using rule 76 (geoexp1 -> empty .)
    LESSERAND       reduce using rule 76 (geoexp1 -> empty .)
    SAME            reduce using rule 76 (geoexp1 -> empty .)
    NOTSAME         reduce using rule 76 (geoexp1 -> empty .)
    NOT             reduce using rule 76 (geoexp1 -> empty .)
    AND             reduce using rule 76 (geoexp1 -> empty .)
    OR              reduce using rule 76 (geoexp1 -> empty .)
    ID              reduce using rule 76 (geoexp1 -> empty .)
    READ            reduce using rule 76 (geoexp1 -> empty .)
    WRITE           reduce using rule 76 (geoexp1 -> empty .)
    RETURN          reduce using rule 76 (geoexp1 -> empty .)
    IF              reduce using rule 76 (geoexp1 -> empty .)
    WHILE           reduce using rule 76 (geoexp1 -> empty .)
    FOR             reduce using rule 76 (geoexp1 -> empty .)
    LEFTPAR         reduce using rule 76 (geoexp1 -> empty .)
    CTEINT          reduce using rule 76 (geoexp1 -> empty .)
    CTEFLOAT        reduce using rule 76 (geoexp1 -> empty .)
    CTECHAR         reduce using rule 76 (geoexp1 -> empty .)
    RIGHTBR         reduce using rule 76 (geoexp1 -> empty .)
    RIGHTPAR        reduce using rule 76 (geoexp1 -> empty .)
    RIGHTSQR        reduce using rule 76 (geoexp1 -> empty .)
    COMMA           reduce using rule 76 (geoexp1 -> empty .)
    SEMICOLON       reduce using rule 76 (geoexp1 -> empty .)
    TO              reduce using rule 76 (geoexp1 -> empty .)
    DO              reduce using rule 76 (geoexp1 -> empty .)


state 121

    (15) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON . varsgl LEFTBR statutes RIGHTBR modules
    (3) varsgl -> . VARS vars
    (4) varsgl -> . empty
    (89) empty -> .

    VARS            shift and go to state 7
    LEFTBR          reduce using rule 89 (empty -> .)

    varsgl                         shift and go to state 154
    empty                          shift and go to state 8

state 122

    (19) parameters -> typing COLON ID . idarray mulparams
    (52) idarray -> . LEFTSQR exp RIGHTSQR
    (53) idarray -> . empty
    (89) empty -> .

    LEFTSQR         shift and go to state 75
    COMMA           reduce using rule 89 (empty -> .)
    RIGHTPAR        reduce using rule 89 (empty -> .)

    idarray                        shift and go to state 155
    empty                          shift and go to state 76

state 123

    (9) varsmul -> COMMA ID varsarr . varsmul
    (9) varsmul -> . COMMA ID varsarr varsmul
    (10) varsmul -> . SEMICOLON

    COMMA           shift and go to state 37
    SEMICOLON       shift and go to state 38

    varsmul                        shift and go to state 156

state 124

    (35) assign -> ID idarray EQUAL . exp SEMICOLON
    (54) exp -> . andexp exp1
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    exp                            shift and go to state 157
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 125

    (52) idarray -> LEFTSQR exp . RIGHTSQR

    RIGHTSQR        shift and go to state 158


state 126

    (83) paramsexp -> LEFTPAR paramsexp2 . RIGHTPAR

    RIGHTPAR        shift and go to state 159


state 127

    (85) paramsexp2 -> exp . auxparamsexp2
    (87) auxparamsexp2 -> . COMMA exp auxparamsexp2
    (88) auxparamsexp2 -> . empty
    (89) empty -> .

    COMMA           shift and go to state 161
    RIGHTPAR        reduce using rule 89 (empty -> .)

    auxparamsexp2                  shift and go to state 160
    empty                          shift and go to state 162

state 128

    (86) paramsexp2 -> empty .

    RIGHTPAR        reduce using rule 86 (paramsexp2 -> empty .)


state 129

    (77) finexp -> LEFTPAR exp RIGHTPAR .

    TIMES           reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    DIVIDE          reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    PLUS            reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    REST            reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    GREATER         reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    GREATERAND      reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    LESSER          reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    LESSERAND       reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    SAME            reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    NOTSAME         reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    NOT             reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    AND             reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    OR              reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    ID              reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    READ            reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    WRITE           reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    RETURN          reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    IF              reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    WHILE           reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    FOR             reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    LEFTPAR         reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    CTEINT          reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    CTEFLOAT        reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    CTECHAR         reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    RIGHTBR         reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    RIGHTPAR        reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    RIGHTSQR        reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    COMMA           reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    SEMICOLON       reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    TO              reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)
    DO              reduce using rule 77 (finexp -> LEFTPAR exp RIGHTPAR .)


state 130

    (84) paramsexp -> idarray .

    TIMES           reduce using rule 84 (paramsexp -> idarray .)
    DIVIDE          reduce using rule 84 (paramsexp -> idarray .)
    PLUS            reduce using rule 84 (paramsexp -> idarray .)
    REST            reduce using rule 84 (paramsexp -> idarray .)
    GREATER         reduce using rule 84 (paramsexp -> idarray .)
    GREATERAND      reduce using rule 84 (paramsexp -> idarray .)
    LESSER          reduce using rule 84 (paramsexp -> idarray .)
    LESSERAND       reduce using rule 84 (paramsexp -> idarray .)
    SAME            reduce using rule 84 (paramsexp -> idarray .)
    NOTSAME         reduce using rule 84 (paramsexp -> idarray .)
    NOT             reduce using rule 84 (paramsexp -> idarray .)
    AND             reduce using rule 84 (paramsexp -> idarray .)
    OR              reduce using rule 84 (paramsexp -> idarray .)
    RIGHTPAR        reduce using rule 84 (paramsexp -> idarray .)
    RIGHTSQR        reduce using rule 84 (paramsexp -> idarray .)
    COMMA           reduce using rule 84 (paramsexp -> idarray .)
    ID              reduce using rule 84 (paramsexp -> idarray .)
    READ            reduce using rule 84 (paramsexp -> idarray .)
    WRITE           reduce using rule 84 (paramsexp -> idarray .)
    RETURN          reduce using rule 84 (paramsexp -> idarray .)
    IF              reduce using rule 84 (paramsexp -> idarray .)
    WHILE           reduce using rule 84 (paramsexp -> idarray .)
    FOR             reduce using rule 84 (paramsexp -> idarray .)
    LEFTPAR         reduce using rule 84 (paramsexp -> idarray .)
    CTEINT          reduce using rule 84 (paramsexp -> idarray .)
    CTEFLOAT        reduce using rule 84 (paramsexp -> idarray .)
    CTECHAR         reduce using rule 84 (paramsexp -> idarray .)
    RIGHTBR         reduce using rule 84 (paramsexp -> idarray .)
    SEMICOLON       reduce using rule 84 (paramsexp -> idarray .)
    TO              reduce using rule 84 (paramsexp -> idarray .)
    DO              reduce using rule 84 (paramsexp -> idarray .)


state 131

    (43) reading -> READ LEFTPAR ID . idarray mulread RIGHTPAR SEMICOLON
    (52) idarray -> . LEFTSQR exp RIGHTSQR
    (53) idarray -> . empty
    (89) empty -> .

    LEFTSQR         shift and go to state 75
    COMMA           reduce using rule 89 (empty -> .)
    RIGHTPAR        reduce using rule 89 (empty -> .)

    idarray                        shift and go to state 163
    empty                          shift and go to state 76

state 132

    (36) writing -> WRITE LEFTPAR auxwrite . mulwrite RIGHTPAR SEMICOLON
    (41) mulwrite -> . COMMA auxwrite mulwrite
    (42) mulwrite -> . empty
    (89) empty -> .

    COMMA           shift and go to state 165
    RIGHTPAR        reduce using rule 89 (empty -> .)

    mulwrite                       shift and go to state 164
    empty                          shift and go to state 166

state 133

    (37) auxwrite -> writetyping .

    COMMA           reduce using rule 37 (auxwrite -> writetyping .)
    RIGHTPAR        reduce using rule 37 (auxwrite -> writetyping .)


state 134

    (38) auxwrite -> exp .

    COMMA           reduce using rule 38 (auxwrite -> exp .)
    RIGHTPAR        reduce using rule 38 (auxwrite -> exp .)


state 135

    (39) writetyping -> STRING .

    COMMA           reduce using rule 39 (writetyping -> STRING .)
    RIGHTPAR        reduce using rule 39 (writetyping -> STRING .)


state 136

    (40) writetyping -> CTECHAR .
    (81) cteexp -> CTECHAR .

  ! reduce/reduce conflict for COMMA resolved using rule 40 (writetyping -> CTECHAR .)
  ! reduce/reduce conflict for RIGHTPAR resolved using rule 40 (writetyping -> CTECHAR .)
    COMMA           reduce using rule 40 (writetyping -> CTECHAR .)
    RIGHTPAR        reduce using rule 40 (writetyping -> CTECHAR .)
    TIMES           reduce using rule 81 (cteexp -> CTECHAR .)
    DIVIDE          reduce using rule 81 (cteexp -> CTECHAR .)
    PLUS            reduce using rule 81 (cteexp -> CTECHAR .)
    REST            reduce using rule 81 (cteexp -> CTECHAR .)
    GREATER         reduce using rule 81 (cteexp -> CTECHAR .)
    GREATERAND      reduce using rule 81 (cteexp -> CTECHAR .)
    LESSER          reduce using rule 81 (cteexp -> CTECHAR .)
    LESSERAND       reduce using rule 81 (cteexp -> CTECHAR .)
    SAME            reduce using rule 81 (cteexp -> CTECHAR .)
    NOTSAME         reduce using rule 81 (cteexp -> CTECHAR .)
    NOT             reduce using rule 81 (cteexp -> CTECHAR .)
    AND             reduce using rule 81 (cteexp -> CTECHAR .)
    OR              reduce using rule 81 (cteexp -> CTECHAR .)

  ! COMMA           [ reduce using rule 81 (cteexp -> CTECHAR .) ]
  ! RIGHTPAR        [ reduce using rule 81 (cteexp -> CTECHAR .) ]


state 137

    (46) returning -> RETURN LEFTPAR exp . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 167


state 138

    (47) ifing -> IF LEFTPAR exp . RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing

    RIGHTPAR        shift and go to state 168


state 139

    (50) whiling -> WHILE LEFTPAR exp . RIGHTPAR DO LEFTBR statutes RIGHTBR

    RIGHTPAR        shift and go to state 169


state 140

    (51) foring -> FOR ID idarray . EQUAL exp TO exp DO LEFTBR statutes RIGHTBR

    EQUAL           shift and go to state 170


state 141

    (55) exp1 -> OR exp .

    ID              reduce using rule 55 (exp1 -> OR exp .)
    READ            reduce using rule 55 (exp1 -> OR exp .)
    WRITE           reduce using rule 55 (exp1 -> OR exp .)
    RETURN          reduce using rule 55 (exp1 -> OR exp .)
    IF              reduce using rule 55 (exp1 -> OR exp .)
    WHILE           reduce using rule 55 (exp1 -> OR exp .)
    FOR             reduce using rule 55 (exp1 -> OR exp .)
    LEFTPAR         reduce using rule 55 (exp1 -> OR exp .)
    CTEINT          reduce using rule 55 (exp1 -> OR exp .)
    CTEFLOAT        reduce using rule 55 (exp1 -> OR exp .)
    CTECHAR         reduce using rule 55 (exp1 -> OR exp .)
    RIGHTBR         reduce using rule 55 (exp1 -> OR exp .)
    RIGHTPAR        reduce using rule 55 (exp1 -> OR exp .)
    RIGHTSQR        reduce using rule 55 (exp1 -> OR exp .)
    COMMA           reduce using rule 55 (exp1 -> OR exp .)
    SEMICOLON       reduce using rule 55 (exp1 -> OR exp .)
    TO              reduce using rule 55 (exp1 -> OR exp .)
    DO              reduce using rule 55 (exp1 -> OR exp .)


state 142

    (58) andexp1 -> AND andexp .

    OR              reduce using rule 58 (andexp1 -> AND andexp .)
    ID              reduce using rule 58 (andexp1 -> AND andexp .)
    READ            reduce using rule 58 (andexp1 -> AND andexp .)
    WRITE           reduce using rule 58 (andexp1 -> AND andexp .)
    RETURN          reduce using rule 58 (andexp1 -> AND andexp .)
    IF              reduce using rule 58 (andexp1 -> AND andexp .)
    WHILE           reduce using rule 58 (andexp1 -> AND andexp .)
    FOR             reduce using rule 58 (andexp1 -> AND andexp .)
    LEFTPAR         reduce using rule 58 (andexp1 -> AND andexp .)
    CTEINT          reduce using rule 58 (andexp1 -> AND andexp .)
    CTEFLOAT        reduce using rule 58 (andexp1 -> AND andexp .)
    CTECHAR         reduce using rule 58 (andexp1 -> AND andexp .)
    RIGHTBR         reduce using rule 58 (andexp1 -> AND andexp .)
    RIGHTPAR        reduce using rule 58 (andexp1 -> AND andexp .)
    RIGHTSQR        reduce using rule 58 (andexp1 -> AND andexp .)
    COMMA           reduce using rule 58 (andexp1 -> AND andexp .)
    SEMICOLON       reduce using rule 58 (andexp1 -> AND andexp .)
    TO              reduce using rule 58 (andexp1 -> AND andexp .)
    DO              reduce using rule 58 (andexp1 -> AND andexp .)


state 143

    (61) boolexp1 -> GREATER arithexp .

    AND             reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    OR              reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    ID              reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    READ            reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    WRITE           reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    RETURN          reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    IF              reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    WHILE           reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    FOR             reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    LEFTPAR         reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    CTEINT          reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    CTEFLOAT        reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    CTECHAR         reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    RIGHTBR         reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    RIGHTPAR        reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    RIGHTSQR        reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    COMMA           reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    SEMICOLON       reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    TO              reduce using rule 61 (boolexp1 -> GREATER arithexp .)
    DO              reduce using rule 61 (boolexp1 -> GREATER arithexp .)


state 144

    (62) boolexp1 -> GREATERAND arithexp .

    AND             reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    OR              reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    ID              reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    READ            reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    WRITE           reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    RETURN          reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    IF              reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    WHILE           reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    FOR             reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    LEFTPAR         reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    CTEINT          reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    CTEFLOAT        reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    CTECHAR         reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    RIGHTBR         reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    RIGHTPAR        reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    RIGHTSQR        reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    COMMA           reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    SEMICOLON       reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    TO              reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)
    DO              reduce using rule 62 (boolexp1 -> GREATERAND arithexp .)


state 145

    (63) boolexp1 -> LESSER arithexp .

    AND             reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    OR              reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    ID              reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    READ            reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    WRITE           reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    RETURN          reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    IF              reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    WHILE           reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    FOR             reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    LEFTPAR         reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    CTEINT          reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    CTEFLOAT        reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    CTECHAR         reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    RIGHTBR         reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    RIGHTPAR        reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    RIGHTSQR        reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    COMMA           reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    SEMICOLON       reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    TO              reduce using rule 63 (boolexp1 -> LESSER arithexp .)
    DO              reduce using rule 63 (boolexp1 -> LESSER arithexp .)


state 146

    (64) boolexp1 -> LESSERAND arithexp .

    AND             reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    OR              reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    ID              reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    READ            reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    WRITE           reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    RETURN          reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    IF              reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    WHILE           reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    FOR             reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    LEFTPAR         reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    CTEINT          reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    CTEFLOAT        reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    CTECHAR         reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    RIGHTBR         reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    RIGHTPAR        reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    RIGHTSQR        reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    COMMA           reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    SEMICOLON       reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    TO              reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)
    DO              reduce using rule 64 (boolexp1 -> LESSERAND arithexp .)


state 147

    (65) boolexp1 -> SAME arithexp .

    AND             reduce using rule 65 (boolexp1 -> SAME arithexp .)
    OR              reduce using rule 65 (boolexp1 -> SAME arithexp .)
    ID              reduce using rule 65 (boolexp1 -> SAME arithexp .)
    READ            reduce using rule 65 (boolexp1 -> SAME arithexp .)
    WRITE           reduce using rule 65 (boolexp1 -> SAME arithexp .)
    RETURN          reduce using rule 65 (boolexp1 -> SAME arithexp .)
    IF              reduce using rule 65 (boolexp1 -> SAME arithexp .)
    WHILE           reduce using rule 65 (boolexp1 -> SAME arithexp .)
    FOR             reduce using rule 65 (boolexp1 -> SAME arithexp .)
    LEFTPAR         reduce using rule 65 (boolexp1 -> SAME arithexp .)
    CTEINT          reduce using rule 65 (boolexp1 -> SAME arithexp .)
    CTEFLOAT        reduce using rule 65 (boolexp1 -> SAME arithexp .)
    CTECHAR         reduce using rule 65 (boolexp1 -> SAME arithexp .)
    RIGHTBR         reduce using rule 65 (boolexp1 -> SAME arithexp .)
    RIGHTPAR        reduce using rule 65 (boolexp1 -> SAME arithexp .)
    RIGHTSQR        reduce using rule 65 (boolexp1 -> SAME arithexp .)
    COMMA           reduce using rule 65 (boolexp1 -> SAME arithexp .)
    SEMICOLON       reduce using rule 65 (boolexp1 -> SAME arithexp .)
    TO              reduce using rule 65 (boolexp1 -> SAME arithexp .)
    DO              reduce using rule 65 (boolexp1 -> SAME arithexp .)


state 148

    (66) boolexp1 -> NOTSAME arithexp .

    AND             reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    OR              reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    ID              reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    READ            reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    WRITE           reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    RETURN          reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    IF              reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    WHILE           reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    FOR             reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    LEFTPAR         reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    CTEINT          reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    CTEFLOAT        reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    CTECHAR         reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    RIGHTBR         reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    RIGHTPAR        reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    RIGHTSQR        reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    COMMA           reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    SEMICOLON       reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    TO              reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)
    DO              reduce using rule 66 (boolexp1 -> NOTSAME arithexp .)


state 149

    (67) boolexp1 -> NOT arithexp .

    AND             reduce using rule 67 (boolexp1 -> NOT arithexp .)
    OR              reduce using rule 67 (boolexp1 -> NOT arithexp .)
    ID              reduce using rule 67 (boolexp1 -> NOT arithexp .)
    READ            reduce using rule 67 (boolexp1 -> NOT arithexp .)
    WRITE           reduce using rule 67 (boolexp1 -> NOT arithexp .)
    RETURN          reduce using rule 67 (boolexp1 -> NOT arithexp .)
    IF              reduce using rule 67 (boolexp1 -> NOT arithexp .)
    WHILE           reduce using rule 67 (boolexp1 -> NOT arithexp .)
    FOR             reduce using rule 67 (boolexp1 -> NOT arithexp .)
    LEFTPAR         reduce using rule 67 (boolexp1 -> NOT arithexp .)
    CTEINT          reduce using rule 67 (boolexp1 -> NOT arithexp .)
    CTEFLOAT        reduce using rule 67 (boolexp1 -> NOT arithexp .)
    CTECHAR         reduce using rule 67 (boolexp1 -> NOT arithexp .)
    RIGHTBR         reduce using rule 67 (boolexp1 -> NOT arithexp .)
    RIGHTPAR        reduce using rule 67 (boolexp1 -> NOT arithexp .)
    RIGHTSQR        reduce using rule 67 (boolexp1 -> NOT arithexp .)
    COMMA           reduce using rule 67 (boolexp1 -> NOT arithexp .)
    SEMICOLON       reduce using rule 67 (boolexp1 -> NOT arithexp .)
    TO              reduce using rule 67 (boolexp1 -> NOT arithexp .)
    DO              reduce using rule 67 (boolexp1 -> NOT arithexp .)


state 150

    (70) arithexp1 -> PLUS arithexp .

    GREATER         reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    GREATERAND      reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    LESSER          reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    LESSERAND       reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    SAME            reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    NOTSAME         reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    NOT             reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    AND             reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    OR              reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    ID              reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    READ            reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    WRITE           reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    RETURN          reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    IF              reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    WHILE           reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    FOR             reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    LEFTPAR         reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    CTEINT          reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    CTEFLOAT        reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    CTECHAR         reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    RIGHTBR         reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    RIGHTPAR        reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    RIGHTSQR        reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    COMMA           reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    SEMICOLON       reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    TO              reduce using rule 70 (arithexp1 -> PLUS arithexp .)
    DO              reduce using rule 70 (arithexp1 -> PLUS arithexp .)


state 151

    (71) arithexp1 -> REST arithexp .

    GREATER         reduce using rule 71 (arithexp1 -> REST arithexp .)
    GREATERAND      reduce using rule 71 (arithexp1 -> REST arithexp .)
    LESSER          reduce using rule 71 (arithexp1 -> REST arithexp .)
    LESSERAND       reduce using rule 71 (arithexp1 -> REST arithexp .)
    SAME            reduce using rule 71 (arithexp1 -> REST arithexp .)
    NOTSAME         reduce using rule 71 (arithexp1 -> REST arithexp .)
    NOT             reduce using rule 71 (arithexp1 -> REST arithexp .)
    AND             reduce using rule 71 (arithexp1 -> REST arithexp .)
    OR              reduce using rule 71 (arithexp1 -> REST arithexp .)
    ID              reduce using rule 71 (arithexp1 -> REST arithexp .)
    READ            reduce using rule 71 (arithexp1 -> REST arithexp .)
    WRITE           reduce using rule 71 (arithexp1 -> REST arithexp .)
    RETURN          reduce using rule 71 (arithexp1 -> REST arithexp .)
    IF              reduce using rule 71 (arithexp1 -> REST arithexp .)
    WHILE           reduce using rule 71 (arithexp1 -> REST arithexp .)
    FOR             reduce using rule 71 (arithexp1 -> REST arithexp .)
    LEFTPAR         reduce using rule 71 (arithexp1 -> REST arithexp .)
    CTEINT          reduce using rule 71 (arithexp1 -> REST arithexp .)
    CTEFLOAT        reduce using rule 71 (arithexp1 -> REST arithexp .)
    CTECHAR         reduce using rule 71 (arithexp1 -> REST arithexp .)
    RIGHTBR         reduce using rule 71 (arithexp1 -> REST arithexp .)
    RIGHTPAR        reduce using rule 71 (arithexp1 -> REST arithexp .)
    RIGHTSQR        reduce using rule 71 (arithexp1 -> REST arithexp .)
    COMMA           reduce using rule 71 (arithexp1 -> REST arithexp .)
    SEMICOLON       reduce using rule 71 (arithexp1 -> REST arithexp .)
    TO              reduce using rule 71 (arithexp1 -> REST arithexp .)
    DO              reduce using rule 71 (arithexp1 -> REST arithexp .)


state 152

    (74) geoexp1 -> TIMES geoexp .

    PLUS            reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    REST            reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    GREATER         reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    GREATERAND      reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    LESSER          reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    LESSERAND       reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    SAME            reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    NOTSAME         reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    NOT             reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    AND             reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    OR              reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    ID              reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    READ            reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    WRITE           reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    RETURN          reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    IF              reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    WHILE           reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    FOR             reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    LEFTPAR         reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    CTEINT          reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    CTEFLOAT        reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    CTECHAR         reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    RIGHTBR         reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    RIGHTPAR        reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    RIGHTSQR        reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    COMMA           reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    SEMICOLON       reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    TO              reduce using rule 74 (geoexp1 -> TIMES geoexp .)
    DO              reduce using rule 74 (geoexp1 -> TIMES geoexp .)


state 153

    (75) geoexp1 -> DIVIDE geoexp .

    PLUS            reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    REST            reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    GREATER         reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    GREATERAND      reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    LESSER          reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    LESSERAND       reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    SAME            reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    NOTSAME         reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    NOT             reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    AND             reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    OR              reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    ID              reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    READ            reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    WRITE           reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    RETURN          reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    IF              reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    WHILE           reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    FOR             reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    LEFTPAR         reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    CTEINT          reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    CTEFLOAT        reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    CTECHAR         reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    RIGHTBR         reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    RIGHTPAR        reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    RIGHTSQR        reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    COMMA           reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    SEMICOLON       reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    TO              reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)
    DO              reduce using rule 75 (geoexp1 -> DIVIDE geoexp .)


state 154

    (15) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl . LEFTBR statutes RIGHTBR modules

    LEFTBR          shift and go to state 171


state 155

    (19) parameters -> typing COLON ID idarray . mulparams
    (21) mulparams -> . COMMA parameters
    (22) mulparams -> . empty
    (89) empty -> .

    COMMA           shift and go to state 173
    RIGHTPAR        reduce using rule 89 (empty -> .)

    mulparams                      shift and go to state 172
    empty                          shift and go to state 174

state 156

    (9) varsmul -> COMMA ID varsarr varsmul .

    INT             reduce using rule 9 (varsmul -> COMMA ID varsarr varsmul .)
    FLOAT           reduce using rule 9 (varsmul -> COMMA ID varsarr varsmul .)
    CHAR            reduce using rule 9 (varsmul -> COMMA ID varsarr varsmul .)
    FUNCTION        reduce using rule 9 (varsmul -> COMMA ID varsarr varsmul .)
    MAIN            reduce using rule 9 (varsmul -> COMMA ID varsarr varsmul .)
    LEFTBR          reduce using rule 9 (varsmul -> COMMA ID varsarr varsmul .)


state 157

    (35) assign -> ID idarray EQUAL exp . SEMICOLON

    SEMICOLON       shift and go to state 175


state 158

    (52) idarray -> LEFTSQR exp RIGHTSQR .

    EQUAL           reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    TIMES           reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    DIVIDE          reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    PLUS            reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    REST            reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    GREATER         reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    GREATERAND      reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    LESSER          reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    LESSERAND       reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    SAME            reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    NOTSAME         reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    NOT             reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    AND             reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    OR              reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    ID              reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    READ            reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    WRITE           reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    RETURN          reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    IF              reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    WHILE           reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    FOR             reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    LEFTPAR         reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    CTEINT          reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    CTEFLOAT        reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    CTECHAR         reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    RIGHTBR         reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    RIGHTPAR        reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    RIGHTSQR        reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    COMMA           reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    SEMICOLON       reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    TO              reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)
    DO              reduce using rule 52 (idarray -> LEFTSQR exp RIGHTSQR .)


state 159

    (83) paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .

    TIMES           reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    DIVIDE          reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    PLUS            reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    REST            reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    GREATER         reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    GREATERAND      reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    LESSER          reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    LESSERAND       reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    SAME            reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    NOTSAME         reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    NOT             reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    AND             reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    OR              reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    ID              reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    READ            reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    WRITE           reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    RETURN          reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    IF              reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    WHILE           reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    FOR             reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    LEFTPAR         reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    CTEINT          reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    CTEFLOAT        reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    CTECHAR         reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    RIGHTBR         reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    RIGHTPAR        reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    RIGHTSQR        reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    COMMA           reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    SEMICOLON       reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    TO              reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    DO              reduce using rule 83 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)


state 160

    (85) paramsexp2 -> exp auxparamsexp2 .

    RIGHTPAR        reduce using rule 85 (paramsexp2 -> exp auxparamsexp2 .)


state 161

    (87) auxparamsexp2 -> COMMA . exp auxparamsexp2
    (54) exp -> . andexp exp1
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    exp                            shift and go to state 176
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 162

    (88) auxparamsexp2 -> empty .

    RIGHTPAR        reduce using rule 88 (auxparamsexp2 -> empty .)


state 163

    (43) reading -> READ LEFTPAR ID idarray . mulread RIGHTPAR SEMICOLON
    (44) mulread -> . COMMA ID idarray mulread
    (45) mulread -> . empty
    (89) empty -> .

    COMMA           shift and go to state 178
    RIGHTPAR        reduce using rule 89 (empty -> .)

    mulread                        shift and go to state 177
    empty                          shift and go to state 179

state 164

    (36) writing -> WRITE LEFTPAR auxwrite mulwrite . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 180


state 165

    (41) mulwrite -> COMMA . auxwrite mulwrite
    (37) auxwrite -> . writetyping
    (38) auxwrite -> . exp
    (39) writetyping -> . STRING
    (40) writetyping -> . CTECHAR
    (54) exp -> . andexp exp1
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    STRING          shift and go to state 135
    CTECHAR         shift and go to state 136
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    ID              shift and go to state 79

    auxwrite                       shift and go to state 181
    writetyping                    shift and go to state 133
    exp                            shift and go to state 134
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 166

    (42) mulwrite -> empty .

    RIGHTPAR        reduce using rule 42 (mulwrite -> empty .)


state 167

    (46) returning -> RETURN LEFTPAR exp RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 182


state 168

    (47) ifing -> IF LEFTPAR exp RIGHTPAR . THEN LEFTBR statutes RIGHTBR elsing

    THEN            shift and go to state 183


state 169

    (50) whiling -> WHILE LEFTPAR exp RIGHTPAR . DO LEFTBR statutes RIGHTBR

    DO              shift and go to state 184


state 170

    (51) foring -> FOR ID idarray EQUAL . exp TO exp DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    exp                            shift and go to state 185
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 171

    (15) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR . statutes RIGHTBR modules
    (23) statutes -> . assign statutesaux
    (24) statutes -> . reading statutesaux
    (25) statutes -> . writing statutesaux
    (26) statutes -> . returning statutesaux
    (27) statutes -> . ifing statutesaux
    (28) statutes -> . whiling statutesaux
    (29) statutes -> . foring statutesaux
    (30) statutes -> . exp statutesaux
    (31) statutes -> . specialfunc statutesaux
    (35) assign -> . ID idarray EQUAL exp SEMICOLON
    (43) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (36) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (46) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (47) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (50) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (51) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (34) specialfunc -> . empty
    (57) andexp -> . boolexp andexp1
    (89) empty -> .
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 40
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    RIGHTBR         reduce using rule 89 (empty -> .)
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! READ            [ reduce using rule 89 (empty -> .) ]
  ! WRITE           [ reduce using rule 89 (empty -> .) ]
  ! RETURN          [ reduce using rule 89 (empty -> .) ]
  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 89 (empty -> .) ]
  ! CTEINT          [ reduce using rule 89 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 89 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 89 (empty -> .) ]

    statutes                       shift and go to state 186
    assign                         shift and go to state 43
    reading                        shift and go to state 44
    writing                        shift and go to state 45
    returning                      shift and go to state 46
    ifing                          shift and go to state 47
    whiling                        shift and go to state 48
    foring                         shift and go to state 49
    exp                            shift and go to state 50
    specialfunc                    shift and go to state 51
    andexp                         shift and go to state 58
    empty                          shift and go to state 59
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 172

    (19) parameters -> typing COLON ID idarray mulparams .

    RIGHTPAR        reduce using rule 19 (parameters -> typing COLON ID idarray mulparams .)


state 173

    (21) mulparams -> COMMA . parameters
    (19) parameters -> . typing COLON ID idarray mulparams
    (20) parameters -> . empty
    (16) typing -> . INT
    (17) typing -> . FLOAT
    (18) typing -> . CHAR
    (89) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    RIGHTPAR        reduce using rule 89 (empty -> .)

    parameters                     shift and go to state 187
    typing                         shift and go to state 34
    empty                          shift and go to state 35

state 174

    (22) mulparams -> empty .

    RIGHTPAR        reduce using rule 22 (mulparams -> empty .)


state 175

    (35) assign -> ID idarray EQUAL exp SEMICOLON .

    ID              reduce using rule 35 (assign -> ID idarray EQUAL exp SEMICOLON .)
    READ            reduce using rule 35 (assign -> ID idarray EQUAL exp SEMICOLON .)
    WRITE           reduce using rule 35 (assign -> ID idarray EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 35 (assign -> ID idarray EQUAL exp SEMICOLON .)
    IF              reduce using rule 35 (assign -> ID idarray EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 35 (assign -> ID idarray EQUAL exp SEMICOLON .)
    FOR             reduce using rule 35 (assign -> ID idarray EQUAL exp SEMICOLON .)
    LEFTPAR         reduce using rule 35 (assign -> ID idarray EQUAL exp SEMICOLON .)
    CTEINT          reduce using rule 35 (assign -> ID idarray EQUAL exp SEMICOLON .)
    CTEFLOAT        reduce using rule 35 (assign -> ID idarray EQUAL exp SEMICOLON .)
    CTECHAR         reduce using rule 35 (assign -> ID idarray EQUAL exp SEMICOLON .)
    RIGHTBR         reduce using rule 35 (assign -> ID idarray EQUAL exp SEMICOLON .)


state 176

    (87) auxparamsexp2 -> COMMA exp . auxparamsexp2
    (87) auxparamsexp2 -> . COMMA exp auxparamsexp2
    (88) auxparamsexp2 -> . empty
    (89) empty -> .

    COMMA           shift and go to state 161
    RIGHTPAR        reduce using rule 89 (empty -> .)

    auxparamsexp2                  shift and go to state 188
    empty                          shift and go to state 162

state 177

    (43) reading -> READ LEFTPAR ID idarray mulread . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 189


state 178

    (44) mulread -> COMMA . ID idarray mulread

    ID              shift and go to state 190


state 179

    (45) mulread -> empty .

    RIGHTPAR        reduce using rule 45 (mulread -> empty .)


state 180

    (36) writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 191


state 181

    (41) mulwrite -> COMMA auxwrite . mulwrite
    (41) mulwrite -> . COMMA auxwrite mulwrite
    (42) mulwrite -> . empty
    (89) empty -> .

    COMMA           shift and go to state 165
    RIGHTPAR        reduce using rule 89 (empty -> .)

    mulwrite                       shift and go to state 192
    empty                          shift and go to state 166

state 182

    (46) returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .

    ID              reduce using rule 46 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    READ            reduce using rule 46 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 46 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 46 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    IF              reduce using rule 46 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 46 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 46 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    LEFTPAR         reduce using rule 46 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    CTEINT          reduce using rule 46 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    CTEFLOAT        reduce using rule 46 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    CTECHAR         reduce using rule 46 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    RIGHTBR         reduce using rule 46 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)


state 183

    (47) ifing -> IF LEFTPAR exp RIGHTPAR THEN . LEFTBR statutes RIGHTBR elsing

    LEFTBR          shift and go to state 193


state 184

    (50) whiling -> WHILE LEFTPAR exp RIGHTPAR DO . LEFTBR statutes RIGHTBR

    LEFTBR          shift and go to state 194


state 185

    (51) foring -> FOR ID idarray EQUAL exp . TO exp DO LEFTBR statutes RIGHTBR

    TO              shift and go to state 195


state 186

    (15) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes . RIGHTBR modules

    RIGHTBR         shift and go to state 196


state 187

    (21) mulparams -> COMMA parameters .

    RIGHTPAR        reduce using rule 21 (mulparams -> COMMA parameters .)


state 188

    (87) auxparamsexp2 -> COMMA exp auxparamsexp2 .

    RIGHTPAR        reduce using rule 87 (auxparamsexp2 -> COMMA exp auxparamsexp2 .)


state 189

    (43) reading -> READ LEFTPAR ID idarray mulread RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 197


state 190

    (44) mulread -> COMMA ID . idarray mulread
    (52) idarray -> . LEFTSQR exp RIGHTSQR
    (53) idarray -> . empty
    (89) empty -> .

    LEFTSQR         shift and go to state 75
    COMMA           reduce using rule 89 (empty -> .)
    RIGHTPAR        reduce using rule 89 (empty -> .)

    idarray                        shift and go to state 198
    empty                          shift and go to state 76

state 191

    (36) writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .

    ID              reduce using rule 36 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    READ            reduce using rule 36 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 36 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 36 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    IF              reduce using rule 36 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 36 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 36 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    LEFTPAR         reduce using rule 36 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    CTEINT          reduce using rule 36 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    CTEFLOAT        reduce using rule 36 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    CTECHAR         reduce using rule 36 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    RIGHTBR         reduce using rule 36 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)


state 192

    (41) mulwrite -> COMMA auxwrite mulwrite .

    RIGHTPAR        reduce using rule 41 (mulwrite -> COMMA auxwrite mulwrite .)


state 193

    (47) ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR . statutes RIGHTBR elsing
    (23) statutes -> . assign statutesaux
    (24) statutes -> . reading statutesaux
    (25) statutes -> . writing statutesaux
    (26) statutes -> . returning statutesaux
    (27) statutes -> . ifing statutesaux
    (28) statutes -> . whiling statutesaux
    (29) statutes -> . foring statutesaux
    (30) statutes -> . exp statutesaux
    (31) statutes -> . specialfunc statutesaux
    (35) assign -> . ID idarray EQUAL exp SEMICOLON
    (43) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (36) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (46) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (47) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (50) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (51) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (34) specialfunc -> . empty
    (57) andexp -> . boolexp andexp1
    (89) empty -> .
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 40
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    RIGHTBR         reduce using rule 89 (empty -> .)
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! READ            [ reduce using rule 89 (empty -> .) ]
  ! WRITE           [ reduce using rule 89 (empty -> .) ]
  ! RETURN          [ reduce using rule 89 (empty -> .) ]
  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 89 (empty -> .) ]
  ! CTEINT          [ reduce using rule 89 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 89 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 89 (empty -> .) ]

    exp                            shift and go to state 50
    statutes                       shift and go to state 199
    assign                         shift and go to state 43
    reading                        shift and go to state 44
    writing                        shift and go to state 45
    returning                      shift and go to state 46
    ifing                          shift and go to state 47
    whiling                        shift and go to state 48
    foring                         shift and go to state 49
    specialfunc                    shift and go to state 51
    andexp                         shift and go to state 58
    empty                          shift and go to state 59
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 194

    (50) whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR . statutes RIGHTBR
    (23) statutes -> . assign statutesaux
    (24) statutes -> . reading statutesaux
    (25) statutes -> . writing statutesaux
    (26) statutes -> . returning statutesaux
    (27) statutes -> . ifing statutesaux
    (28) statutes -> . whiling statutesaux
    (29) statutes -> . foring statutesaux
    (30) statutes -> . exp statutesaux
    (31) statutes -> . specialfunc statutesaux
    (35) assign -> . ID idarray EQUAL exp SEMICOLON
    (43) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (36) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (46) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (47) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (50) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (51) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (34) specialfunc -> . empty
    (57) andexp -> . boolexp andexp1
    (89) empty -> .
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 40
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    RIGHTBR         reduce using rule 89 (empty -> .)
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! READ            [ reduce using rule 89 (empty -> .) ]
  ! WRITE           [ reduce using rule 89 (empty -> .) ]
  ! RETURN          [ reduce using rule 89 (empty -> .) ]
  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 89 (empty -> .) ]
  ! CTEINT          [ reduce using rule 89 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 89 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 89 (empty -> .) ]

    exp                            shift and go to state 50
    statutes                       shift and go to state 200
    assign                         shift and go to state 43
    reading                        shift and go to state 44
    writing                        shift and go to state 45
    returning                      shift and go to state 46
    ifing                          shift and go to state 47
    whiling                        shift and go to state 48
    foring                         shift and go to state 49
    specialfunc                    shift and go to state 51
    andexp                         shift and go to state 58
    empty                          shift and go to state 59
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 195

    (51) foring -> FOR ID idarray EQUAL exp TO . exp DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (57) andexp -> . boolexp andexp1
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67
    ID              shift and go to state 79

    exp                            shift and go to state 201
    andexp                         shift and go to state 58
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 196

    (15) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR . modules
    (11) modules -> . FUNCTION functype ID funcparam
    (12) modules -> . empty
    (89) empty -> .

    FUNCTION        shift and go to state 10
    MAIN            reduce using rule 89 (empty -> .)

    modules                        shift and go to state 202
    empty                          shift and go to state 11

state 197

    (43) reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .

    ID              reduce using rule 43 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    READ            reduce using rule 43 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 43 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 43 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    IF              reduce using rule 43 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 43 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 43 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    LEFTPAR         reduce using rule 43 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    CTEINT          reduce using rule 43 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    CTEFLOAT        reduce using rule 43 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    CTECHAR         reduce using rule 43 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    RIGHTBR         reduce using rule 43 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)


state 198

    (44) mulread -> COMMA ID idarray . mulread
    (44) mulread -> . COMMA ID idarray mulread
    (45) mulread -> . empty
    (89) empty -> .

    COMMA           shift and go to state 178
    RIGHTPAR        reduce using rule 89 (empty -> .)

    mulread                        shift and go to state 203
    empty                          shift and go to state 179

state 199

    (47) ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes . RIGHTBR elsing

    RIGHTBR         shift and go to state 204


state 200

    (50) whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes . RIGHTBR

    RIGHTBR         shift and go to state 205


state 201

    (51) foring -> FOR ID idarray EQUAL exp TO exp . DO LEFTBR statutes RIGHTBR

    DO              shift and go to state 206


state 202

    (15) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR modules .

    MAIN            reduce using rule 15 (funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR modules .)


state 203

    (44) mulread -> COMMA ID idarray mulread .

    RIGHTPAR        reduce using rule 44 (mulread -> COMMA ID idarray mulread .)


state 204

    (47) ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR . elsing
    (48) elsing -> . ELSE LEFTBR statutes RIGHTBR
    (49) elsing -> . empty
    (89) empty -> .

    ELSE            shift and go to state 208
    ID              reduce using rule 89 (empty -> .)
    READ            reduce using rule 89 (empty -> .)
    WRITE           reduce using rule 89 (empty -> .)
    RETURN          reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    FOR             reduce using rule 89 (empty -> .)
    LEFTPAR         reduce using rule 89 (empty -> .)
    CTEINT          reduce using rule 89 (empty -> .)
    CTEFLOAT        reduce using rule 89 (empty -> .)
    CTECHAR         reduce using rule 89 (empty -> .)
    RIGHTBR         reduce using rule 89 (empty -> .)

    elsing                         shift and go to state 207
    empty                          shift and go to state 209

state 205

    (50) whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .

    ID              reduce using rule 50 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    READ            reduce using rule 50 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    WRITE           reduce using rule 50 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    RETURN          reduce using rule 50 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    IF              reduce using rule 50 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    WHILE           reduce using rule 50 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    FOR             reduce using rule 50 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    LEFTPAR         reduce using rule 50 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    CTEINT          reduce using rule 50 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    CTEFLOAT        reduce using rule 50 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    CTECHAR         reduce using rule 50 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    RIGHTBR         reduce using rule 50 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)


state 206

    (51) foring -> FOR ID idarray EQUAL exp TO exp DO . LEFTBR statutes RIGHTBR

    LEFTBR          shift and go to state 210


state 207

    (47) ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .

    ID              reduce using rule 47 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    READ            reduce using rule 47 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    WRITE           reduce using rule 47 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    RETURN          reduce using rule 47 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    IF              reduce using rule 47 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    WHILE           reduce using rule 47 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    FOR             reduce using rule 47 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    LEFTPAR         reduce using rule 47 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    CTEINT          reduce using rule 47 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    CTEFLOAT        reduce using rule 47 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    CTECHAR         reduce using rule 47 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    RIGHTBR         reduce using rule 47 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)


state 208

    (48) elsing -> ELSE . LEFTBR statutes RIGHTBR

    LEFTBR          shift and go to state 211


state 209

    (49) elsing -> empty .

    ID              reduce using rule 49 (elsing -> empty .)
    READ            reduce using rule 49 (elsing -> empty .)
    WRITE           reduce using rule 49 (elsing -> empty .)
    RETURN          reduce using rule 49 (elsing -> empty .)
    IF              reduce using rule 49 (elsing -> empty .)
    WHILE           reduce using rule 49 (elsing -> empty .)
    FOR             reduce using rule 49 (elsing -> empty .)
    LEFTPAR         reduce using rule 49 (elsing -> empty .)
    CTEINT          reduce using rule 49 (elsing -> empty .)
    CTEFLOAT        reduce using rule 49 (elsing -> empty .)
    CTECHAR         reduce using rule 49 (elsing -> empty .)
    RIGHTBR         reduce using rule 49 (elsing -> empty .)


state 210

    (51) foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR . statutes RIGHTBR
    (23) statutes -> . assign statutesaux
    (24) statutes -> . reading statutesaux
    (25) statutes -> . writing statutesaux
    (26) statutes -> . returning statutesaux
    (27) statutes -> . ifing statutesaux
    (28) statutes -> . whiling statutesaux
    (29) statutes -> . foring statutesaux
    (30) statutes -> . exp statutesaux
    (31) statutes -> . specialfunc statutesaux
    (35) assign -> . ID idarray EQUAL exp SEMICOLON
    (43) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (36) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (46) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (47) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (50) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (51) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (34) specialfunc -> . empty
    (57) andexp -> . boolexp andexp1
    (89) empty -> .
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 40
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    RIGHTBR         reduce using rule 89 (empty -> .)
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! READ            [ reduce using rule 89 (empty -> .) ]
  ! WRITE           [ reduce using rule 89 (empty -> .) ]
  ! RETURN          [ reduce using rule 89 (empty -> .) ]
  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 89 (empty -> .) ]
  ! CTEINT          [ reduce using rule 89 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 89 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 89 (empty -> .) ]

    exp                            shift and go to state 50
    statutes                       shift and go to state 212
    assign                         shift and go to state 43
    reading                        shift and go to state 44
    writing                        shift and go to state 45
    returning                      shift and go to state 46
    ifing                          shift and go to state 47
    whiling                        shift and go to state 48
    foring                         shift and go to state 49
    specialfunc                    shift and go to state 51
    andexp                         shift and go to state 58
    empty                          shift and go to state 59
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 211

    (48) elsing -> ELSE LEFTBR . statutes RIGHTBR
    (23) statutes -> . assign statutesaux
    (24) statutes -> . reading statutesaux
    (25) statutes -> . writing statutesaux
    (26) statutes -> . returning statutesaux
    (27) statutes -> . ifing statutesaux
    (28) statutes -> . whiling statutesaux
    (29) statutes -> . foring statutesaux
    (30) statutes -> . exp statutesaux
    (31) statutes -> . specialfunc statutesaux
    (35) assign -> . ID idarray EQUAL exp SEMICOLON
    (43) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (36) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (46) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (47) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (50) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (51) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (54) exp -> . andexp exp1
    (34) specialfunc -> . empty
    (57) andexp -> . boolexp andexp1
    (89) empty -> .
    (60) boolexp -> . arithexp boolexp1
    (69) arithexp -> . geoexp arithexp1
    (73) geoexp -> . finexp geoexp1
    (77) finexp -> . LEFTPAR exp RIGHTPAR
    (78) finexp -> . cteexp
    (79) cteexp -> . CTEINT
    (80) cteexp -> . CTEFLOAT
    (81) cteexp -> . CTECHAR
    (82) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 40
    READ            shift and go to state 52
    WRITE           shift and go to state 53
    RETURN          shift and go to state 54
    IF              shift and go to state 55
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    RIGHTBR         reduce using rule 89 (empty -> .)
    LEFTPAR         shift and go to state 41
    CTEINT          shift and go to state 65
    CTEFLOAT        shift and go to state 66
    CTECHAR         shift and go to state 67

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! READ            [ reduce using rule 89 (empty -> .) ]
  ! WRITE           [ reduce using rule 89 (empty -> .) ]
  ! RETURN          [ reduce using rule 89 (empty -> .) ]
  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 89 (empty -> .) ]
  ! CTEINT          [ reduce using rule 89 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 89 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 89 (empty -> .) ]

    statutes                       shift and go to state 213
    assign                         shift and go to state 43
    reading                        shift and go to state 44
    writing                        shift and go to state 45
    returning                      shift and go to state 46
    ifing                          shift and go to state 47
    whiling                        shift and go to state 48
    foring                         shift and go to state 49
    exp                            shift and go to state 50
    specialfunc                    shift and go to state 51
    andexp                         shift and go to state 58
    empty                          shift and go to state 59
    boolexp                        shift and go to state 60
    arithexp                       shift and go to state 61
    geoexp                         shift and go to state 62
    finexp                         shift and go to state 63
    cteexp                         shift and go to state 64

state 212

    (51) foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes . RIGHTBR

    RIGHTBR         shift and go to state 214


state 213

    (48) elsing -> ELSE LEFTBR statutes . RIGHTBR

    RIGHTBR         shift and go to state 215


state 214

    (51) foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .

    ID              reduce using rule 51 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    READ            reduce using rule 51 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    WRITE           reduce using rule 51 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    RETURN          reduce using rule 51 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    IF              reduce using rule 51 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    WHILE           reduce using rule 51 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    FOR             reduce using rule 51 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    LEFTPAR         reduce using rule 51 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    CTEINT          reduce using rule 51 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    CTEFLOAT        reduce using rule 51 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    CTECHAR         reduce using rule 51 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    RIGHTBR         reduce using rule 51 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)


state 215

    (48) elsing -> ELSE LEFTBR statutes RIGHTBR .

    ID              reduce using rule 48 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    READ            reduce using rule 48 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    WRITE           reduce using rule 48 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    RETURN          reduce using rule 48 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    IF              reduce using rule 48 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    WHILE           reduce using rule 48 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    FOR             reduce using rule 48 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    LEFTPAR         reduce using rule 48 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    CTEINT          reduce using rule 48 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    CTEFLOAT        reduce using rule 48 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    CTECHAR         reduce using rule 48 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    RIGHTBR         reduce using rule 48 (elsing -> ELSE LEFTBR statutes RIGHTBR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 32 resolved as shift
WARNING: shift/reduce conflict for READ in state 32 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 32 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 32 resolved as shift
WARNING: shift/reduce conflict for IF in state 32 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 32 resolved as shift
WARNING: shift/reduce conflict for FOR in state 32 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 32 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 32 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 32 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 32 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 40 resolved as shift
WARNING: shift/reduce conflict for ID in state 43 resolved as shift
WARNING: shift/reduce conflict for READ in state 43 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 43 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 43 resolved as shift
WARNING: shift/reduce conflict for IF in state 43 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 43 resolved as shift
WARNING: shift/reduce conflict for FOR in state 43 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 43 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 43 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 43 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 43 resolved as shift
WARNING: shift/reduce conflict for ID in state 44 resolved as shift
WARNING: shift/reduce conflict for READ in state 44 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 44 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 44 resolved as shift
WARNING: shift/reduce conflict for IF in state 44 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 44 resolved as shift
WARNING: shift/reduce conflict for FOR in state 44 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 44 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 44 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 44 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 44 resolved as shift
WARNING: shift/reduce conflict for ID in state 45 resolved as shift
WARNING: shift/reduce conflict for READ in state 45 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 45 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 45 resolved as shift
WARNING: shift/reduce conflict for IF in state 45 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 45 resolved as shift
WARNING: shift/reduce conflict for FOR in state 45 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 45 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 45 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 45 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 45 resolved as shift
WARNING: shift/reduce conflict for ID in state 46 resolved as shift
WARNING: shift/reduce conflict for READ in state 46 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 46 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 46 resolved as shift
WARNING: shift/reduce conflict for IF in state 46 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 46 resolved as shift
WARNING: shift/reduce conflict for FOR in state 46 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 46 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 46 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 46 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 46 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for READ in state 47 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 47 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 47 resolved as shift
WARNING: shift/reduce conflict for IF in state 47 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 47 resolved as shift
WARNING: shift/reduce conflict for FOR in state 47 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 47 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 47 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 47 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 48 resolved as shift
WARNING: shift/reduce conflict for READ in state 48 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 48 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 48 resolved as shift
WARNING: shift/reduce conflict for IF in state 48 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 48 resolved as shift
WARNING: shift/reduce conflict for FOR in state 48 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 48 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 48 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 48 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 48 resolved as shift
WARNING: shift/reduce conflict for ID in state 49 resolved as shift
WARNING: shift/reduce conflict for READ in state 49 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 49 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 49 resolved as shift
WARNING: shift/reduce conflict for IF in state 49 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 49 resolved as shift
WARNING: shift/reduce conflict for FOR in state 49 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 49 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 49 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 49 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 49 resolved as shift
WARNING: shift/reduce conflict for ID in state 50 resolved as shift
WARNING: shift/reduce conflict for READ in state 50 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 50 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 50 resolved as shift
WARNING: shift/reduce conflict for IF in state 50 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 50 resolved as shift
WARNING: shift/reduce conflict for FOR in state 50 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 50 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 50 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 50 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 50 resolved as shift
WARNING: shift/reduce conflict for ID in state 51 resolved as shift
WARNING: shift/reduce conflict for READ in state 51 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 51 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 51 resolved as shift
WARNING: shift/reduce conflict for IF in state 51 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 51 resolved as shift
WARNING: shift/reduce conflict for FOR in state 51 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 51 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 51 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 51 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 51 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 79 resolved as shift
WARNING: shift/reduce conflict for ID in state 171 resolved as shift
WARNING: shift/reduce conflict for READ in state 171 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 171 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 171 resolved as shift
WARNING: shift/reduce conflict for IF in state 171 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 171 resolved as shift
WARNING: shift/reduce conflict for FOR in state 171 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 171 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 171 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 171 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 171 resolved as shift
WARNING: shift/reduce conflict for ID in state 193 resolved as shift
WARNING: shift/reduce conflict for READ in state 193 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 193 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 193 resolved as shift
WARNING: shift/reduce conflict for IF in state 193 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 193 resolved as shift
WARNING: shift/reduce conflict for FOR in state 193 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 193 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 193 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 193 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 193 resolved as shift
WARNING: shift/reduce conflict for ID in state 194 resolved as shift
WARNING: shift/reduce conflict for READ in state 194 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 194 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 194 resolved as shift
WARNING: shift/reduce conflict for IF in state 194 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 194 resolved as shift
WARNING: shift/reduce conflict for FOR in state 194 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 194 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 194 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 194 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 194 resolved as shift
WARNING: shift/reduce conflict for ID in state 210 resolved as shift
WARNING: shift/reduce conflict for READ in state 210 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 210 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 210 resolved as shift
WARNING: shift/reduce conflict for IF in state 210 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 210 resolved as shift
WARNING: shift/reduce conflict for FOR in state 210 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 210 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 210 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 210 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 210 resolved as shift
WARNING: shift/reduce conflict for ID in state 211 resolved as shift
WARNING: shift/reduce conflict for READ in state 211 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 211 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 211 resolved as shift
WARNING: shift/reduce conflict for IF in state 211 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 211 resolved as shift
WARNING: shift/reduce conflict for FOR in state 211 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 211 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 211 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 211 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 211 resolved as shift
WARNING: reduce/reduce conflict in state 83 resolved using rule (statutesaux -> empty)
WARNING: rejected rule (specialfunc -> empty) in state 83
WARNING: reduce/reduce conflict in state 136 resolved using rule (writetyping -> CTECHAR)
WARNING: rejected rule (cteexp -> CTECHAR) in state 136
