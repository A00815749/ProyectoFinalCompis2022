Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    STR
    TRUE
    FALSE
    MEDIA
    MEDIANA
    MODA
    VARIANZA
    STDEV
    PLOTXY

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR
Rule 2     neuraltablefunctions -> ID
Rule 3     varsgl -> VARS vars
Rule 4     varsgl -> empty
Rule 5     vars -> typing COLON neuralinsertvar varsarr varsmul vars
Rule 6     vars -> empty
Rule 7     neuralinsertvar -> ID
Rule 8     varsarr -> LEFTSQR CTEINT RIGHTSQR
Rule 9     varsarr -> empty
Rule 10    varsmul -> COMMA neuralinsertvar varsarr varsmul
Rule 11    varsmul -> SEMICOLON
Rule 12    modules -> FUNCTION functype neuralinsertfuncname funcparam
Rule 13    modules -> empty
Rule 14    neuralinsertfuncname -> ID
Rule 15    functype -> VOID
Rule 16    functype -> typing
Rule 17    funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules
Rule 18    neuralendfuncs -> <empty>
Rule 19    typing -> INT
Rule 20    typing -> FLOAT
Rule 21    typing -> CHAR
Rule 22    parameters -> typing COLON ID idarray mulparams
Rule 23    parameters -> empty
Rule 24    mulparams -> COMMA parameters
Rule 25    mulparams -> empty
Rule 26    statutes -> assign statutesaux
Rule 27    statutes -> reading statutesaux
Rule 28    statutes -> writing statutesaux
Rule 29    statutes -> returning statutesaux
Rule 30    statutes -> ifing statutesaux
Rule 31    statutes -> whiling statutesaux
Rule 32    statutes -> foring statutesaux
Rule 33    statutes -> exp statutesaux
Rule 34    statutes -> specialfunc statutesaux
Rule 35    statutesaux -> statutes
Rule 36    statutesaux -> empty
Rule 37    specialfunc -> empty
Rule 38    assign -> ID idarray EQUAL exp SEMICOLON
Rule 39    writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
Rule 40    auxwrite -> writetyping
Rule 41    auxwrite -> exp
Rule 42    writetyping -> STRING
Rule 43    writetyping -> CTECHAR
Rule 44    mulwrite -> COMMA auxwrite mulwrite
Rule 45    mulwrite -> empty
Rule 46    reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
Rule 47    mulread -> COMMA ID idarray mulread
Rule 48    mulread -> empty
Rule 49    returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON
Rule 50    ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
Rule 51    elsing -> ELSE LEFTBR statutes RIGHTBR
Rule 52    elsing -> empty
Rule 53    whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
Rule 54    foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
Rule 55    idarray -> LEFTSQR exp RIGHTSQR
Rule 56    idarray -> empty
Rule 57    exp -> andexp exp1
Rule 58    exp1 -> OR exp
Rule 59    exp1 -> empty
Rule 60    andexp -> boolexp andexp1
Rule 61    andexp1 -> neuraland andexp
Rule 62    andexp1 -> empty
Rule 63    neuraland -> AND
Rule 64    boolexp -> arithexp boolexp1
Rule 65    boolexp1 -> neuralbool arithexp
Rule 66    boolexp1 -> empty
Rule 67    neuralbool -> GREATER
Rule 68    neuralbool -> GREATERAND
Rule 69    neuralbool -> LESSER
Rule 70    neuralbool -> LESSERAND
Rule 71    neuralbool -> SAME
Rule 72    neuralbool -> NOTSAME
Rule 73    neuralbool -> NOT
Rule 74    arithexp -> geoexp arithexp1
Rule 75    arithexp1 -> neuralarith arithexp
Rule 76    arithexp1 -> empty
Rule 77    neuralarith -> PLUS
Rule 78    neuralarith -> REST
Rule 79    geoexp -> finexp geoexp1
Rule 80    geoexp1 -> neuralgeo geoexp
Rule 81    geoexp1 -> empty
Rule 82    neuralgeo -> TIMES
Rule 83    neuralgeo -> DIVIDE
Rule 84    addparenth -> LEFTPAR
Rule 85    popparenth -> RIGHTPAR
Rule 86    finexp -> addparenth exp popparenth
Rule 87    finexp -> cteexp
Rule 88    cteexp -> CTEINT
Rule 89    cteexp -> CTEFLOAT
Rule 90    cteexp -> CTECHAR
Rule 91    cteexp -> ID paramsexp
Rule 92    paramsexp -> LEFTPAR paramsexp2 RIGHTPAR
Rule 93    paramsexp -> idarray
Rule 94    paramsexp2 -> exp auxparamsexp2
Rule 95    paramsexp2 -> empty
Rule 96    auxparamsexp2 -> COMMA exp auxparamsexp2
Rule 97    auxparamsexp2 -> empty
Rule 98    empty -> <empty>
Rule 99    debug -> empty

Terminals, with rules where they appear

AND                  : 63
CHAR                 : 21
COLON                : 5 22
COMMA                : 10 24 44 47 96
CTECHAR              : 43 90
CTEFLOAT             : 89
CTEINT               : 8 88
DIVIDE               : 83
DO                   : 53 54
ELSE                 : 51
EQUAL                : 38 54
FALSE                : 
FLOAT                : 20
FOR                  : 54
FUNCTION             : 12
GREATER              : 67
GREATERAND           : 68
ID                   : 2 7 14 22 38 46 47 54 91
IF                   : 50
INT                  : 19
LEFTBR               : 1 17 50 51 53 54
LEFTPAR              : 1 17 39 46 49 50 53 84 92
LEFTSQR              : 8 55
LESSER               : 69
LESSERAND            : 70
MAIN                 : 1
MEDIA                : 
MEDIANA              : 
MODA                 : 
NOT                  : 73
NOTSAME              : 72
OR                   : 58
PLOTXY               : 
PLUS                 : 77
PROGRAM              : 1
READ                 : 46
REST                 : 78
RETURN               : 49
RIGHTBR              : 1 17 50 51 53 54
RIGHTPAR             : 1 17 39 46 49 50 53 85 92
RIGHTSQR             : 8 55
SAME                 : 71
SEMICOLON            : 1 11 17 38 39 46 49
STDEV                : 
STR                  : 
STRING               : 42
THEN                 : 50
TIMES                : 82
TO                   : 54
TRUE                 : 
VARIANZA             : 
VARS                 : 3
VOID                 : 15
WHILE                : 53
WRITE                : 39
error                : 

Nonterminals, with rules where they appear

addparenth           : 86
andexp               : 57 61
andexp1              : 60
arithexp             : 64 65 75
arithexp1            : 74
assign               : 26
auxparamsexp2        : 94 96
auxwrite             : 39 44
boolexp              : 60
boolexp1             : 64
cteexp               : 87
debug                : 
elsing               : 50
empty                : 4 6 9 13 23 25 36 37 45 48 52 56 59 62 66 76 81 95 97 99
exp                  : 33 38 41 49 50 53 54 54 55 58 86 94 96
exp1                 : 57
finexp               : 79
foring               : 32
funcparam            : 12
functype             : 12
geoexp               : 74 80
geoexp1              : 79
idarray              : 22 38 46 47 54 93
ifing                : 30
modules              : 1 17
mulparams            : 22
mulread              : 46 47
mulwrite             : 39 44
neuraland            : 61
neuralarith          : 75
neuralbool           : 65
neuralendfuncs       : 17
neuralgeo            : 80
neuralinsertfuncname : 12
neuralinsertvar      : 5 10
neuraltablefunctions : 1
parameters           : 17 24
paramsexp            : 91
paramsexp2           : 92
popparenth           : 86
program              : 0
reading              : 27
returning            : 29
specialfunc          : 34
statutes             : 1 17 35 50 51 53 54
statutesaux          : 26 27 28 29 30 31 32 33 34
typing               : 5 16 22
vars                 : 3 5
varsarr              : 5 10
varsgl               : 1 17
varsmul              : 5 10
whiling              : 31
writetyping          : 40
writing              : 28

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR
    (2) neuraltablefunctions -> . ID

    ID              shift and go to state 4

    neuraltablefunctions           shift and go to state 3

state 3

    (1) program -> PROGRAM neuraltablefunctions . SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR

    SEMICOLON       shift and go to state 5


state 4

    (2) neuraltablefunctions -> ID .

    SEMICOLON       reduce using rule 2 (neuraltablefunctions -> ID .)


state 5

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON . varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR
    (3) varsgl -> . VARS vars
    (4) varsgl -> . empty
    (98) empty -> .

    VARS            shift and go to state 7
    FUNCTION        reduce using rule 98 (empty -> .)
    MAIN            reduce using rule 98 (empty -> .)

    varsgl                         shift and go to state 6
    empty                          shift and go to state 8

state 6

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl . modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR
    (12) modules -> . FUNCTION functype neuralinsertfuncname funcparam
    (13) modules -> . empty
    (98) empty -> .

    FUNCTION        shift and go to state 10
    MAIN            reduce using rule 98 (empty -> .)

    modules                        shift and go to state 9
    empty                          shift and go to state 11

state 7

    (3) varsgl -> VARS . vars
    (5) vars -> . typing COLON neuralinsertvar varsarr varsmul vars
    (6) vars -> . empty
    (19) typing -> . INT
    (20) typing -> . FLOAT
    (21) typing -> . CHAR
    (98) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    FUNCTION        reduce using rule 98 (empty -> .)
    MAIN            reduce using rule 98 (empty -> .)
    LEFTBR          reduce using rule 98 (empty -> .)

    vars                           shift and go to state 12
    typing                         shift and go to state 13
    empty                          shift and go to state 14

state 8

    (4) varsgl -> empty .

    FUNCTION        reduce using rule 4 (varsgl -> empty .)
    MAIN            reduce using rule 4 (varsgl -> empty .)
    LEFTBR          reduce using rule 4 (varsgl -> empty .)


state 9

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules . MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR

    MAIN            shift and go to state 18


state 10

    (12) modules -> FUNCTION . functype neuralinsertfuncname funcparam
    (15) functype -> . VOID
    (16) functype -> . typing
    (19) typing -> . INT
    (20) typing -> . FLOAT
    (21) typing -> . CHAR

    VOID            shift and go to state 20
    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17

    functype                       shift and go to state 19
    typing                         shift and go to state 21

state 11

    (13) modules -> empty .

    MAIN            reduce using rule 13 (modules -> empty .)


state 12

    (3) varsgl -> VARS vars .

    FUNCTION        reduce using rule 3 (varsgl -> VARS vars .)
    MAIN            reduce using rule 3 (varsgl -> VARS vars .)
    LEFTBR          reduce using rule 3 (varsgl -> VARS vars .)


state 13

    (5) vars -> typing . COLON neuralinsertvar varsarr varsmul vars

    COLON           shift and go to state 22


state 14

    (6) vars -> empty .

    FUNCTION        reduce using rule 6 (vars -> empty .)
    MAIN            reduce using rule 6 (vars -> empty .)
    LEFTBR          reduce using rule 6 (vars -> empty .)


state 15

    (19) typing -> INT .

    COLON           reduce using rule 19 (typing -> INT .)
    ID              reduce using rule 19 (typing -> INT .)


state 16

    (20) typing -> FLOAT .

    COLON           reduce using rule 20 (typing -> FLOAT .)
    ID              reduce using rule 20 (typing -> FLOAT .)


state 17

    (21) typing -> CHAR .

    COLON           reduce using rule 21 (typing -> CHAR .)
    ID              reduce using rule 21 (typing -> CHAR .)


state 18

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN . LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR

    LEFTPAR         shift and go to state 23


state 19

    (12) modules -> FUNCTION functype . neuralinsertfuncname funcparam
    (14) neuralinsertfuncname -> . ID

    ID              shift and go to state 25

    neuralinsertfuncname           shift and go to state 24

state 20

    (15) functype -> VOID .

    ID              reduce using rule 15 (functype -> VOID .)


state 21

    (16) functype -> typing .

    ID              reduce using rule 16 (functype -> typing .)


state 22

    (5) vars -> typing COLON . neuralinsertvar varsarr varsmul vars
    (7) neuralinsertvar -> . ID

    ID              shift and go to state 27

    neuralinsertvar                shift and go to state 26

state 23

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR . RIGHTPAR LEFTBR statutes RIGHTBR

    RIGHTPAR        shift and go to state 28


state 24

    (12) modules -> FUNCTION functype neuralinsertfuncname . funcparam
    (17) funcparam -> . LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules

    LEFTPAR         shift and go to state 30

    funcparam                      shift and go to state 29

state 25

    (14) neuralinsertfuncname -> ID .

    LEFTPAR         reduce using rule 14 (neuralinsertfuncname -> ID .)


state 26

    (5) vars -> typing COLON neuralinsertvar . varsarr varsmul vars
    (8) varsarr -> . LEFTSQR CTEINT RIGHTSQR
    (9) varsarr -> . empty
    (98) empty -> .

    LEFTSQR         shift and go to state 32
    COMMA           reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)

    varsarr                        shift and go to state 31
    empty                          shift and go to state 33

state 27

    (7) neuralinsertvar -> ID .

    LEFTSQR         reduce using rule 7 (neuralinsertvar -> ID .)
    COMMA           reduce using rule 7 (neuralinsertvar -> ID .)
    SEMICOLON       reduce using rule 7 (neuralinsertvar -> ID .)


state 28

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR . LEFTBR statutes RIGHTBR

    LEFTBR          shift and go to state 34


state 29

    (12) modules -> FUNCTION functype neuralinsertfuncname funcparam .

    MAIN            reduce using rule 12 (modules -> FUNCTION functype neuralinsertfuncname funcparam .)


state 30

    (17) funcparam -> LEFTPAR . parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules
    (22) parameters -> . typing COLON ID idarray mulparams
    (23) parameters -> . empty
    (19) typing -> . INT
    (20) typing -> . FLOAT
    (21) typing -> . CHAR
    (98) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    RIGHTPAR        reduce using rule 98 (empty -> .)

    parameters                     shift and go to state 35
    typing                         shift and go to state 36
    empty                          shift and go to state 37

state 31

    (5) vars -> typing COLON neuralinsertvar varsarr . varsmul vars
    (10) varsmul -> . COMMA neuralinsertvar varsarr varsmul
    (11) varsmul -> . SEMICOLON

    COMMA           shift and go to state 39
    SEMICOLON       shift and go to state 40

    varsmul                        shift and go to state 38

state 32

    (8) varsarr -> LEFTSQR . CTEINT RIGHTSQR

    CTEINT          shift and go to state 41


state 33

    (9) varsarr -> empty .

    COMMA           reduce using rule 9 (varsarr -> empty .)
    SEMICOLON       reduce using rule 9 (varsarr -> empty .)


state 34

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR . statutes RIGHTBR
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (98) empty -> .
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RIGHTBR         reduce using rule 98 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70

  ! ID              [ reduce using rule 98 (empty -> .) ]
  ! READ            [ reduce using rule 98 (empty -> .) ]
  ! WRITE           [ reduce using rule 98 (empty -> .) ]
  ! RETURN          [ reduce using rule 98 (empty -> .) ]
  ! IF              [ reduce using rule 98 (empty -> .) ]
  ! WHILE           [ reduce using rule 98 (empty -> .) ]
  ! FOR             [ reduce using rule 98 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 98 (empty -> .) ]
  ! CTEINT          [ reduce using rule 98 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 98 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 98 (empty -> .) ]

    statutes                       shift and go to state 43
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    empty                          shift and go to state 61
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 35

    (17) funcparam -> LEFTPAR parameters . RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules

    RIGHTPAR        shift and go to state 71


state 36

    (22) parameters -> typing . COLON ID idarray mulparams

    COLON           shift and go to state 72


state 37

    (23) parameters -> empty .

    RIGHTPAR        reduce using rule 23 (parameters -> empty .)


state 38

    (5) vars -> typing COLON neuralinsertvar varsarr varsmul . vars
    (5) vars -> . typing COLON neuralinsertvar varsarr varsmul vars
    (6) vars -> . empty
    (19) typing -> . INT
    (20) typing -> . FLOAT
    (21) typing -> . CHAR
    (98) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    FUNCTION        reduce using rule 98 (empty -> .)
    MAIN            reduce using rule 98 (empty -> .)
    LEFTBR          reduce using rule 98 (empty -> .)

    typing                         shift and go to state 13
    vars                           shift and go to state 73
    empty                          shift and go to state 14

state 39

    (10) varsmul -> COMMA . neuralinsertvar varsarr varsmul
    (7) neuralinsertvar -> . ID

    ID              shift and go to state 27

    neuralinsertvar                shift and go to state 74

state 40

    (11) varsmul -> SEMICOLON .

    INT             reduce using rule 11 (varsmul -> SEMICOLON .)
    FLOAT           reduce using rule 11 (varsmul -> SEMICOLON .)
    CHAR            reduce using rule 11 (varsmul -> SEMICOLON .)
    FUNCTION        reduce using rule 11 (varsmul -> SEMICOLON .)
    MAIN            reduce using rule 11 (varsmul -> SEMICOLON .)
    LEFTBR          reduce using rule 11 (varsmul -> SEMICOLON .)


state 41

    (8) varsarr -> LEFTSQR CTEINT . RIGHTSQR

    RIGHTSQR        shift and go to state 75


state 42

    (84) addparenth -> LEFTPAR .

    LEFTPAR         reduce using rule 84 (addparenth -> LEFTPAR .)
    CTEINT          reduce using rule 84 (addparenth -> LEFTPAR .)
    CTEFLOAT        reduce using rule 84 (addparenth -> LEFTPAR .)
    CTECHAR         reduce using rule 84 (addparenth -> LEFTPAR .)
    ID              reduce using rule 84 (addparenth -> LEFTPAR .)


state 43

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes . RIGHTBR

    RIGHTBR         shift and go to state 76


state 44

    (26) statutes -> assign . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (98) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 98 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70

  ! ID              [ reduce using rule 98 (empty -> .) ]
  ! READ            [ reduce using rule 98 (empty -> .) ]
  ! WRITE           [ reduce using rule 98 (empty -> .) ]
  ! RETURN          [ reduce using rule 98 (empty -> .) ]
  ! IF              [ reduce using rule 98 (empty -> .) ]
  ! WHILE           [ reduce using rule 98 (empty -> .) ]
  ! FOR             [ reduce using rule 98 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 98 (empty -> .) ]
  ! CTEINT          [ reduce using rule 98 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 98 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 98 (empty -> .) ]

    assign                         shift and go to state 44
    statutesaux                    shift and go to state 77
    statutes                       shift and go to state 78
    empty                          shift and go to state 79
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 45

    (27) statutes -> reading . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (98) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 98 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70

  ! ID              [ reduce using rule 98 (empty -> .) ]
  ! READ            [ reduce using rule 98 (empty -> .) ]
  ! WRITE           [ reduce using rule 98 (empty -> .) ]
  ! RETURN          [ reduce using rule 98 (empty -> .) ]
  ! IF              [ reduce using rule 98 (empty -> .) ]
  ! WHILE           [ reduce using rule 98 (empty -> .) ]
  ! FOR             [ reduce using rule 98 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 98 (empty -> .) ]
  ! CTEINT          [ reduce using rule 98 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 98 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 98 (empty -> .) ]

    reading                        shift and go to state 45
    statutesaux                    shift and go to state 80
    statutes                       shift and go to state 78
    empty                          shift and go to state 79
    assign                         shift and go to state 44
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 46

    (28) statutes -> writing . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (98) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 98 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70

  ! ID              [ reduce using rule 98 (empty -> .) ]
  ! READ            [ reduce using rule 98 (empty -> .) ]
  ! WRITE           [ reduce using rule 98 (empty -> .) ]
  ! RETURN          [ reduce using rule 98 (empty -> .) ]
  ! IF              [ reduce using rule 98 (empty -> .) ]
  ! WHILE           [ reduce using rule 98 (empty -> .) ]
  ! FOR             [ reduce using rule 98 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 98 (empty -> .) ]
  ! CTEINT          [ reduce using rule 98 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 98 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 98 (empty -> .) ]

    writing                        shift and go to state 46
    statutesaux                    shift and go to state 81
    statutes                       shift and go to state 78
    empty                          shift and go to state 79
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 47

    (29) statutes -> returning . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (98) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 98 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70

  ! ID              [ reduce using rule 98 (empty -> .) ]
  ! READ            [ reduce using rule 98 (empty -> .) ]
  ! WRITE           [ reduce using rule 98 (empty -> .) ]
  ! RETURN          [ reduce using rule 98 (empty -> .) ]
  ! IF              [ reduce using rule 98 (empty -> .) ]
  ! WHILE           [ reduce using rule 98 (empty -> .) ]
  ! FOR             [ reduce using rule 98 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 98 (empty -> .) ]
  ! CTEINT          [ reduce using rule 98 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 98 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 98 (empty -> .) ]

    returning                      shift and go to state 47
    statutesaux                    shift and go to state 82
    statutes                       shift and go to state 78
    empty                          shift and go to state 79
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 48

    (30) statutes -> ifing . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (98) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 98 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70

  ! ID              [ reduce using rule 98 (empty -> .) ]
  ! READ            [ reduce using rule 98 (empty -> .) ]
  ! WRITE           [ reduce using rule 98 (empty -> .) ]
  ! RETURN          [ reduce using rule 98 (empty -> .) ]
  ! IF              [ reduce using rule 98 (empty -> .) ]
  ! WHILE           [ reduce using rule 98 (empty -> .) ]
  ! FOR             [ reduce using rule 98 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 98 (empty -> .) ]
  ! CTEINT          [ reduce using rule 98 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 98 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 98 (empty -> .) ]

    ifing                          shift and go to state 48
    statutesaux                    shift and go to state 83
    statutes                       shift and go to state 78
    empty                          shift and go to state 79
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 49

    (31) statutes -> whiling . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (98) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 98 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70

  ! ID              [ reduce using rule 98 (empty -> .) ]
  ! READ            [ reduce using rule 98 (empty -> .) ]
  ! WRITE           [ reduce using rule 98 (empty -> .) ]
  ! RETURN          [ reduce using rule 98 (empty -> .) ]
  ! IF              [ reduce using rule 98 (empty -> .) ]
  ! WHILE           [ reduce using rule 98 (empty -> .) ]
  ! FOR             [ reduce using rule 98 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 98 (empty -> .) ]
  ! CTEINT          [ reduce using rule 98 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 98 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 98 (empty -> .) ]

    whiling                        shift and go to state 49
    statutesaux                    shift and go to state 84
    statutes                       shift and go to state 78
    empty                          shift and go to state 79
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 50

    (32) statutes -> foring . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (98) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 98 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70

  ! ID              [ reduce using rule 98 (empty -> .) ]
  ! READ            [ reduce using rule 98 (empty -> .) ]
  ! WRITE           [ reduce using rule 98 (empty -> .) ]
  ! RETURN          [ reduce using rule 98 (empty -> .) ]
  ! IF              [ reduce using rule 98 (empty -> .) ]
  ! WHILE           [ reduce using rule 98 (empty -> .) ]
  ! FOR             [ reduce using rule 98 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 98 (empty -> .) ]
  ! CTEINT          [ reduce using rule 98 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 98 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 98 (empty -> .) ]

    foring                         shift and go to state 50
    statutesaux                    shift and go to state 85
    statutes                       shift and go to state 78
    empty                          shift and go to state 79
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 51

    (33) statutes -> exp . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (98) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 98 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70

  ! ID              [ reduce using rule 98 (empty -> .) ]
  ! READ            [ reduce using rule 98 (empty -> .) ]
  ! WRITE           [ reduce using rule 98 (empty -> .) ]
  ! RETURN          [ reduce using rule 98 (empty -> .) ]
  ! IF              [ reduce using rule 98 (empty -> .) ]
  ! WHILE           [ reduce using rule 98 (empty -> .) ]
  ! FOR             [ reduce using rule 98 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 98 (empty -> .) ]
  ! CTEINT          [ reduce using rule 98 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 98 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 98 (empty -> .) ]

    exp                            shift and go to state 51
    statutesaux                    shift and go to state 86
    statutes                       shift and go to state 78
    empty                          shift and go to state 79
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 52

    (34) statutes -> specialfunc . statutesaux
    (35) statutesaux -> . statutes
    (36) statutesaux -> . empty
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (98) empty -> .
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    RIGHTBR         reduce using rule 98 (empty -> .)
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70

  ! ID              [ reduce using rule 98 (empty -> .) ]
  ! READ            [ reduce using rule 98 (empty -> .) ]
  ! WRITE           [ reduce using rule 98 (empty -> .) ]
  ! RETURN          [ reduce using rule 98 (empty -> .) ]
  ! IF              [ reduce using rule 98 (empty -> .) ]
  ! WHILE           [ reduce using rule 98 (empty -> .) ]
  ! FOR             [ reduce using rule 98 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 98 (empty -> .) ]
  ! CTEINT          [ reduce using rule 98 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 98 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 98 (empty -> .) ]

    specialfunc                    shift and go to state 52
    statutesaux                    shift and go to state 87
    statutes                       shift and go to state 78
    empty                          shift and go to state 79
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 53

    (38) assign -> ID . idarray EQUAL exp SEMICOLON
    (91) cteexp -> ID . paramsexp
    (55) idarray -> . LEFTSQR exp RIGHTSQR
    (56) idarray -> . empty
    (92) paramsexp -> . LEFTPAR paramsexp2 RIGHTPAR
    (93) paramsexp -> . idarray
    (98) empty -> .

  ! shift/reduce conflict for LEFTPAR resolved as shift
    LEFTSQR         shift and go to state 90
    LEFTPAR         shift and go to state 92
    EQUAL           reduce using rule 98 (empty -> .)
    TIMES           reduce using rule 98 (empty -> .)
    DIVIDE          reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    REST            reduce using rule 98 (empty -> .)
    GREATER         reduce using rule 98 (empty -> .)
    GREATERAND      reduce using rule 98 (empty -> .)
    LESSER          reduce using rule 98 (empty -> .)
    LESSERAND       reduce using rule 98 (empty -> .)
    SAME            reduce using rule 98 (empty -> .)
    NOTSAME         reduce using rule 98 (empty -> .)
    NOT             reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    ID              reduce using rule 98 (empty -> .)
    READ            reduce using rule 98 (empty -> .)
    WRITE           reduce using rule 98 (empty -> .)
    RETURN          reduce using rule 98 (empty -> .)
    IF              reduce using rule 98 (empty -> .)
    WHILE           reduce using rule 98 (empty -> .)
    FOR             reduce using rule 98 (empty -> .)
    CTEINT          reduce using rule 98 (empty -> .)
    CTEFLOAT        reduce using rule 98 (empty -> .)
    CTECHAR         reduce using rule 98 (empty -> .)
    RIGHTBR         reduce using rule 98 (empty -> .)

  ! LEFTPAR         [ reduce using rule 98 (empty -> .) ]

    idarray                        shift and go to state 88
    paramsexp                      shift and go to state 89
    empty                          shift and go to state 91

state 54

    (46) reading -> READ . LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 93


state 55

    (39) writing -> WRITE . LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 94


state 56

    (49) returning -> RETURN . LEFTPAR exp RIGHTPAR SEMICOLON

    LEFTPAR         shift and go to state 95


state 57

    (50) ifing -> IF . LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing

    LEFTPAR         shift and go to state 96


state 58

    (53) whiling -> WHILE . LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR

    LEFTPAR         shift and go to state 97


state 59

    (54) foring -> FOR . ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR

    ID              shift and go to state 98


state 60

    (57) exp -> andexp . exp1
    (58) exp1 -> . OR exp
    (59) exp1 -> . empty
    (98) empty -> .

    OR              shift and go to state 100
    ID              reduce using rule 98 (empty -> .)
    READ            reduce using rule 98 (empty -> .)
    WRITE           reduce using rule 98 (empty -> .)
    RETURN          reduce using rule 98 (empty -> .)
    IF              reduce using rule 98 (empty -> .)
    WHILE           reduce using rule 98 (empty -> .)
    FOR             reduce using rule 98 (empty -> .)
    LEFTPAR         reduce using rule 98 (empty -> .)
    CTEINT          reduce using rule 98 (empty -> .)
    CTEFLOAT        reduce using rule 98 (empty -> .)
    CTECHAR         reduce using rule 98 (empty -> .)
    RIGHTBR         reduce using rule 98 (empty -> .)
    RIGHTPAR        reduce using rule 98 (empty -> .)
    RIGHTSQR        reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    DO              reduce using rule 98 (empty -> .)

    exp1                           shift and go to state 99
    empty                          shift and go to state 101

state 61

    (37) specialfunc -> empty .

    ID              reduce using rule 37 (specialfunc -> empty .)
    READ            reduce using rule 37 (specialfunc -> empty .)
    WRITE           reduce using rule 37 (specialfunc -> empty .)
    RETURN          reduce using rule 37 (specialfunc -> empty .)
    IF              reduce using rule 37 (specialfunc -> empty .)
    WHILE           reduce using rule 37 (specialfunc -> empty .)
    FOR             reduce using rule 37 (specialfunc -> empty .)
    LEFTPAR         reduce using rule 37 (specialfunc -> empty .)
    CTEINT          reduce using rule 37 (specialfunc -> empty .)
    CTEFLOAT        reduce using rule 37 (specialfunc -> empty .)
    CTECHAR         reduce using rule 37 (specialfunc -> empty .)
    RIGHTBR         reduce using rule 37 (specialfunc -> empty .)


state 62

    (60) andexp -> boolexp . andexp1
    (61) andexp1 -> . neuraland andexp
    (62) andexp1 -> . empty
    (63) neuraland -> . AND
    (98) empty -> .

    AND             shift and go to state 105
    OR              reduce using rule 98 (empty -> .)
    ID              reduce using rule 98 (empty -> .)
    READ            reduce using rule 98 (empty -> .)
    WRITE           reduce using rule 98 (empty -> .)
    RETURN          reduce using rule 98 (empty -> .)
    IF              reduce using rule 98 (empty -> .)
    WHILE           reduce using rule 98 (empty -> .)
    FOR             reduce using rule 98 (empty -> .)
    LEFTPAR         reduce using rule 98 (empty -> .)
    CTEINT          reduce using rule 98 (empty -> .)
    CTEFLOAT        reduce using rule 98 (empty -> .)
    CTECHAR         reduce using rule 98 (empty -> .)
    RIGHTBR         reduce using rule 98 (empty -> .)
    RIGHTPAR        reduce using rule 98 (empty -> .)
    RIGHTSQR        reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    DO              reduce using rule 98 (empty -> .)

    andexp1                        shift and go to state 102
    neuraland                      shift and go to state 103
    empty                          shift and go to state 104

state 63

    (64) boolexp -> arithexp . boolexp1
    (65) boolexp1 -> . neuralbool arithexp
    (66) boolexp1 -> . empty
    (67) neuralbool -> . GREATER
    (68) neuralbool -> . GREATERAND
    (69) neuralbool -> . LESSER
    (70) neuralbool -> . LESSERAND
    (71) neuralbool -> . SAME
    (72) neuralbool -> . NOTSAME
    (73) neuralbool -> . NOT
    (98) empty -> .

    GREATER         shift and go to state 109
    GREATERAND      shift and go to state 110
    LESSER          shift and go to state 111
    LESSERAND       shift and go to state 112
    SAME            shift and go to state 113
    NOTSAME         shift and go to state 114
    NOT             shift and go to state 115
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    ID              reduce using rule 98 (empty -> .)
    READ            reduce using rule 98 (empty -> .)
    WRITE           reduce using rule 98 (empty -> .)
    RETURN          reduce using rule 98 (empty -> .)
    IF              reduce using rule 98 (empty -> .)
    WHILE           reduce using rule 98 (empty -> .)
    FOR             reduce using rule 98 (empty -> .)
    LEFTPAR         reduce using rule 98 (empty -> .)
    CTEINT          reduce using rule 98 (empty -> .)
    CTEFLOAT        reduce using rule 98 (empty -> .)
    CTECHAR         reduce using rule 98 (empty -> .)
    RIGHTBR         reduce using rule 98 (empty -> .)
    RIGHTPAR        reduce using rule 98 (empty -> .)
    RIGHTSQR        reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    DO              reduce using rule 98 (empty -> .)

    boolexp1                       shift and go to state 106
    neuralbool                     shift and go to state 107
    empty                          shift and go to state 108

state 64

    (74) arithexp -> geoexp . arithexp1
    (75) arithexp1 -> . neuralarith arithexp
    (76) arithexp1 -> . empty
    (77) neuralarith -> . PLUS
    (78) neuralarith -> . REST
    (98) empty -> .

    PLUS            shift and go to state 119
    REST            shift and go to state 120
    GREATER         reduce using rule 98 (empty -> .)
    GREATERAND      reduce using rule 98 (empty -> .)
    LESSER          reduce using rule 98 (empty -> .)
    LESSERAND       reduce using rule 98 (empty -> .)
    SAME            reduce using rule 98 (empty -> .)
    NOTSAME         reduce using rule 98 (empty -> .)
    NOT             reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    ID              reduce using rule 98 (empty -> .)
    READ            reduce using rule 98 (empty -> .)
    WRITE           reduce using rule 98 (empty -> .)
    RETURN          reduce using rule 98 (empty -> .)
    IF              reduce using rule 98 (empty -> .)
    WHILE           reduce using rule 98 (empty -> .)
    FOR             reduce using rule 98 (empty -> .)
    LEFTPAR         reduce using rule 98 (empty -> .)
    CTEINT          reduce using rule 98 (empty -> .)
    CTEFLOAT        reduce using rule 98 (empty -> .)
    CTECHAR         reduce using rule 98 (empty -> .)
    RIGHTBR         reduce using rule 98 (empty -> .)
    RIGHTPAR        reduce using rule 98 (empty -> .)
    RIGHTSQR        reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    DO              reduce using rule 98 (empty -> .)

    arithexp1                      shift and go to state 116
    neuralarith                    shift and go to state 117
    empty                          shift and go to state 118

state 65

    (79) geoexp -> finexp . geoexp1
    (80) geoexp1 -> . neuralgeo geoexp
    (81) geoexp1 -> . empty
    (82) neuralgeo -> . TIMES
    (83) neuralgeo -> . DIVIDE
    (98) empty -> .

    TIMES           shift and go to state 124
    DIVIDE          shift and go to state 125
    PLUS            reduce using rule 98 (empty -> .)
    REST            reduce using rule 98 (empty -> .)
    GREATER         reduce using rule 98 (empty -> .)
    GREATERAND      reduce using rule 98 (empty -> .)
    LESSER          reduce using rule 98 (empty -> .)
    LESSERAND       reduce using rule 98 (empty -> .)
    SAME            reduce using rule 98 (empty -> .)
    NOTSAME         reduce using rule 98 (empty -> .)
    NOT             reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    ID              reduce using rule 98 (empty -> .)
    READ            reduce using rule 98 (empty -> .)
    WRITE           reduce using rule 98 (empty -> .)
    RETURN          reduce using rule 98 (empty -> .)
    IF              reduce using rule 98 (empty -> .)
    WHILE           reduce using rule 98 (empty -> .)
    FOR             reduce using rule 98 (empty -> .)
    LEFTPAR         reduce using rule 98 (empty -> .)
    CTEINT          reduce using rule 98 (empty -> .)
    CTEFLOAT        reduce using rule 98 (empty -> .)
    CTECHAR         reduce using rule 98 (empty -> .)
    RIGHTBR         reduce using rule 98 (empty -> .)
    RIGHTPAR        reduce using rule 98 (empty -> .)
    RIGHTSQR        reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    DO              reduce using rule 98 (empty -> .)

    geoexp1                        shift and go to state 121
    neuralgeo                      shift and go to state 122
    empty                          shift and go to state 123

state 66

    (86) finexp -> addparenth . exp popparenth
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70
    ID              shift and go to state 127

    addparenth                     shift and go to state 66
    exp                            shift and go to state 126
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    cteexp                         shift and go to state 67

state 67

    (87) finexp -> cteexp .

    TIMES           reduce using rule 87 (finexp -> cteexp .)
    DIVIDE          reduce using rule 87 (finexp -> cteexp .)
    PLUS            reduce using rule 87 (finexp -> cteexp .)
    REST            reduce using rule 87 (finexp -> cteexp .)
    GREATER         reduce using rule 87 (finexp -> cteexp .)
    GREATERAND      reduce using rule 87 (finexp -> cteexp .)
    LESSER          reduce using rule 87 (finexp -> cteexp .)
    LESSERAND       reduce using rule 87 (finexp -> cteexp .)
    SAME            reduce using rule 87 (finexp -> cteexp .)
    NOTSAME         reduce using rule 87 (finexp -> cteexp .)
    NOT             reduce using rule 87 (finexp -> cteexp .)
    AND             reduce using rule 87 (finexp -> cteexp .)
    OR              reduce using rule 87 (finexp -> cteexp .)
    ID              reduce using rule 87 (finexp -> cteexp .)
    READ            reduce using rule 87 (finexp -> cteexp .)
    WRITE           reduce using rule 87 (finexp -> cteexp .)
    RETURN          reduce using rule 87 (finexp -> cteexp .)
    IF              reduce using rule 87 (finexp -> cteexp .)
    WHILE           reduce using rule 87 (finexp -> cteexp .)
    FOR             reduce using rule 87 (finexp -> cteexp .)
    LEFTPAR         reduce using rule 87 (finexp -> cteexp .)
    CTEINT          reduce using rule 87 (finexp -> cteexp .)
    CTEFLOAT        reduce using rule 87 (finexp -> cteexp .)
    CTECHAR         reduce using rule 87 (finexp -> cteexp .)
    RIGHTBR         reduce using rule 87 (finexp -> cteexp .)
    RIGHTPAR        reduce using rule 87 (finexp -> cteexp .)
    RIGHTSQR        reduce using rule 87 (finexp -> cteexp .)
    COMMA           reduce using rule 87 (finexp -> cteexp .)
    SEMICOLON       reduce using rule 87 (finexp -> cteexp .)
    TO              reduce using rule 87 (finexp -> cteexp .)
    DO              reduce using rule 87 (finexp -> cteexp .)


state 68

    (88) cteexp -> CTEINT .

    TIMES           reduce using rule 88 (cteexp -> CTEINT .)
    DIVIDE          reduce using rule 88 (cteexp -> CTEINT .)
    PLUS            reduce using rule 88 (cteexp -> CTEINT .)
    REST            reduce using rule 88 (cteexp -> CTEINT .)
    GREATER         reduce using rule 88 (cteexp -> CTEINT .)
    GREATERAND      reduce using rule 88 (cteexp -> CTEINT .)
    LESSER          reduce using rule 88 (cteexp -> CTEINT .)
    LESSERAND       reduce using rule 88 (cteexp -> CTEINT .)
    SAME            reduce using rule 88 (cteexp -> CTEINT .)
    NOTSAME         reduce using rule 88 (cteexp -> CTEINT .)
    NOT             reduce using rule 88 (cteexp -> CTEINT .)
    AND             reduce using rule 88 (cteexp -> CTEINT .)
    OR              reduce using rule 88 (cteexp -> CTEINT .)
    ID              reduce using rule 88 (cteexp -> CTEINT .)
    READ            reduce using rule 88 (cteexp -> CTEINT .)
    WRITE           reduce using rule 88 (cteexp -> CTEINT .)
    RETURN          reduce using rule 88 (cteexp -> CTEINT .)
    IF              reduce using rule 88 (cteexp -> CTEINT .)
    WHILE           reduce using rule 88 (cteexp -> CTEINT .)
    FOR             reduce using rule 88 (cteexp -> CTEINT .)
    LEFTPAR         reduce using rule 88 (cteexp -> CTEINT .)
    CTEINT          reduce using rule 88 (cteexp -> CTEINT .)
    CTEFLOAT        reduce using rule 88 (cteexp -> CTEINT .)
    CTECHAR         reduce using rule 88 (cteexp -> CTEINT .)
    RIGHTBR         reduce using rule 88 (cteexp -> CTEINT .)
    RIGHTPAR        reduce using rule 88 (cteexp -> CTEINT .)
    RIGHTSQR        reduce using rule 88 (cteexp -> CTEINT .)
    COMMA           reduce using rule 88 (cteexp -> CTEINT .)
    SEMICOLON       reduce using rule 88 (cteexp -> CTEINT .)
    TO              reduce using rule 88 (cteexp -> CTEINT .)
    DO              reduce using rule 88 (cteexp -> CTEINT .)


state 69

    (89) cteexp -> CTEFLOAT .

    TIMES           reduce using rule 89 (cteexp -> CTEFLOAT .)
    DIVIDE          reduce using rule 89 (cteexp -> CTEFLOAT .)
    PLUS            reduce using rule 89 (cteexp -> CTEFLOAT .)
    REST            reduce using rule 89 (cteexp -> CTEFLOAT .)
    GREATER         reduce using rule 89 (cteexp -> CTEFLOAT .)
    GREATERAND      reduce using rule 89 (cteexp -> CTEFLOAT .)
    LESSER          reduce using rule 89 (cteexp -> CTEFLOAT .)
    LESSERAND       reduce using rule 89 (cteexp -> CTEFLOAT .)
    SAME            reduce using rule 89 (cteexp -> CTEFLOAT .)
    NOTSAME         reduce using rule 89 (cteexp -> CTEFLOAT .)
    NOT             reduce using rule 89 (cteexp -> CTEFLOAT .)
    AND             reduce using rule 89 (cteexp -> CTEFLOAT .)
    OR              reduce using rule 89 (cteexp -> CTEFLOAT .)
    ID              reduce using rule 89 (cteexp -> CTEFLOAT .)
    READ            reduce using rule 89 (cteexp -> CTEFLOAT .)
    WRITE           reduce using rule 89 (cteexp -> CTEFLOAT .)
    RETURN          reduce using rule 89 (cteexp -> CTEFLOAT .)
    IF              reduce using rule 89 (cteexp -> CTEFLOAT .)
    WHILE           reduce using rule 89 (cteexp -> CTEFLOAT .)
    FOR             reduce using rule 89 (cteexp -> CTEFLOAT .)
    LEFTPAR         reduce using rule 89 (cteexp -> CTEFLOAT .)
    CTEINT          reduce using rule 89 (cteexp -> CTEFLOAT .)
    CTEFLOAT        reduce using rule 89 (cteexp -> CTEFLOAT .)
    CTECHAR         reduce using rule 89 (cteexp -> CTEFLOAT .)
    RIGHTBR         reduce using rule 89 (cteexp -> CTEFLOAT .)
    RIGHTPAR        reduce using rule 89 (cteexp -> CTEFLOAT .)
    RIGHTSQR        reduce using rule 89 (cteexp -> CTEFLOAT .)
    COMMA           reduce using rule 89 (cteexp -> CTEFLOAT .)
    SEMICOLON       reduce using rule 89 (cteexp -> CTEFLOAT .)
    TO              reduce using rule 89 (cteexp -> CTEFLOAT .)
    DO              reduce using rule 89 (cteexp -> CTEFLOAT .)


state 70

    (90) cteexp -> CTECHAR .

    TIMES           reduce using rule 90 (cteexp -> CTECHAR .)
    DIVIDE          reduce using rule 90 (cteexp -> CTECHAR .)
    PLUS            reduce using rule 90 (cteexp -> CTECHAR .)
    REST            reduce using rule 90 (cteexp -> CTECHAR .)
    GREATER         reduce using rule 90 (cteexp -> CTECHAR .)
    GREATERAND      reduce using rule 90 (cteexp -> CTECHAR .)
    LESSER          reduce using rule 90 (cteexp -> CTECHAR .)
    LESSERAND       reduce using rule 90 (cteexp -> CTECHAR .)
    SAME            reduce using rule 90 (cteexp -> CTECHAR .)
    NOTSAME         reduce using rule 90 (cteexp -> CTECHAR .)
    NOT             reduce using rule 90 (cteexp -> CTECHAR .)
    AND             reduce using rule 90 (cteexp -> CTECHAR .)
    OR              reduce using rule 90 (cteexp -> CTECHAR .)
    ID              reduce using rule 90 (cteexp -> CTECHAR .)
    READ            reduce using rule 90 (cteexp -> CTECHAR .)
    WRITE           reduce using rule 90 (cteexp -> CTECHAR .)
    RETURN          reduce using rule 90 (cteexp -> CTECHAR .)
    IF              reduce using rule 90 (cteexp -> CTECHAR .)
    WHILE           reduce using rule 90 (cteexp -> CTECHAR .)
    FOR             reduce using rule 90 (cteexp -> CTECHAR .)
    LEFTPAR         reduce using rule 90 (cteexp -> CTECHAR .)
    CTEINT          reduce using rule 90 (cteexp -> CTECHAR .)
    CTEFLOAT        reduce using rule 90 (cteexp -> CTECHAR .)
    CTECHAR         reduce using rule 90 (cteexp -> CTECHAR .)
    RIGHTBR         reduce using rule 90 (cteexp -> CTECHAR .)
    RIGHTPAR        reduce using rule 90 (cteexp -> CTECHAR .)
    RIGHTSQR        reduce using rule 90 (cteexp -> CTECHAR .)
    COMMA           reduce using rule 90 (cteexp -> CTECHAR .)
    SEMICOLON       reduce using rule 90 (cteexp -> CTECHAR .)
    TO              reduce using rule 90 (cteexp -> CTECHAR .)
    DO              reduce using rule 90 (cteexp -> CTECHAR .)


state 71

    (17) funcparam -> LEFTPAR parameters RIGHTPAR . SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules

    SEMICOLON       shift and go to state 128


state 72

    (22) parameters -> typing COLON . ID idarray mulparams

    ID              shift and go to state 129


state 73

    (5) vars -> typing COLON neuralinsertvar varsarr varsmul vars .

    FUNCTION        reduce using rule 5 (vars -> typing COLON neuralinsertvar varsarr varsmul vars .)
    MAIN            reduce using rule 5 (vars -> typing COLON neuralinsertvar varsarr varsmul vars .)
    LEFTBR          reduce using rule 5 (vars -> typing COLON neuralinsertvar varsarr varsmul vars .)


state 74

    (10) varsmul -> COMMA neuralinsertvar . varsarr varsmul
    (8) varsarr -> . LEFTSQR CTEINT RIGHTSQR
    (9) varsarr -> . empty
    (98) empty -> .

    LEFTSQR         shift and go to state 32
    COMMA           reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)

    varsarr                        shift and go to state 130
    empty                          shift and go to state 33

state 75

    (8) varsarr -> LEFTSQR CTEINT RIGHTSQR .

    COMMA           reduce using rule 8 (varsarr -> LEFTSQR CTEINT RIGHTSQR .)
    SEMICOLON       reduce using rule 8 (varsarr -> LEFTSQR CTEINT RIGHTSQR .)


state 76

    (1) program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR .

    $end            reduce using rule 1 (program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR .)


state 77

    (26) statutes -> assign statutesaux .

    RIGHTBR         reduce using rule 26 (statutes -> assign statutesaux .)


state 78

    (35) statutesaux -> statutes .

    RIGHTBR         reduce using rule 35 (statutesaux -> statutes .)


state 79

    (36) statutesaux -> empty .
    (37) specialfunc -> empty .

  ! reduce/reduce conflict for RIGHTBR resolved using rule 36 (statutesaux -> empty .)
    RIGHTBR         reduce using rule 36 (statutesaux -> empty .)
    ID              reduce using rule 37 (specialfunc -> empty .)
    READ            reduce using rule 37 (specialfunc -> empty .)
    WRITE           reduce using rule 37 (specialfunc -> empty .)
    RETURN          reduce using rule 37 (specialfunc -> empty .)
    IF              reduce using rule 37 (specialfunc -> empty .)
    WHILE           reduce using rule 37 (specialfunc -> empty .)
    FOR             reduce using rule 37 (specialfunc -> empty .)
    LEFTPAR         reduce using rule 37 (specialfunc -> empty .)
    CTEINT          reduce using rule 37 (specialfunc -> empty .)
    CTEFLOAT        reduce using rule 37 (specialfunc -> empty .)
    CTECHAR         reduce using rule 37 (specialfunc -> empty .)

  ! RIGHTBR         [ reduce using rule 37 (specialfunc -> empty .) ]


state 80

    (27) statutes -> reading statutesaux .

    RIGHTBR         reduce using rule 27 (statutes -> reading statutesaux .)


state 81

    (28) statutes -> writing statutesaux .

    RIGHTBR         reduce using rule 28 (statutes -> writing statutesaux .)


state 82

    (29) statutes -> returning statutesaux .

    RIGHTBR         reduce using rule 29 (statutes -> returning statutesaux .)


state 83

    (30) statutes -> ifing statutesaux .

    RIGHTBR         reduce using rule 30 (statutes -> ifing statutesaux .)


state 84

    (31) statutes -> whiling statutesaux .

    RIGHTBR         reduce using rule 31 (statutes -> whiling statutesaux .)


state 85

    (32) statutes -> foring statutesaux .

    RIGHTBR         reduce using rule 32 (statutes -> foring statutesaux .)


state 86

    (33) statutes -> exp statutesaux .

    RIGHTBR         reduce using rule 33 (statutes -> exp statutesaux .)


state 87

    (34) statutes -> specialfunc statutesaux .

    RIGHTBR         reduce using rule 34 (statutes -> specialfunc statutesaux .)


state 88

    (38) assign -> ID idarray . EQUAL exp SEMICOLON
    (93) paramsexp -> idarray .

    EQUAL           shift and go to state 131
    TIMES           reduce using rule 93 (paramsexp -> idarray .)
    DIVIDE          reduce using rule 93 (paramsexp -> idarray .)
    PLUS            reduce using rule 93 (paramsexp -> idarray .)
    REST            reduce using rule 93 (paramsexp -> idarray .)
    GREATER         reduce using rule 93 (paramsexp -> idarray .)
    GREATERAND      reduce using rule 93 (paramsexp -> idarray .)
    LESSER          reduce using rule 93 (paramsexp -> idarray .)
    LESSERAND       reduce using rule 93 (paramsexp -> idarray .)
    SAME            reduce using rule 93 (paramsexp -> idarray .)
    NOTSAME         reduce using rule 93 (paramsexp -> idarray .)
    NOT             reduce using rule 93 (paramsexp -> idarray .)
    AND             reduce using rule 93 (paramsexp -> idarray .)
    OR              reduce using rule 93 (paramsexp -> idarray .)
    ID              reduce using rule 93 (paramsexp -> idarray .)
    READ            reduce using rule 93 (paramsexp -> idarray .)
    WRITE           reduce using rule 93 (paramsexp -> idarray .)
    RETURN          reduce using rule 93 (paramsexp -> idarray .)
    IF              reduce using rule 93 (paramsexp -> idarray .)
    WHILE           reduce using rule 93 (paramsexp -> idarray .)
    FOR             reduce using rule 93 (paramsexp -> idarray .)
    LEFTPAR         reduce using rule 93 (paramsexp -> idarray .)
    CTEINT          reduce using rule 93 (paramsexp -> idarray .)
    CTEFLOAT        reduce using rule 93 (paramsexp -> idarray .)
    CTECHAR         reduce using rule 93 (paramsexp -> idarray .)
    RIGHTBR         reduce using rule 93 (paramsexp -> idarray .)


state 89

    (91) cteexp -> ID paramsexp .

    TIMES           reduce using rule 91 (cteexp -> ID paramsexp .)
    DIVIDE          reduce using rule 91 (cteexp -> ID paramsexp .)
    PLUS            reduce using rule 91 (cteexp -> ID paramsexp .)
    REST            reduce using rule 91 (cteexp -> ID paramsexp .)
    GREATER         reduce using rule 91 (cteexp -> ID paramsexp .)
    GREATERAND      reduce using rule 91 (cteexp -> ID paramsexp .)
    LESSER          reduce using rule 91 (cteexp -> ID paramsexp .)
    LESSERAND       reduce using rule 91 (cteexp -> ID paramsexp .)
    SAME            reduce using rule 91 (cteexp -> ID paramsexp .)
    NOTSAME         reduce using rule 91 (cteexp -> ID paramsexp .)
    NOT             reduce using rule 91 (cteexp -> ID paramsexp .)
    AND             reduce using rule 91 (cteexp -> ID paramsexp .)
    OR              reduce using rule 91 (cteexp -> ID paramsexp .)
    ID              reduce using rule 91 (cteexp -> ID paramsexp .)
    READ            reduce using rule 91 (cteexp -> ID paramsexp .)
    WRITE           reduce using rule 91 (cteexp -> ID paramsexp .)
    RETURN          reduce using rule 91 (cteexp -> ID paramsexp .)
    IF              reduce using rule 91 (cteexp -> ID paramsexp .)
    WHILE           reduce using rule 91 (cteexp -> ID paramsexp .)
    FOR             reduce using rule 91 (cteexp -> ID paramsexp .)
    LEFTPAR         reduce using rule 91 (cteexp -> ID paramsexp .)
    CTEINT          reduce using rule 91 (cteexp -> ID paramsexp .)
    CTEFLOAT        reduce using rule 91 (cteexp -> ID paramsexp .)
    CTECHAR         reduce using rule 91 (cteexp -> ID paramsexp .)
    RIGHTBR         reduce using rule 91 (cteexp -> ID paramsexp .)
    RIGHTPAR        reduce using rule 91 (cteexp -> ID paramsexp .)
    RIGHTSQR        reduce using rule 91 (cteexp -> ID paramsexp .)
    COMMA           reduce using rule 91 (cteexp -> ID paramsexp .)
    SEMICOLON       reduce using rule 91 (cteexp -> ID paramsexp .)
    TO              reduce using rule 91 (cteexp -> ID paramsexp .)
    DO              reduce using rule 91 (cteexp -> ID paramsexp .)


state 90

    (55) idarray -> LEFTSQR . exp RIGHTSQR
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70
    ID              shift and go to state 127

    exp                            shift and go to state 132
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 91

    (56) idarray -> empty .

    EQUAL           reduce using rule 56 (idarray -> empty .)
    TIMES           reduce using rule 56 (idarray -> empty .)
    DIVIDE          reduce using rule 56 (idarray -> empty .)
    PLUS            reduce using rule 56 (idarray -> empty .)
    REST            reduce using rule 56 (idarray -> empty .)
    GREATER         reduce using rule 56 (idarray -> empty .)
    GREATERAND      reduce using rule 56 (idarray -> empty .)
    LESSER          reduce using rule 56 (idarray -> empty .)
    LESSERAND       reduce using rule 56 (idarray -> empty .)
    SAME            reduce using rule 56 (idarray -> empty .)
    NOTSAME         reduce using rule 56 (idarray -> empty .)
    NOT             reduce using rule 56 (idarray -> empty .)
    AND             reduce using rule 56 (idarray -> empty .)
    OR              reduce using rule 56 (idarray -> empty .)
    ID              reduce using rule 56 (idarray -> empty .)
    READ            reduce using rule 56 (idarray -> empty .)
    WRITE           reduce using rule 56 (idarray -> empty .)
    RETURN          reduce using rule 56 (idarray -> empty .)
    IF              reduce using rule 56 (idarray -> empty .)
    WHILE           reduce using rule 56 (idarray -> empty .)
    FOR             reduce using rule 56 (idarray -> empty .)
    LEFTPAR         reduce using rule 56 (idarray -> empty .)
    CTEINT          reduce using rule 56 (idarray -> empty .)
    CTEFLOAT        reduce using rule 56 (idarray -> empty .)
    CTECHAR         reduce using rule 56 (idarray -> empty .)
    RIGHTBR         reduce using rule 56 (idarray -> empty .)
    RIGHTPAR        reduce using rule 56 (idarray -> empty .)
    RIGHTSQR        reduce using rule 56 (idarray -> empty .)
    COMMA           reduce using rule 56 (idarray -> empty .)
    SEMICOLON       reduce using rule 56 (idarray -> empty .)
    TO              reduce using rule 56 (idarray -> empty .)
    DO              reduce using rule 56 (idarray -> empty .)


state 92

    (92) paramsexp -> LEFTPAR . paramsexp2 RIGHTPAR
    (94) paramsexp2 -> . exp auxparamsexp2
    (95) paramsexp2 -> . empty
    (57) exp -> . andexp exp1
    (98) empty -> .
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

    RIGHTPAR        reduce using rule 98 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70
    ID              shift and go to state 127

    paramsexp2                     shift and go to state 133
    exp                            shift and go to state 134
    empty                          shift and go to state 135
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 93

    (46) reading -> READ LEFTPAR . ID idarray mulread RIGHTPAR SEMICOLON

    ID              shift and go to state 136


state 94

    (39) writing -> WRITE LEFTPAR . auxwrite mulwrite RIGHTPAR SEMICOLON
    (40) auxwrite -> . writetyping
    (41) auxwrite -> . exp
    (42) writetyping -> . STRING
    (43) writetyping -> . CTECHAR
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

    STRING          shift and go to state 140
    CTECHAR         shift and go to state 141
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    ID              shift and go to state 127

    auxwrite                       shift and go to state 137
    writetyping                    shift and go to state 138
    exp                            shift and go to state 139
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 95

    (49) returning -> RETURN LEFTPAR . exp RIGHTPAR SEMICOLON
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70
    ID              shift and go to state 127

    exp                            shift and go to state 142
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 96

    (50) ifing -> IF LEFTPAR . exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70
    ID              shift and go to state 127

    exp                            shift and go to state 143
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 97

    (53) whiling -> WHILE LEFTPAR . exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70
    ID              shift and go to state 127

    exp                            shift and go to state 144
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 98

    (54) foring -> FOR ID . idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (55) idarray -> . LEFTSQR exp RIGHTSQR
    (56) idarray -> . empty
    (98) empty -> .

    LEFTSQR         shift and go to state 90
    EQUAL           reduce using rule 98 (empty -> .)

    idarray                        shift and go to state 145
    empty                          shift and go to state 91

state 99

    (57) exp -> andexp exp1 .

    ID              reduce using rule 57 (exp -> andexp exp1 .)
    READ            reduce using rule 57 (exp -> andexp exp1 .)
    WRITE           reduce using rule 57 (exp -> andexp exp1 .)
    RETURN          reduce using rule 57 (exp -> andexp exp1 .)
    IF              reduce using rule 57 (exp -> andexp exp1 .)
    WHILE           reduce using rule 57 (exp -> andexp exp1 .)
    FOR             reduce using rule 57 (exp -> andexp exp1 .)
    LEFTPAR         reduce using rule 57 (exp -> andexp exp1 .)
    CTEINT          reduce using rule 57 (exp -> andexp exp1 .)
    CTEFLOAT        reduce using rule 57 (exp -> andexp exp1 .)
    CTECHAR         reduce using rule 57 (exp -> andexp exp1 .)
    RIGHTBR         reduce using rule 57 (exp -> andexp exp1 .)
    RIGHTPAR        reduce using rule 57 (exp -> andexp exp1 .)
    RIGHTSQR        reduce using rule 57 (exp -> andexp exp1 .)
    COMMA           reduce using rule 57 (exp -> andexp exp1 .)
    SEMICOLON       reduce using rule 57 (exp -> andexp exp1 .)
    TO              reduce using rule 57 (exp -> andexp exp1 .)
    DO              reduce using rule 57 (exp -> andexp exp1 .)


state 100

    (58) exp1 -> OR . exp
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70
    ID              shift and go to state 127

    exp                            shift and go to state 146
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 101

    (59) exp1 -> empty .

    ID              reduce using rule 59 (exp1 -> empty .)
    READ            reduce using rule 59 (exp1 -> empty .)
    WRITE           reduce using rule 59 (exp1 -> empty .)
    RETURN          reduce using rule 59 (exp1 -> empty .)
    IF              reduce using rule 59 (exp1 -> empty .)
    WHILE           reduce using rule 59 (exp1 -> empty .)
    FOR             reduce using rule 59 (exp1 -> empty .)
    LEFTPAR         reduce using rule 59 (exp1 -> empty .)
    CTEINT          reduce using rule 59 (exp1 -> empty .)
    CTEFLOAT        reduce using rule 59 (exp1 -> empty .)
    CTECHAR         reduce using rule 59 (exp1 -> empty .)
    RIGHTBR         reduce using rule 59 (exp1 -> empty .)
    RIGHTPAR        reduce using rule 59 (exp1 -> empty .)
    RIGHTSQR        reduce using rule 59 (exp1 -> empty .)
    COMMA           reduce using rule 59 (exp1 -> empty .)
    SEMICOLON       reduce using rule 59 (exp1 -> empty .)
    TO              reduce using rule 59 (exp1 -> empty .)
    DO              reduce using rule 59 (exp1 -> empty .)


state 102

    (60) andexp -> boolexp andexp1 .

    OR              reduce using rule 60 (andexp -> boolexp andexp1 .)
    ID              reduce using rule 60 (andexp -> boolexp andexp1 .)
    READ            reduce using rule 60 (andexp -> boolexp andexp1 .)
    WRITE           reduce using rule 60 (andexp -> boolexp andexp1 .)
    RETURN          reduce using rule 60 (andexp -> boolexp andexp1 .)
    IF              reduce using rule 60 (andexp -> boolexp andexp1 .)
    WHILE           reduce using rule 60 (andexp -> boolexp andexp1 .)
    FOR             reduce using rule 60 (andexp -> boolexp andexp1 .)
    LEFTPAR         reduce using rule 60 (andexp -> boolexp andexp1 .)
    CTEINT          reduce using rule 60 (andexp -> boolexp andexp1 .)
    CTEFLOAT        reduce using rule 60 (andexp -> boolexp andexp1 .)
    CTECHAR         reduce using rule 60 (andexp -> boolexp andexp1 .)
    RIGHTBR         reduce using rule 60 (andexp -> boolexp andexp1 .)
    RIGHTPAR        reduce using rule 60 (andexp -> boolexp andexp1 .)
    RIGHTSQR        reduce using rule 60 (andexp -> boolexp andexp1 .)
    COMMA           reduce using rule 60 (andexp -> boolexp andexp1 .)
    SEMICOLON       reduce using rule 60 (andexp -> boolexp andexp1 .)
    TO              reduce using rule 60 (andexp -> boolexp andexp1 .)
    DO              reduce using rule 60 (andexp -> boolexp andexp1 .)


state 103

    (61) andexp1 -> neuraland . andexp
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70
    ID              shift and go to state 127

    andexp                         shift and go to state 147
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 104

    (62) andexp1 -> empty .

    OR              reduce using rule 62 (andexp1 -> empty .)
    ID              reduce using rule 62 (andexp1 -> empty .)
    READ            reduce using rule 62 (andexp1 -> empty .)
    WRITE           reduce using rule 62 (andexp1 -> empty .)
    RETURN          reduce using rule 62 (andexp1 -> empty .)
    IF              reduce using rule 62 (andexp1 -> empty .)
    WHILE           reduce using rule 62 (andexp1 -> empty .)
    FOR             reduce using rule 62 (andexp1 -> empty .)
    LEFTPAR         reduce using rule 62 (andexp1 -> empty .)
    CTEINT          reduce using rule 62 (andexp1 -> empty .)
    CTEFLOAT        reduce using rule 62 (andexp1 -> empty .)
    CTECHAR         reduce using rule 62 (andexp1 -> empty .)
    RIGHTBR         reduce using rule 62 (andexp1 -> empty .)
    RIGHTPAR        reduce using rule 62 (andexp1 -> empty .)
    RIGHTSQR        reduce using rule 62 (andexp1 -> empty .)
    COMMA           reduce using rule 62 (andexp1 -> empty .)
    SEMICOLON       reduce using rule 62 (andexp1 -> empty .)
    TO              reduce using rule 62 (andexp1 -> empty .)
    DO              reduce using rule 62 (andexp1 -> empty .)


state 105

    (63) neuraland -> AND .

    LEFTPAR         reduce using rule 63 (neuraland -> AND .)
    CTEINT          reduce using rule 63 (neuraland -> AND .)
    CTEFLOAT        reduce using rule 63 (neuraland -> AND .)
    CTECHAR         reduce using rule 63 (neuraland -> AND .)
    ID              reduce using rule 63 (neuraland -> AND .)


state 106

    (64) boolexp -> arithexp boolexp1 .

    AND             reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    OR              reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    ID              reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    READ            reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    WRITE           reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    RETURN          reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    IF              reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    WHILE           reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    FOR             reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    LEFTPAR         reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    CTEINT          reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    CTEFLOAT        reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    CTECHAR         reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    RIGHTBR         reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    RIGHTPAR        reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    RIGHTSQR        reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    COMMA           reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    SEMICOLON       reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    TO              reduce using rule 64 (boolexp -> arithexp boolexp1 .)
    DO              reduce using rule 64 (boolexp -> arithexp boolexp1 .)


state 107

    (65) boolexp1 -> neuralbool . arithexp
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70
    ID              shift and go to state 127

    arithexp                       shift and go to state 148
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 108

    (66) boolexp1 -> empty .

    AND             reduce using rule 66 (boolexp1 -> empty .)
    OR              reduce using rule 66 (boolexp1 -> empty .)
    ID              reduce using rule 66 (boolexp1 -> empty .)
    READ            reduce using rule 66 (boolexp1 -> empty .)
    WRITE           reduce using rule 66 (boolexp1 -> empty .)
    RETURN          reduce using rule 66 (boolexp1 -> empty .)
    IF              reduce using rule 66 (boolexp1 -> empty .)
    WHILE           reduce using rule 66 (boolexp1 -> empty .)
    FOR             reduce using rule 66 (boolexp1 -> empty .)
    LEFTPAR         reduce using rule 66 (boolexp1 -> empty .)
    CTEINT          reduce using rule 66 (boolexp1 -> empty .)
    CTEFLOAT        reduce using rule 66 (boolexp1 -> empty .)
    CTECHAR         reduce using rule 66 (boolexp1 -> empty .)
    RIGHTBR         reduce using rule 66 (boolexp1 -> empty .)
    RIGHTPAR        reduce using rule 66 (boolexp1 -> empty .)
    RIGHTSQR        reduce using rule 66 (boolexp1 -> empty .)
    COMMA           reduce using rule 66 (boolexp1 -> empty .)
    SEMICOLON       reduce using rule 66 (boolexp1 -> empty .)
    TO              reduce using rule 66 (boolexp1 -> empty .)
    DO              reduce using rule 66 (boolexp1 -> empty .)


state 109

    (67) neuralbool -> GREATER .

    LEFTPAR         reduce using rule 67 (neuralbool -> GREATER .)
    CTEINT          reduce using rule 67 (neuralbool -> GREATER .)
    CTEFLOAT        reduce using rule 67 (neuralbool -> GREATER .)
    CTECHAR         reduce using rule 67 (neuralbool -> GREATER .)
    ID              reduce using rule 67 (neuralbool -> GREATER .)


state 110

    (68) neuralbool -> GREATERAND .

    LEFTPAR         reduce using rule 68 (neuralbool -> GREATERAND .)
    CTEINT          reduce using rule 68 (neuralbool -> GREATERAND .)
    CTEFLOAT        reduce using rule 68 (neuralbool -> GREATERAND .)
    CTECHAR         reduce using rule 68 (neuralbool -> GREATERAND .)
    ID              reduce using rule 68 (neuralbool -> GREATERAND .)


state 111

    (69) neuralbool -> LESSER .

    LEFTPAR         reduce using rule 69 (neuralbool -> LESSER .)
    CTEINT          reduce using rule 69 (neuralbool -> LESSER .)
    CTEFLOAT        reduce using rule 69 (neuralbool -> LESSER .)
    CTECHAR         reduce using rule 69 (neuralbool -> LESSER .)
    ID              reduce using rule 69 (neuralbool -> LESSER .)


state 112

    (70) neuralbool -> LESSERAND .

    LEFTPAR         reduce using rule 70 (neuralbool -> LESSERAND .)
    CTEINT          reduce using rule 70 (neuralbool -> LESSERAND .)
    CTEFLOAT        reduce using rule 70 (neuralbool -> LESSERAND .)
    CTECHAR         reduce using rule 70 (neuralbool -> LESSERAND .)
    ID              reduce using rule 70 (neuralbool -> LESSERAND .)


state 113

    (71) neuralbool -> SAME .

    LEFTPAR         reduce using rule 71 (neuralbool -> SAME .)
    CTEINT          reduce using rule 71 (neuralbool -> SAME .)
    CTEFLOAT        reduce using rule 71 (neuralbool -> SAME .)
    CTECHAR         reduce using rule 71 (neuralbool -> SAME .)
    ID              reduce using rule 71 (neuralbool -> SAME .)


state 114

    (72) neuralbool -> NOTSAME .

    LEFTPAR         reduce using rule 72 (neuralbool -> NOTSAME .)
    CTEINT          reduce using rule 72 (neuralbool -> NOTSAME .)
    CTEFLOAT        reduce using rule 72 (neuralbool -> NOTSAME .)
    CTECHAR         reduce using rule 72 (neuralbool -> NOTSAME .)
    ID              reduce using rule 72 (neuralbool -> NOTSAME .)


state 115

    (73) neuralbool -> NOT .

    LEFTPAR         reduce using rule 73 (neuralbool -> NOT .)
    CTEINT          reduce using rule 73 (neuralbool -> NOT .)
    CTEFLOAT        reduce using rule 73 (neuralbool -> NOT .)
    CTECHAR         reduce using rule 73 (neuralbool -> NOT .)
    ID              reduce using rule 73 (neuralbool -> NOT .)


state 116

    (74) arithexp -> geoexp arithexp1 .

    GREATER         reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    GREATERAND      reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    LESSER          reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    LESSERAND       reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    SAME            reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    NOTSAME         reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    NOT             reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    AND             reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    OR              reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    ID              reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    READ            reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    WRITE           reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    RETURN          reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    IF              reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    WHILE           reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    FOR             reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    LEFTPAR         reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    CTEINT          reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    CTEFLOAT        reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    CTECHAR         reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    RIGHTBR         reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    RIGHTPAR        reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    RIGHTSQR        reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    COMMA           reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    SEMICOLON       reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    TO              reduce using rule 74 (arithexp -> geoexp arithexp1 .)
    DO              reduce using rule 74 (arithexp -> geoexp arithexp1 .)


state 117

    (75) arithexp1 -> neuralarith . arithexp
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70
    ID              shift and go to state 127

    arithexp                       shift and go to state 149
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 118

    (76) arithexp1 -> empty .

    GREATER         reduce using rule 76 (arithexp1 -> empty .)
    GREATERAND      reduce using rule 76 (arithexp1 -> empty .)
    LESSER          reduce using rule 76 (arithexp1 -> empty .)
    LESSERAND       reduce using rule 76 (arithexp1 -> empty .)
    SAME            reduce using rule 76 (arithexp1 -> empty .)
    NOTSAME         reduce using rule 76 (arithexp1 -> empty .)
    NOT             reduce using rule 76 (arithexp1 -> empty .)
    AND             reduce using rule 76 (arithexp1 -> empty .)
    OR              reduce using rule 76 (arithexp1 -> empty .)
    ID              reduce using rule 76 (arithexp1 -> empty .)
    READ            reduce using rule 76 (arithexp1 -> empty .)
    WRITE           reduce using rule 76 (arithexp1 -> empty .)
    RETURN          reduce using rule 76 (arithexp1 -> empty .)
    IF              reduce using rule 76 (arithexp1 -> empty .)
    WHILE           reduce using rule 76 (arithexp1 -> empty .)
    FOR             reduce using rule 76 (arithexp1 -> empty .)
    LEFTPAR         reduce using rule 76 (arithexp1 -> empty .)
    CTEINT          reduce using rule 76 (arithexp1 -> empty .)
    CTEFLOAT        reduce using rule 76 (arithexp1 -> empty .)
    CTECHAR         reduce using rule 76 (arithexp1 -> empty .)
    RIGHTBR         reduce using rule 76 (arithexp1 -> empty .)
    RIGHTPAR        reduce using rule 76 (arithexp1 -> empty .)
    RIGHTSQR        reduce using rule 76 (arithexp1 -> empty .)
    COMMA           reduce using rule 76 (arithexp1 -> empty .)
    SEMICOLON       reduce using rule 76 (arithexp1 -> empty .)
    TO              reduce using rule 76 (arithexp1 -> empty .)
    DO              reduce using rule 76 (arithexp1 -> empty .)


state 119

    (77) neuralarith -> PLUS .

    LEFTPAR         reduce using rule 77 (neuralarith -> PLUS .)
    CTEINT          reduce using rule 77 (neuralarith -> PLUS .)
    CTEFLOAT        reduce using rule 77 (neuralarith -> PLUS .)
    CTECHAR         reduce using rule 77 (neuralarith -> PLUS .)
    ID              reduce using rule 77 (neuralarith -> PLUS .)


state 120

    (78) neuralarith -> REST .

    LEFTPAR         reduce using rule 78 (neuralarith -> REST .)
    CTEINT          reduce using rule 78 (neuralarith -> REST .)
    CTEFLOAT        reduce using rule 78 (neuralarith -> REST .)
    CTECHAR         reduce using rule 78 (neuralarith -> REST .)
    ID              reduce using rule 78 (neuralarith -> REST .)


state 121

    (79) geoexp -> finexp geoexp1 .

    PLUS            reduce using rule 79 (geoexp -> finexp geoexp1 .)
    REST            reduce using rule 79 (geoexp -> finexp geoexp1 .)
    GREATER         reduce using rule 79 (geoexp -> finexp geoexp1 .)
    GREATERAND      reduce using rule 79 (geoexp -> finexp geoexp1 .)
    LESSER          reduce using rule 79 (geoexp -> finexp geoexp1 .)
    LESSERAND       reduce using rule 79 (geoexp -> finexp geoexp1 .)
    SAME            reduce using rule 79 (geoexp -> finexp geoexp1 .)
    NOTSAME         reduce using rule 79 (geoexp -> finexp geoexp1 .)
    NOT             reduce using rule 79 (geoexp -> finexp geoexp1 .)
    AND             reduce using rule 79 (geoexp -> finexp geoexp1 .)
    OR              reduce using rule 79 (geoexp -> finexp geoexp1 .)
    ID              reduce using rule 79 (geoexp -> finexp geoexp1 .)
    READ            reduce using rule 79 (geoexp -> finexp geoexp1 .)
    WRITE           reduce using rule 79 (geoexp -> finexp geoexp1 .)
    RETURN          reduce using rule 79 (geoexp -> finexp geoexp1 .)
    IF              reduce using rule 79 (geoexp -> finexp geoexp1 .)
    WHILE           reduce using rule 79 (geoexp -> finexp geoexp1 .)
    FOR             reduce using rule 79 (geoexp -> finexp geoexp1 .)
    LEFTPAR         reduce using rule 79 (geoexp -> finexp geoexp1 .)
    CTEINT          reduce using rule 79 (geoexp -> finexp geoexp1 .)
    CTEFLOAT        reduce using rule 79 (geoexp -> finexp geoexp1 .)
    CTECHAR         reduce using rule 79 (geoexp -> finexp geoexp1 .)
    RIGHTBR         reduce using rule 79 (geoexp -> finexp geoexp1 .)
    RIGHTPAR        reduce using rule 79 (geoexp -> finexp geoexp1 .)
    RIGHTSQR        reduce using rule 79 (geoexp -> finexp geoexp1 .)
    COMMA           reduce using rule 79 (geoexp -> finexp geoexp1 .)
    SEMICOLON       reduce using rule 79 (geoexp -> finexp geoexp1 .)
    TO              reduce using rule 79 (geoexp -> finexp geoexp1 .)
    DO              reduce using rule 79 (geoexp -> finexp geoexp1 .)


state 122

    (80) geoexp1 -> neuralgeo . geoexp
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70
    ID              shift and go to state 127

    geoexp                         shift and go to state 150
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 123

    (81) geoexp1 -> empty .

    PLUS            reduce using rule 81 (geoexp1 -> empty .)
    REST            reduce using rule 81 (geoexp1 -> empty .)
    GREATER         reduce using rule 81 (geoexp1 -> empty .)
    GREATERAND      reduce using rule 81 (geoexp1 -> empty .)
    LESSER          reduce using rule 81 (geoexp1 -> empty .)
    LESSERAND       reduce using rule 81 (geoexp1 -> empty .)
    SAME            reduce using rule 81 (geoexp1 -> empty .)
    NOTSAME         reduce using rule 81 (geoexp1 -> empty .)
    NOT             reduce using rule 81 (geoexp1 -> empty .)
    AND             reduce using rule 81 (geoexp1 -> empty .)
    OR              reduce using rule 81 (geoexp1 -> empty .)
    ID              reduce using rule 81 (geoexp1 -> empty .)
    READ            reduce using rule 81 (geoexp1 -> empty .)
    WRITE           reduce using rule 81 (geoexp1 -> empty .)
    RETURN          reduce using rule 81 (geoexp1 -> empty .)
    IF              reduce using rule 81 (geoexp1 -> empty .)
    WHILE           reduce using rule 81 (geoexp1 -> empty .)
    FOR             reduce using rule 81 (geoexp1 -> empty .)
    LEFTPAR         reduce using rule 81 (geoexp1 -> empty .)
    CTEINT          reduce using rule 81 (geoexp1 -> empty .)
    CTEFLOAT        reduce using rule 81 (geoexp1 -> empty .)
    CTECHAR         reduce using rule 81 (geoexp1 -> empty .)
    RIGHTBR         reduce using rule 81 (geoexp1 -> empty .)
    RIGHTPAR        reduce using rule 81 (geoexp1 -> empty .)
    RIGHTSQR        reduce using rule 81 (geoexp1 -> empty .)
    COMMA           reduce using rule 81 (geoexp1 -> empty .)
    SEMICOLON       reduce using rule 81 (geoexp1 -> empty .)
    TO              reduce using rule 81 (geoexp1 -> empty .)
    DO              reduce using rule 81 (geoexp1 -> empty .)


state 124

    (82) neuralgeo -> TIMES .

    LEFTPAR         reduce using rule 82 (neuralgeo -> TIMES .)
    CTEINT          reduce using rule 82 (neuralgeo -> TIMES .)
    CTEFLOAT        reduce using rule 82 (neuralgeo -> TIMES .)
    CTECHAR         reduce using rule 82 (neuralgeo -> TIMES .)
    ID              reduce using rule 82 (neuralgeo -> TIMES .)


state 125

    (83) neuralgeo -> DIVIDE .

    LEFTPAR         reduce using rule 83 (neuralgeo -> DIVIDE .)
    CTEINT          reduce using rule 83 (neuralgeo -> DIVIDE .)
    CTEFLOAT        reduce using rule 83 (neuralgeo -> DIVIDE .)
    CTECHAR         reduce using rule 83 (neuralgeo -> DIVIDE .)
    ID              reduce using rule 83 (neuralgeo -> DIVIDE .)


state 126

    (86) finexp -> addparenth exp . popparenth
    (85) popparenth -> . RIGHTPAR

    RIGHTPAR        shift and go to state 152

    popparenth                     shift and go to state 151

state 127

    (91) cteexp -> ID . paramsexp
    (92) paramsexp -> . LEFTPAR paramsexp2 RIGHTPAR
    (93) paramsexp -> . idarray
    (55) idarray -> . LEFTSQR exp RIGHTSQR
    (56) idarray -> . empty
    (98) empty -> .

  ! shift/reduce conflict for LEFTPAR resolved as shift
    LEFTPAR         shift and go to state 92
    LEFTSQR         shift and go to state 90
    TIMES           reduce using rule 98 (empty -> .)
    DIVIDE          reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    REST            reduce using rule 98 (empty -> .)
    GREATER         reduce using rule 98 (empty -> .)
    GREATERAND      reduce using rule 98 (empty -> .)
    LESSER          reduce using rule 98 (empty -> .)
    LESSERAND       reduce using rule 98 (empty -> .)
    SAME            reduce using rule 98 (empty -> .)
    NOTSAME         reduce using rule 98 (empty -> .)
    NOT             reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RIGHTPAR        reduce using rule 98 (empty -> .)
    RIGHTSQR        reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)
    ID              reduce using rule 98 (empty -> .)
    READ            reduce using rule 98 (empty -> .)
    WRITE           reduce using rule 98 (empty -> .)
    RETURN          reduce using rule 98 (empty -> .)
    IF              reduce using rule 98 (empty -> .)
    WHILE           reduce using rule 98 (empty -> .)
    FOR             reduce using rule 98 (empty -> .)
    CTEINT          reduce using rule 98 (empty -> .)
    CTEFLOAT        reduce using rule 98 (empty -> .)
    CTECHAR         reduce using rule 98 (empty -> .)
    RIGHTBR         reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    DO              reduce using rule 98 (empty -> .)

  ! LEFTPAR         [ reduce using rule 98 (empty -> .) ]

    paramsexp                      shift and go to state 89
    idarray                        shift and go to state 153
    empty                          shift and go to state 91

state 128

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON . varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules
    (3) varsgl -> . VARS vars
    (4) varsgl -> . empty
    (98) empty -> .

    VARS            shift and go to state 7
    LEFTBR          reduce using rule 98 (empty -> .)

    varsgl                         shift and go to state 154
    empty                          shift and go to state 8

state 129

    (22) parameters -> typing COLON ID . idarray mulparams
    (55) idarray -> . LEFTSQR exp RIGHTSQR
    (56) idarray -> . empty
    (98) empty -> .

    LEFTSQR         shift and go to state 90
    COMMA           reduce using rule 98 (empty -> .)
    RIGHTPAR        reduce using rule 98 (empty -> .)

    idarray                        shift and go to state 155
    empty                          shift and go to state 91

state 130

    (10) varsmul -> COMMA neuralinsertvar varsarr . varsmul
    (10) varsmul -> . COMMA neuralinsertvar varsarr varsmul
    (11) varsmul -> . SEMICOLON

    COMMA           shift and go to state 39
    SEMICOLON       shift and go to state 40

    varsmul                        shift and go to state 156

state 131

    (38) assign -> ID idarray EQUAL . exp SEMICOLON
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70
    ID              shift and go to state 127

    exp                            shift and go to state 157
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 132

    (55) idarray -> LEFTSQR exp . RIGHTSQR

    RIGHTSQR        shift and go to state 158


state 133

    (92) paramsexp -> LEFTPAR paramsexp2 . RIGHTPAR

    RIGHTPAR        shift and go to state 159


state 134

    (94) paramsexp2 -> exp . auxparamsexp2
    (96) auxparamsexp2 -> . COMMA exp auxparamsexp2
    (97) auxparamsexp2 -> . empty
    (98) empty -> .

    COMMA           shift and go to state 161
    RIGHTPAR        reduce using rule 98 (empty -> .)

    auxparamsexp2                  shift and go to state 160
    empty                          shift and go to state 162

state 135

    (95) paramsexp2 -> empty .

    RIGHTPAR        reduce using rule 95 (paramsexp2 -> empty .)


state 136

    (46) reading -> READ LEFTPAR ID . idarray mulread RIGHTPAR SEMICOLON
    (55) idarray -> . LEFTSQR exp RIGHTSQR
    (56) idarray -> . empty
    (98) empty -> .

    LEFTSQR         shift and go to state 90
    COMMA           reduce using rule 98 (empty -> .)
    RIGHTPAR        reduce using rule 98 (empty -> .)

    idarray                        shift and go to state 163
    empty                          shift and go to state 91

state 137

    (39) writing -> WRITE LEFTPAR auxwrite . mulwrite RIGHTPAR SEMICOLON
    (44) mulwrite -> . COMMA auxwrite mulwrite
    (45) mulwrite -> . empty
    (98) empty -> .

    COMMA           shift and go to state 165
    RIGHTPAR        reduce using rule 98 (empty -> .)

    mulwrite                       shift and go to state 164
    empty                          shift and go to state 166

state 138

    (40) auxwrite -> writetyping .

    COMMA           reduce using rule 40 (auxwrite -> writetyping .)
    RIGHTPAR        reduce using rule 40 (auxwrite -> writetyping .)


state 139

    (41) auxwrite -> exp .

    COMMA           reduce using rule 41 (auxwrite -> exp .)
    RIGHTPAR        reduce using rule 41 (auxwrite -> exp .)


state 140

    (42) writetyping -> STRING .

    COMMA           reduce using rule 42 (writetyping -> STRING .)
    RIGHTPAR        reduce using rule 42 (writetyping -> STRING .)


state 141

    (43) writetyping -> CTECHAR .
    (90) cteexp -> CTECHAR .

  ! reduce/reduce conflict for COMMA resolved using rule 43 (writetyping -> CTECHAR .)
  ! reduce/reduce conflict for RIGHTPAR resolved using rule 43 (writetyping -> CTECHAR .)
    COMMA           reduce using rule 43 (writetyping -> CTECHAR .)
    RIGHTPAR        reduce using rule 43 (writetyping -> CTECHAR .)
    TIMES           reduce using rule 90 (cteexp -> CTECHAR .)
    DIVIDE          reduce using rule 90 (cteexp -> CTECHAR .)
    PLUS            reduce using rule 90 (cteexp -> CTECHAR .)
    REST            reduce using rule 90 (cteexp -> CTECHAR .)
    GREATER         reduce using rule 90 (cteexp -> CTECHAR .)
    GREATERAND      reduce using rule 90 (cteexp -> CTECHAR .)
    LESSER          reduce using rule 90 (cteexp -> CTECHAR .)
    LESSERAND       reduce using rule 90 (cteexp -> CTECHAR .)
    SAME            reduce using rule 90 (cteexp -> CTECHAR .)
    NOTSAME         reduce using rule 90 (cteexp -> CTECHAR .)
    NOT             reduce using rule 90 (cteexp -> CTECHAR .)
    AND             reduce using rule 90 (cteexp -> CTECHAR .)
    OR              reduce using rule 90 (cteexp -> CTECHAR .)

  ! COMMA           [ reduce using rule 90 (cteexp -> CTECHAR .) ]
  ! RIGHTPAR        [ reduce using rule 90 (cteexp -> CTECHAR .) ]


state 142

    (49) returning -> RETURN LEFTPAR exp . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 167


state 143

    (50) ifing -> IF LEFTPAR exp . RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing

    RIGHTPAR        shift and go to state 168


state 144

    (53) whiling -> WHILE LEFTPAR exp . RIGHTPAR DO LEFTBR statutes RIGHTBR

    RIGHTPAR        shift and go to state 169


state 145

    (54) foring -> FOR ID idarray . EQUAL exp TO exp DO LEFTBR statutes RIGHTBR

    EQUAL           shift and go to state 170


state 146

    (58) exp1 -> OR exp .

    ID              reduce using rule 58 (exp1 -> OR exp .)
    READ            reduce using rule 58 (exp1 -> OR exp .)
    WRITE           reduce using rule 58 (exp1 -> OR exp .)
    RETURN          reduce using rule 58 (exp1 -> OR exp .)
    IF              reduce using rule 58 (exp1 -> OR exp .)
    WHILE           reduce using rule 58 (exp1 -> OR exp .)
    FOR             reduce using rule 58 (exp1 -> OR exp .)
    LEFTPAR         reduce using rule 58 (exp1 -> OR exp .)
    CTEINT          reduce using rule 58 (exp1 -> OR exp .)
    CTEFLOAT        reduce using rule 58 (exp1 -> OR exp .)
    CTECHAR         reduce using rule 58 (exp1 -> OR exp .)
    RIGHTBR         reduce using rule 58 (exp1 -> OR exp .)
    RIGHTPAR        reduce using rule 58 (exp1 -> OR exp .)
    RIGHTSQR        reduce using rule 58 (exp1 -> OR exp .)
    COMMA           reduce using rule 58 (exp1 -> OR exp .)
    SEMICOLON       reduce using rule 58 (exp1 -> OR exp .)
    TO              reduce using rule 58 (exp1 -> OR exp .)
    DO              reduce using rule 58 (exp1 -> OR exp .)


state 147

    (61) andexp1 -> neuraland andexp .

    OR              reduce using rule 61 (andexp1 -> neuraland andexp .)
    ID              reduce using rule 61 (andexp1 -> neuraland andexp .)
    READ            reduce using rule 61 (andexp1 -> neuraland andexp .)
    WRITE           reduce using rule 61 (andexp1 -> neuraland andexp .)
    RETURN          reduce using rule 61 (andexp1 -> neuraland andexp .)
    IF              reduce using rule 61 (andexp1 -> neuraland andexp .)
    WHILE           reduce using rule 61 (andexp1 -> neuraland andexp .)
    FOR             reduce using rule 61 (andexp1 -> neuraland andexp .)
    LEFTPAR         reduce using rule 61 (andexp1 -> neuraland andexp .)
    CTEINT          reduce using rule 61 (andexp1 -> neuraland andexp .)
    CTEFLOAT        reduce using rule 61 (andexp1 -> neuraland andexp .)
    CTECHAR         reduce using rule 61 (andexp1 -> neuraland andexp .)
    RIGHTBR         reduce using rule 61 (andexp1 -> neuraland andexp .)
    RIGHTPAR        reduce using rule 61 (andexp1 -> neuraland andexp .)
    RIGHTSQR        reduce using rule 61 (andexp1 -> neuraland andexp .)
    COMMA           reduce using rule 61 (andexp1 -> neuraland andexp .)
    SEMICOLON       reduce using rule 61 (andexp1 -> neuraland andexp .)
    TO              reduce using rule 61 (andexp1 -> neuraland andexp .)
    DO              reduce using rule 61 (andexp1 -> neuraland andexp .)


state 148

    (65) boolexp1 -> neuralbool arithexp .

    AND             reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    OR              reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    ID              reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    READ            reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    WRITE           reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    RETURN          reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    IF              reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    WHILE           reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    FOR             reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    LEFTPAR         reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    CTEINT          reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    CTEFLOAT        reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    CTECHAR         reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    RIGHTBR         reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    RIGHTPAR        reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    RIGHTSQR        reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    COMMA           reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    SEMICOLON       reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    TO              reduce using rule 65 (boolexp1 -> neuralbool arithexp .)
    DO              reduce using rule 65 (boolexp1 -> neuralbool arithexp .)


state 149

    (75) arithexp1 -> neuralarith arithexp .

    GREATER         reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    GREATERAND      reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    LESSER          reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    LESSERAND       reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    SAME            reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    NOTSAME         reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    NOT             reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    AND             reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    OR              reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    ID              reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    READ            reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    WRITE           reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    RETURN          reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    IF              reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    WHILE           reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    FOR             reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    LEFTPAR         reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    CTEINT          reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    CTEFLOAT        reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    CTECHAR         reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    RIGHTBR         reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    RIGHTPAR        reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    RIGHTSQR        reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    COMMA           reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    SEMICOLON       reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    TO              reduce using rule 75 (arithexp1 -> neuralarith arithexp .)
    DO              reduce using rule 75 (arithexp1 -> neuralarith arithexp .)


state 150

    (80) geoexp1 -> neuralgeo geoexp .

    PLUS            reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    REST            reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    GREATER         reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    GREATERAND      reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    LESSER          reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    LESSERAND       reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    SAME            reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    NOTSAME         reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    NOT             reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    AND             reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    OR              reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    ID              reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    READ            reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    WRITE           reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    RETURN          reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    IF              reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    WHILE           reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    FOR             reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    LEFTPAR         reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    CTEINT          reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    CTEFLOAT        reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    CTECHAR         reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    RIGHTBR         reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    RIGHTPAR        reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    RIGHTSQR        reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    COMMA           reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    SEMICOLON       reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    TO              reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)
    DO              reduce using rule 80 (geoexp1 -> neuralgeo geoexp .)


state 151

    (86) finexp -> addparenth exp popparenth .

    TIMES           reduce using rule 86 (finexp -> addparenth exp popparenth .)
    DIVIDE          reduce using rule 86 (finexp -> addparenth exp popparenth .)
    PLUS            reduce using rule 86 (finexp -> addparenth exp popparenth .)
    REST            reduce using rule 86 (finexp -> addparenth exp popparenth .)
    GREATER         reduce using rule 86 (finexp -> addparenth exp popparenth .)
    GREATERAND      reduce using rule 86 (finexp -> addparenth exp popparenth .)
    LESSER          reduce using rule 86 (finexp -> addparenth exp popparenth .)
    LESSERAND       reduce using rule 86 (finexp -> addparenth exp popparenth .)
    SAME            reduce using rule 86 (finexp -> addparenth exp popparenth .)
    NOTSAME         reduce using rule 86 (finexp -> addparenth exp popparenth .)
    NOT             reduce using rule 86 (finexp -> addparenth exp popparenth .)
    AND             reduce using rule 86 (finexp -> addparenth exp popparenth .)
    OR              reduce using rule 86 (finexp -> addparenth exp popparenth .)
    ID              reduce using rule 86 (finexp -> addparenth exp popparenth .)
    READ            reduce using rule 86 (finexp -> addparenth exp popparenth .)
    WRITE           reduce using rule 86 (finexp -> addparenth exp popparenth .)
    RETURN          reduce using rule 86 (finexp -> addparenth exp popparenth .)
    IF              reduce using rule 86 (finexp -> addparenth exp popparenth .)
    WHILE           reduce using rule 86 (finexp -> addparenth exp popparenth .)
    FOR             reduce using rule 86 (finexp -> addparenth exp popparenth .)
    LEFTPAR         reduce using rule 86 (finexp -> addparenth exp popparenth .)
    CTEINT          reduce using rule 86 (finexp -> addparenth exp popparenth .)
    CTEFLOAT        reduce using rule 86 (finexp -> addparenth exp popparenth .)
    CTECHAR         reduce using rule 86 (finexp -> addparenth exp popparenth .)
    RIGHTBR         reduce using rule 86 (finexp -> addparenth exp popparenth .)
    RIGHTPAR        reduce using rule 86 (finexp -> addparenth exp popparenth .)
    RIGHTSQR        reduce using rule 86 (finexp -> addparenth exp popparenth .)
    COMMA           reduce using rule 86 (finexp -> addparenth exp popparenth .)
    SEMICOLON       reduce using rule 86 (finexp -> addparenth exp popparenth .)
    TO              reduce using rule 86 (finexp -> addparenth exp popparenth .)
    DO              reduce using rule 86 (finexp -> addparenth exp popparenth .)


state 152

    (85) popparenth -> RIGHTPAR .

    TIMES           reduce using rule 85 (popparenth -> RIGHTPAR .)
    DIVIDE          reduce using rule 85 (popparenth -> RIGHTPAR .)
    PLUS            reduce using rule 85 (popparenth -> RIGHTPAR .)
    REST            reduce using rule 85 (popparenth -> RIGHTPAR .)
    GREATER         reduce using rule 85 (popparenth -> RIGHTPAR .)
    GREATERAND      reduce using rule 85 (popparenth -> RIGHTPAR .)
    LESSER          reduce using rule 85 (popparenth -> RIGHTPAR .)
    LESSERAND       reduce using rule 85 (popparenth -> RIGHTPAR .)
    SAME            reduce using rule 85 (popparenth -> RIGHTPAR .)
    NOTSAME         reduce using rule 85 (popparenth -> RIGHTPAR .)
    NOT             reduce using rule 85 (popparenth -> RIGHTPAR .)
    AND             reduce using rule 85 (popparenth -> RIGHTPAR .)
    OR              reduce using rule 85 (popparenth -> RIGHTPAR .)
    ID              reduce using rule 85 (popparenth -> RIGHTPAR .)
    READ            reduce using rule 85 (popparenth -> RIGHTPAR .)
    WRITE           reduce using rule 85 (popparenth -> RIGHTPAR .)
    RETURN          reduce using rule 85 (popparenth -> RIGHTPAR .)
    IF              reduce using rule 85 (popparenth -> RIGHTPAR .)
    WHILE           reduce using rule 85 (popparenth -> RIGHTPAR .)
    FOR             reduce using rule 85 (popparenth -> RIGHTPAR .)
    LEFTPAR         reduce using rule 85 (popparenth -> RIGHTPAR .)
    CTEINT          reduce using rule 85 (popparenth -> RIGHTPAR .)
    CTEFLOAT        reduce using rule 85 (popparenth -> RIGHTPAR .)
    CTECHAR         reduce using rule 85 (popparenth -> RIGHTPAR .)
    RIGHTBR         reduce using rule 85 (popparenth -> RIGHTPAR .)
    RIGHTPAR        reduce using rule 85 (popparenth -> RIGHTPAR .)
    RIGHTSQR        reduce using rule 85 (popparenth -> RIGHTPAR .)
    COMMA           reduce using rule 85 (popparenth -> RIGHTPAR .)
    SEMICOLON       reduce using rule 85 (popparenth -> RIGHTPAR .)
    TO              reduce using rule 85 (popparenth -> RIGHTPAR .)
    DO              reduce using rule 85 (popparenth -> RIGHTPAR .)


state 153

    (93) paramsexp -> idarray .

    TIMES           reduce using rule 93 (paramsexp -> idarray .)
    DIVIDE          reduce using rule 93 (paramsexp -> idarray .)
    PLUS            reduce using rule 93 (paramsexp -> idarray .)
    REST            reduce using rule 93 (paramsexp -> idarray .)
    GREATER         reduce using rule 93 (paramsexp -> idarray .)
    GREATERAND      reduce using rule 93 (paramsexp -> idarray .)
    LESSER          reduce using rule 93 (paramsexp -> idarray .)
    LESSERAND       reduce using rule 93 (paramsexp -> idarray .)
    SAME            reduce using rule 93 (paramsexp -> idarray .)
    NOTSAME         reduce using rule 93 (paramsexp -> idarray .)
    NOT             reduce using rule 93 (paramsexp -> idarray .)
    AND             reduce using rule 93 (paramsexp -> idarray .)
    OR              reduce using rule 93 (paramsexp -> idarray .)
    RIGHTPAR        reduce using rule 93 (paramsexp -> idarray .)
    RIGHTSQR        reduce using rule 93 (paramsexp -> idarray .)
    COMMA           reduce using rule 93 (paramsexp -> idarray .)
    ID              reduce using rule 93 (paramsexp -> idarray .)
    READ            reduce using rule 93 (paramsexp -> idarray .)
    WRITE           reduce using rule 93 (paramsexp -> idarray .)
    RETURN          reduce using rule 93 (paramsexp -> idarray .)
    IF              reduce using rule 93 (paramsexp -> idarray .)
    WHILE           reduce using rule 93 (paramsexp -> idarray .)
    FOR             reduce using rule 93 (paramsexp -> idarray .)
    LEFTPAR         reduce using rule 93 (paramsexp -> idarray .)
    CTEINT          reduce using rule 93 (paramsexp -> idarray .)
    CTEFLOAT        reduce using rule 93 (paramsexp -> idarray .)
    CTECHAR         reduce using rule 93 (paramsexp -> idarray .)
    RIGHTBR         reduce using rule 93 (paramsexp -> idarray .)
    SEMICOLON       reduce using rule 93 (paramsexp -> idarray .)
    TO              reduce using rule 93 (paramsexp -> idarray .)
    DO              reduce using rule 93 (paramsexp -> idarray .)


state 154

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl . LEFTBR statutes RIGHTBR neuralendfuncs modules

    LEFTBR          shift and go to state 171


state 155

    (22) parameters -> typing COLON ID idarray . mulparams
    (24) mulparams -> . COMMA parameters
    (25) mulparams -> . empty
    (98) empty -> .

    COMMA           shift and go to state 173
    RIGHTPAR        reduce using rule 98 (empty -> .)

    mulparams                      shift and go to state 172
    empty                          shift and go to state 174

state 156

    (10) varsmul -> COMMA neuralinsertvar varsarr varsmul .

    INT             reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)
    FLOAT           reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)
    CHAR            reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)
    FUNCTION        reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)
    MAIN            reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)
    LEFTBR          reduce using rule 10 (varsmul -> COMMA neuralinsertvar varsarr varsmul .)


state 157

    (38) assign -> ID idarray EQUAL exp . SEMICOLON

    SEMICOLON       shift and go to state 175


state 158

    (55) idarray -> LEFTSQR exp RIGHTSQR .

    EQUAL           reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    TIMES           reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    DIVIDE          reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    PLUS            reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    REST            reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    GREATER         reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    GREATERAND      reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    LESSER          reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    LESSERAND       reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    SAME            reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    NOTSAME         reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    NOT             reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    AND             reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    OR              reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    ID              reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    READ            reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    WRITE           reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    RETURN          reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    IF              reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    WHILE           reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    FOR             reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    LEFTPAR         reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    CTEINT          reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    CTEFLOAT        reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    CTECHAR         reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    RIGHTBR         reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    RIGHTPAR        reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    RIGHTSQR        reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    COMMA           reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    SEMICOLON       reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    TO              reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)
    DO              reduce using rule 55 (idarray -> LEFTSQR exp RIGHTSQR .)


state 159

    (92) paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .

    TIMES           reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    DIVIDE          reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    PLUS            reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    REST            reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    GREATER         reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    GREATERAND      reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    LESSER          reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    LESSERAND       reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    SAME            reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    NOTSAME         reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    NOT             reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    AND             reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    OR              reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    ID              reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    READ            reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    WRITE           reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    RETURN          reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    IF              reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    WHILE           reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    FOR             reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    LEFTPAR         reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    CTEINT          reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    CTEFLOAT        reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    CTECHAR         reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    RIGHTBR         reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    RIGHTPAR        reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    RIGHTSQR        reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    COMMA           reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    SEMICOLON       reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    TO              reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)
    DO              reduce using rule 92 (paramsexp -> LEFTPAR paramsexp2 RIGHTPAR .)


state 160

    (94) paramsexp2 -> exp auxparamsexp2 .

    RIGHTPAR        reduce using rule 94 (paramsexp2 -> exp auxparamsexp2 .)


state 161

    (96) auxparamsexp2 -> COMMA . exp auxparamsexp2
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70
    ID              shift and go to state 127

    exp                            shift and go to state 176
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 162

    (97) auxparamsexp2 -> empty .

    RIGHTPAR        reduce using rule 97 (auxparamsexp2 -> empty .)


state 163

    (46) reading -> READ LEFTPAR ID idarray . mulread RIGHTPAR SEMICOLON
    (47) mulread -> . COMMA ID idarray mulread
    (48) mulread -> . empty
    (98) empty -> .

    COMMA           shift and go to state 178
    RIGHTPAR        reduce using rule 98 (empty -> .)

    mulread                        shift and go to state 177
    empty                          shift and go to state 179

state 164

    (39) writing -> WRITE LEFTPAR auxwrite mulwrite . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 180


state 165

    (44) mulwrite -> COMMA . auxwrite mulwrite
    (40) auxwrite -> . writetyping
    (41) auxwrite -> . exp
    (42) writetyping -> . STRING
    (43) writetyping -> . CTECHAR
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

    STRING          shift and go to state 140
    CTECHAR         shift and go to state 141
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    ID              shift and go to state 127

    auxwrite                       shift and go to state 181
    writetyping                    shift and go to state 138
    exp                            shift and go to state 139
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 166

    (45) mulwrite -> empty .

    RIGHTPAR        reduce using rule 45 (mulwrite -> empty .)


state 167

    (49) returning -> RETURN LEFTPAR exp RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 182


state 168

    (50) ifing -> IF LEFTPAR exp RIGHTPAR . THEN LEFTBR statutes RIGHTBR elsing

    THEN            shift and go to state 183


state 169

    (53) whiling -> WHILE LEFTPAR exp RIGHTPAR . DO LEFTBR statutes RIGHTBR

    DO              shift and go to state 184


state 170

    (54) foring -> FOR ID idarray EQUAL . exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70
    ID              shift and go to state 127

    exp                            shift and go to state 185
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 171

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR . statutes RIGHTBR neuralendfuncs modules
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (98) empty -> .
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RIGHTBR         reduce using rule 98 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70

  ! ID              [ reduce using rule 98 (empty -> .) ]
  ! READ            [ reduce using rule 98 (empty -> .) ]
  ! WRITE           [ reduce using rule 98 (empty -> .) ]
  ! RETURN          [ reduce using rule 98 (empty -> .) ]
  ! IF              [ reduce using rule 98 (empty -> .) ]
  ! WHILE           [ reduce using rule 98 (empty -> .) ]
  ! FOR             [ reduce using rule 98 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 98 (empty -> .) ]
  ! CTEINT          [ reduce using rule 98 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 98 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 98 (empty -> .) ]

    statutes                       shift and go to state 186
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    empty                          shift and go to state 61
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 172

    (22) parameters -> typing COLON ID idarray mulparams .

    RIGHTPAR        reduce using rule 22 (parameters -> typing COLON ID idarray mulparams .)


state 173

    (24) mulparams -> COMMA . parameters
    (22) parameters -> . typing COLON ID idarray mulparams
    (23) parameters -> . empty
    (19) typing -> . INT
    (20) typing -> . FLOAT
    (21) typing -> . CHAR
    (98) empty -> .

    INT             shift and go to state 15
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 17
    RIGHTPAR        reduce using rule 98 (empty -> .)

    parameters                     shift and go to state 187
    typing                         shift and go to state 36
    empty                          shift and go to state 37

state 174

    (25) mulparams -> empty .

    RIGHTPAR        reduce using rule 25 (mulparams -> empty .)


state 175

    (38) assign -> ID idarray EQUAL exp SEMICOLON .

    ID              reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    READ            reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    WRITE           reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    RETURN          reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    IF              reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    WHILE           reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    FOR             reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    LEFTPAR         reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    CTEINT          reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    CTEFLOAT        reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    CTECHAR         reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)
    RIGHTBR         reduce using rule 38 (assign -> ID idarray EQUAL exp SEMICOLON .)


state 176

    (96) auxparamsexp2 -> COMMA exp . auxparamsexp2
    (96) auxparamsexp2 -> . COMMA exp auxparamsexp2
    (97) auxparamsexp2 -> . empty
    (98) empty -> .

    COMMA           shift and go to state 161
    RIGHTPAR        reduce using rule 98 (empty -> .)

    auxparamsexp2                  shift and go to state 188
    empty                          shift and go to state 162

state 177

    (46) reading -> READ LEFTPAR ID idarray mulread . RIGHTPAR SEMICOLON

    RIGHTPAR        shift and go to state 189


state 178

    (47) mulread -> COMMA . ID idarray mulread

    ID              shift and go to state 190


state 179

    (48) mulread -> empty .

    RIGHTPAR        reduce using rule 48 (mulread -> empty .)


state 180

    (39) writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 191


state 181

    (44) mulwrite -> COMMA auxwrite . mulwrite
    (44) mulwrite -> . COMMA auxwrite mulwrite
    (45) mulwrite -> . empty
    (98) empty -> .

    COMMA           shift and go to state 165
    RIGHTPAR        reduce using rule 98 (empty -> .)

    mulwrite                       shift and go to state 192
    empty                          shift and go to state 166

state 182

    (49) returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .

    ID              reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    READ            reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    IF              reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    LEFTPAR         reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    CTEINT          reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    CTEFLOAT        reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    CTECHAR         reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)
    RIGHTBR         reduce using rule 49 (returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON .)


state 183

    (50) ifing -> IF LEFTPAR exp RIGHTPAR THEN . LEFTBR statutes RIGHTBR elsing

    LEFTBR          shift and go to state 193


state 184

    (53) whiling -> WHILE LEFTPAR exp RIGHTPAR DO . LEFTBR statutes RIGHTBR

    LEFTBR          shift and go to state 194


state 185

    (54) foring -> FOR ID idarray EQUAL exp . TO exp DO LEFTBR statutes RIGHTBR

    TO              shift and go to state 195


state 186

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes . RIGHTBR neuralendfuncs modules

    RIGHTBR         shift and go to state 196


state 187

    (24) mulparams -> COMMA parameters .

    RIGHTPAR        reduce using rule 24 (mulparams -> COMMA parameters .)


state 188

    (96) auxparamsexp2 -> COMMA exp auxparamsexp2 .

    RIGHTPAR        reduce using rule 96 (auxparamsexp2 -> COMMA exp auxparamsexp2 .)


state 189

    (46) reading -> READ LEFTPAR ID idarray mulread RIGHTPAR . SEMICOLON

    SEMICOLON       shift and go to state 197


state 190

    (47) mulread -> COMMA ID . idarray mulread
    (55) idarray -> . LEFTSQR exp RIGHTSQR
    (56) idarray -> . empty
    (98) empty -> .

    LEFTSQR         shift and go to state 90
    COMMA           reduce using rule 98 (empty -> .)
    RIGHTPAR        reduce using rule 98 (empty -> .)

    idarray                        shift and go to state 198
    empty                          shift and go to state 91

state 191

    (39) writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .

    ID              reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    READ            reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    IF              reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    LEFTPAR         reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    CTEINT          reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    CTEFLOAT        reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    CTECHAR         reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)
    RIGHTBR         reduce using rule 39 (writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON .)


state 192

    (44) mulwrite -> COMMA auxwrite mulwrite .

    RIGHTPAR        reduce using rule 44 (mulwrite -> COMMA auxwrite mulwrite .)


state 193

    (50) ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR . statutes RIGHTBR elsing
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (98) empty -> .
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RIGHTBR         reduce using rule 98 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70

  ! ID              [ reduce using rule 98 (empty -> .) ]
  ! READ            [ reduce using rule 98 (empty -> .) ]
  ! WRITE           [ reduce using rule 98 (empty -> .) ]
  ! RETURN          [ reduce using rule 98 (empty -> .) ]
  ! IF              [ reduce using rule 98 (empty -> .) ]
  ! WHILE           [ reduce using rule 98 (empty -> .) ]
  ! FOR             [ reduce using rule 98 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 98 (empty -> .) ]
  ! CTEINT          [ reduce using rule 98 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 98 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 98 (empty -> .) ]

    exp                            shift and go to state 51
    statutes                       shift and go to state 199
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    empty                          shift and go to state 61
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 194

    (53) whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR . statutes RIGHTBR
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (98) empty -> .
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RIGHTBR         reduce using rule 98 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70

  ! ID              [ reduce using rule 98 (empty -> .) ]
  ! READ            [ reduce using rule 98 (empty -> .) ]
  ! WRITE           [ reduce using rule 98 (empty -> .) ]
  ! RETURN          [ reduce using rule 98 (empty -> .) ]
  ! IF              [ reduce using rule 98 (empty -> .) ]
  ! WHILE           [ reduce using rule 98 (empty -> .) ]
  ! FOR             [ reduce using rule 98 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 98 (empty -> .) ]
  ! CTEINT          [ reduce using rule 98 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 98 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 98 (empty -> .) ]

    exp                            shift and go to state 51
    statutes                       shift and go to state 200
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    empty                          shift and go to state 61
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 195

    (54) foring -> FOR ID idarray EQUAL exp TO . exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (60) andexp -> . boolexp andexp1
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70
    ID              shift and go to state 127

    exp                            shift and go to state 201
    andexp                         shift and go to state 60
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 196

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR . neuralendfuncs modules
    (18) neuralendfuncs -> .

    FUNCTION        reduce using rule 18 (neuralendfuncs -> .)
    MAIN            reduce using rule 18 (neuralendfuncs -> .)

    neuralendfuncs                 shift and go to state 202

state 197

    (46) reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .

    ID              reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    READ            reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    WRITE           reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    RETURN          reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    IF              reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    WHILE           reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    FOR             reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    LEFTPAR         reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    CTEINT          reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    CTEFLOAT        reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    CTECHAR         reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)
    RIGHTBR         reduce using rule 46 (reading -> READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON .)


state 198

    (47) mulread -> COMMA ID idarray . mulread
    (47) mulread -> . COMMA ID idarray mulread
    (48) mulread -> . empty
    (98) empty -> .

    COMMA           shift and go to state 178
    RIGHTPAR        reduce using rule 98 (empty -> .)

    mulread                        shift and go to state 203
    empty                          shift and go to state 179

state 199

    (50) ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes . RIGHTBR elsing

    RIGHTBR         shift and go to state 204


state 200

    (53) whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes . RIGHTBR

    RIGHTBR         shift and go to state 205


state 201

    (54) foring -> FOR ID idarray EQUAL exp TO exp . DO LEFTBR statutes RIGHTBR

    DO              shift and go to state 206


state 202

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs . modules
    (12) modules -> . FUNCTION functype neuralinsertfuncname funcparam
    (13) modules -> . empty
    (98) empty -> .

    FUNCTION        shift and go to state 10
    MAIN            reduce using rule 98 (empty -> .)

    modules                        shift and go to state 207
    empty                          shift and go to state 11

state 203

    (47) mulread -> COMMA ID idarray mulread .

    RIGHTPAR        reduce using rule 47 (mulread -> COMMA ID idarray mulread .)


state 204

    (50) ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR . elsing
    (51) elsing -> . ELSE LEFTBR statutes RIGHTBR
    (52) elsing -> . empty
    (98) empty -> .

    ELSE            shift and go to state 209
    ID              reduce using rule 98 (empty -> .)
    READ            reduce using rule 98 (empty -> .)
    WRITE           reduce using rule 98 (empty -> .)
    RETURN          reduce using rule 98 (empty -> .)
    IF              reduce using rule 98 (empty -> .)
    WHILE           reduce using rule 98 (empty -> .)
    FOR             reduce using rule 98 (empty -> .)
    LEFTPAR         reduce using rule 98 (empty -> .)
    CTEINT          reduce using rule 98 (empty -> .)
    CTEFLOAT        reduce using rule 98 (empty -> .)
    CTECHAR         reduce using rule 98 (empty -> .)
    RIGHTBR         reduce using rule 98 (empty -> .)

    elsing                         shift and go to state 208
    empty                          shift and go to state 210

state 205

    (53) whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .

    ID              reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    READ            reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    WRITE           reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    RETURN          reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    IF              reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    WHILE           reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    FOR             reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    LEFTPAR         reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    CTEINT          reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    CTEFLOAT        reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    CTECHAR         reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)
    RIGHTBR         reduce using rule 53 (whiling -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR .)


state 206

    (54) foring -> FOR ID idarray EQUAL exp TO exp DO . LEFTBR statutes RIGHTBR

    LEFTBR          shift and go to state 211


state 207

    (17) funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules .

    MAIN            reduce using rule 17 (funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR statutes RIGHTBR neuralendfuncs modules .)


state 208

    (50) ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .

    ID              reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    READ            reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    WRITE           reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    RETURN          reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    IF              reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    WHILE           reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    FOR             reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    LEFTPAR         reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    CTEINT          reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    CTEFLOAT        reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    CTECHAR         reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)
    RIGHTBR         reduce using rule 50 (ifing -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing .)


state 209

    (51) elsing -> ELSE . LEFTBR statutes RIGHTBR

    LEFTBR          shift and go to state 212


state 210

    (52) elsing -> empty .

    ID              reduce using rule 52 (elsing -> empty .)
    READ            reduce using rule 52 (elsing -> empty .)
    WRITE           reduce using rule 52 (elsing -> empty .)
    RETURN          reduce using rule 52 (elsing -> empty .)
    IF              reduce using rule 52 (elsing -> empty .)
    WHILE           reduce using rule 52 (elsing -> empty .)
    FOR             reduce using rule 52 (elsing -> empty .)
    LEFTPAR         reduce using rule 52 (elsing -> empty .)
    CTEINT          reduce using rule 52 (elsing -> empty .)
    CTEFLOAT        reduce using rule 52 (elsing -> empty .)
    CTECHAR         reduce using rule 52 (elsing -> empty .)
    RIGHTBR         reduce using rule 52 (elsing -> empty .)


state 211

    (54) foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR . statutes RIGHTBR
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (98) empty -> .
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RIGHTBR         reduce using rule 98 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70

  ! ID              [ reduce using rule 98 (empty -> .) ]
  ! READ            [ reduce using rule 98 (empty -> .) ]
  ! WRITE           [ reduce using rule 98 (empty -> .) ]
  ! RETURN          [ reduce using rule 98 (empty -> .) ]
  ! IF              [ reduce using rule 98 (empty -> .) ]
  ! WHILE           [ reduce using rule 98 (empty -> .) ]
  ! FOR             [ reduce using rule 98 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 98 (empty -> .) ]
  ! CTEINT          [ reduce using rule 98 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 98 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 98 (empty -> .) ]

    exp                            shift and go to state 51
    statutes                       shift and go to state 213
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    empty                          shift and go to state 61
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 212

    (51) elsing -> ELSE LEFTBR . statutes RIGHTBR
    (26) statutes -> . assign statutesaux
    (27) statutes -> . reading statutesaux
    (28) statutes -> . writing statutesaux
    (29) statutes -> . returning statutesaux
    (30) statutes -> . ifing statutesaux
    (31) statutes -> . whiling statutesaux
    (32) statutes -> . foring statutesaux
    (33) statutes -> . exp statutesaux
    (34) statutes -> . specialfunc statutesaux
    (38) assign -> . ID idarray EQUAL exp SEMICOLON
    (46) reading -> . READ LEFTPAR ID idarray mulread RIGHTPAR SEMICOLON
    (39) writing -> . WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON
    (49) returning -> . RETURN LEFTPAR exp RIGHTPAR SEMICOLON
    (50) ifing -> . IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR elsing
    (53) whiling -> . WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR
    (54) foring -> . FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR
    (57) exp -> . andexp exp1
    (37) specialfunc -> . empty
    (60) andexp -> . boolexp andexp1
    (98) empty -> .
    (64) boolexp -> . arithexp boolexp1
    (74) arithexp -> . geoexp arithexp1
    (79) geoexp -> . finexp geoexp1
    (86) finexp -> . addparenth exp popparenth
    (87) finexp -> . cteexp
    (84) addparenth -> . LEFTPAR
    (88) cteexp -> . CTEINT
    (89) cteexp -> . CTEFLOAT
    (90) cteexp -> . CTECHAR
    (91) cteexp -> . ID paramsexp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LEFTPAR resolved as shift
  ! shift/reduce conflict for CTEINT resolved as shift
  ! shift/reduce conflict for CTEFLOAT resolved as shift
  ! shift/reduce conflict for CTECHAR resolved as shift
    ID              shift and go to state 53
    READ            shift and go to state 54
    WRITE           shift and go to state 55
    RETURN          shift and go to state 56
    IF              shift and go to state 57
    WHILE           shift and go to state 58
    FOR             shift and go to state 59
    RIGHTBR         reduce using rule 98 (empty -> .)
    LEFTPAR         shift and go to state 42
    CTEINT          shift and go to state 68
    CTEFLOAT        shift and go to state 69
    CTECHAR         shift and go to state 70

  ! ID              [ reduce using rule 98 (empty -> .) ]
  ! READ            [ reduce using rule 98 (empty -> .) ]
  ! WRITE           [ reduce using rule 98 (empty -> .) ]
  ! RETURN          [ reduce using rule 98 (empty -> .) ]
  ! IF              [ reduce using rule 98 (empty -> .) ]
  ! WHILE           [ reduce using rule 98 (empty -> .) ]
  ! FOR             [ reduce using rule 98 (empty -> .) ]
  ! LEFTPAR         [ reduce using rule 98 (empty -> .) ]
  ! CTEINT          [ reduce using rule 98 (empty -> .) ]
  ! CTEFLOAT        [ reduce using rule 98 (empty -> .) ]
  ! CTECHAR         [ reduce using rule 98 (empty -> .) ]

    statutes                       shift and go to state 214
    assign                         shift and go to state 44
    reading                        shift and go to state 45
    writing                        shift and go to state 46
    returning                      shift and go to state 47
    ifing                          shift and go to state 48
    whiling                        shift and go to state 49
    foring                         shift and go to state 50
    exp                            shift and go to state 51
    specialfunc                    shift and go to state 52
    andexp                         shift and go to state 60
    empty                          shift and go to state 61
    boolexp                        shift and go to state 62
    arithexp                       shift and go to state 63
    geoexp                         shift and go to state 64
    finexp                         shift and go to state 65
    addparenth                     shift and go to state 66
    cteexp                         shift and go to state 67

state 213

    (54) foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes . RIGHTBR

    RIGHTBR         shift and go to state 215


state 214

    (51) elsing -> ELSE LEFTBR statutes . RIGHTBR

    RIGHTBR         shift and go to state 216


state 215

    (54) foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .

    ID              reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    READ            reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    WRITE           reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    RETURN          reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    IF              reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    WHILE           reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    FOR             reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    LEFTPAR         reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    CTEINT          reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    CTEFLOAT        reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    CTECHAR         reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)
    RIGHTBR         reduce using rule 54 (foring -> FOR ID idarray EQUAL exp TO exp DO LEFTBR statutes RIGHTBR .)


state 216

    (51) elsing -> ELSE LEFTBR statutes RIGHTBR .

    ID              reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    READ            reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    WRITE           reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    RETURN          reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    IF              reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    WHILE           reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    FOR             reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    LEFTPAR         reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    CTEINT          reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    CTEFLOAT        reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    CTECHAR         reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)
    RIGHTBR         reduce using rule 51 (elsing -> ELSE LEFTBR statutes RIGHTBR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 34 resolved as shift
WARNING: shift/reduce conflict for READ in state 34 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 34 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 34 resolved as shift
WARNING: shift/reduce conflict for IF in state 34 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 34 resolved as shift
WARNING: shift/reduce conflict for FOR in state 34 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 34 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 34 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 34 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 34 resolved as shift
WARNING: shift/reduce conflict for ID in state 44 resolved as shift
WARNING: shift/reduce conflict for READ in state 44 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 44 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 44 resolved as shift
WARNING: shift/reduce conflict for IF in state 44 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 44 resolved as shift
WARNING: shift/reduce conflict for FOR in state 44 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 44 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 44 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 44 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 44 resolved as shift
WARNING: shift/reduce conflict for ID in state 45 resolved as shift
WARNING: shift/reduce conflict for READ in state 45 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 45 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 45 resolved as shift
WARNING: shift/reduce conflict for IF in state 45 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 45 resolved as shift
WARNING: shift/reduce conflict for FOR in state 45 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 45 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 45 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 45 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 45 resolved as shift
WARNING: shift/reduce conflict for ID in state 46 resolved as shift
WARNING: shift/reduce conflict for READ in state 46 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 46 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 46 resolved as shift
WARNING: shift/reduce conflict for IF in state 46 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 46 resolved as shift
WARNING: shift/reduce conflict for FOR in state 46 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 46 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 46 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 46 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 46 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for READ in state 47 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 47 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 47 resolved as shift
WARNING: shift/reduce conflict for IF in state 47 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 47 resolved as shift
WARNING: shift/reduce conflict for FOR in state 47 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 47 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 47 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 47 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 48 resolved as shift
WARNING: shift/reduce conflict for READ in state 48 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 48 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 48 resolved as shift
WARNING: shift/reduce conflict for IF in state 48 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 48 resolved as shift
WARNING: shift/reduce conflict for FOR in state 48 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 48 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 48 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 48 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 48 resolved as shift
WARNING: shift/reduce conflict for ID in state 49 resolved as shift
WARNING: shift/reduce conflict for READ in state 49 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 49 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 49 resolved as shift
WARNING: shift/reduce conflict for IF in state 49 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 49 resolved as shift
WARNING: shift/reduce conflict for FOR in state 49 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 49 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 49 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 49 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 49 resolved as shift
WARNING: shift/reduce conflict for ID in state 50 resolved as shift
WARNING: shift/reduce conflict for READ in state 50 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 50 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 50 resolved as shift
WARNING: shift/reduce conflict for IF in state 50 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 50 resolved as shift
WARNING: shift/reduce conflict for FOR in state 50 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 50 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 50 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 50 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 50 resolved as shift
WARNING: shift/reduce conflict for ID in state 51 resolved as shift
WARNING: shift/reduce conflict for READ in state 51 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 51 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 51 resolved as shift
WARNING: shift/reduce conflict for IF in state 51 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 51 resolved as shift
WARNING: shift/reduce conflict for FOR in state 51 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 51 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 51 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 51 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 51 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for READ in state 52 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 52 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 52 resolved as shift
WARNING: shift/reduce conflict for FOR in state 52 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 52 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 52 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 52 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 52 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 53 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 127 resolved as shift
WARNING: shift/reduce conflict for ID in state 171 resolved as shift
WARNING: shift/reduce conflict for READ in state 171 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 171 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 171 resolved as shift
WARNING: shift/reduce conflict for IF in state 171 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 171 resolved as shift
WARNING: shift/reduce conflict for FOR in state 171 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 171 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 171 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 171 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 171 resolved as shift
WARNING: shift/reduce conflict for ID in state 193 resolved as shift
WARNING: shift/reduce conflict for READ in state 193 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 193 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 193 resolved as shift
WARNING: shift/reduce conflict for IF in state 193 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 193 resolved as shift
WARNING: shift/reduce conflict for FOR in state 193 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 193 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 193 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 193 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 193 resolved as shift
WARNING: shift/reduce conflict for ID in state 194 resolved as shift
WARNING: shift/reduce conflict for READ in state 194 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 194 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 194 resolved as shift
WARNING: shift/reduce conflict for IF in state 194 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 194 resolved as shift
WARNING: shift/reduce conflict for FOR in state 194 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 194 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 194 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 194 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 194 resolved as shift
WARNING: shift/reduce conflict for ID in state 211 resolved as shift
WARNING: shift/reduce conflict for READ in state 211 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 211 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 211 resolved as shift
WARNING: shift/reduce conflict for IF in state 211 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 211 resolved as shift
WARNING: shift/reduce conflict for FOR in state 211 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 211 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 211 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 211 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 211 resolved as shift
WARNING: shift/reduce conflict for ID in state 212 resolved as shift
WARNING: shift/reduce conflict for READ in state 212 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 212 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 212 resolved as shift
WARNING: shift/reduce conflict for IF in state 212 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 212 resolved as shift
WARNING: shift/reduce conflict for FOR in state 212 resolved as shift
WARNING: shift/reduce conflict for LEFTPAR in state 212 resolved as shift
WARNING: shift/reduce conflict for CTEINT in state 212 resolved as shift
WARNING: shift/reduce conflict for CTEFLOAT in state 212 resolved as shift
WARNING: shift/reduce conflict for CTECHAR in state 212 resolved as shift
WARNING: reduce/reduce conflict in state 79 resolved using rule (statutesaux -> empty)
WARNING: rejected rule (specialfunc -> empty) in state 79
WARNING: reduce/reduce conflict in state 141 resolved using rule (writetyping -> CTECHAR)
WARNING: rejected rule (cteexp -> CTECHAR) in state 141
