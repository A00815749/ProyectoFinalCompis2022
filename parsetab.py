
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'STRING ID PLUS REST TIMES DIVIDE GREATER GREATERAND LESSER LESSERAND SAME NOTSAME NOT EQUAL LEFTBR RIGHTBR LEFTPAR RIGHTPAR LEFTSQR RIGHTSQR COLON SEMICOLON COMMA CTEINT CTEFLOAT CTECHAR PROGRAM MAIN FUNCTION VARS INT FLOAT CHAR STR RETURN READ WRITE AND OR IF THEN ELSE WHILE DO FOR TO VOID TRUE FALSE MEDIA MEDIANA MODA VARIANZA STDEV PLOTXY\n    program : PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR neuralmainjump statutes RIGHTBR\n    \n    neuraltablefunctions : ID\n    \n    neuralmainjump :\n    \n    varsgl : VARS vars\n            | empty\n    \n    vars : typing COLON neuralinsertvar varsarr varsmul vars\n            | empty\n    \n    neuralinsertvar : ID\n    \n    varsmul : COMMA neuralinsertvar varsarr varsmul\n            | SEMICOLON\n    \n    varsarr : initdim CTEINT enddim\n        | empty\n    \n    initdim : LEFTSQR\n    \n    enddim : RIGHTSQR\n    \n    idarray : initarray exp verify RIGHTSQR\n            | empty\n    \n    initarray : LEFTSQR\n    \n    verify : \n    \n    typing : INT\n            | FLOAT\n            | CHAR\n    \n    modules : FUNCTION functype neuralinsertfuncname funcparam\n            | empty\n    \n    neuralinsertfuncname : ID\n    \n    functype : VOID\n            | typing\n    \n    funcparam : LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR startfunc statutes RIGHTBR funcsize neuralendfuncs modules\n    \n    neuralendfuncs : \n    \n    funcsize :\n    \n    startfunc :\n    \n    parameters : typing COLON neuralinsertid idarray mulparams\n            | empty\n    \n    neuralinsertid : ID\n    \n    mulparams : COMMA parameters\n            | empty\n    \n    returning : RETURN LEFTPAR exp RIGHTPAR SEMICOLON\n    \n    paramsexp : LEFTPAR neuralera paramsexp2 neuralpar\n                | idarray\n    \n    paramsexp2 : exp neuralpar2 auxparamsexp2\n            | empty\n    \n    auxparamsexp2 : COMMA exp neuralpar2 auxparamsexp2\n            | empty\n    \n    neuralera :\n    \n    neuralpar : RIGHTPAR\n    \n    neuralpar2 :\n    \n    statutes : assign statutesaux\n            | reading statutesaux\n            | writing statutesaux\n            | returning statutesaux\n            | ifing statutesaux\n            | whiling statutesaux\n            | foring statutesaux\n            | exp statutesaux\n            | specialfunc statutesaux\n    \n    statutesaux : statutes \n                | empty\n    \n    specialfunc : empty\n    \n    assign : neuralassign1 idarray neuralassign2 assignexp SEMICOLON \n    \n    neuralassign1 : ID\n    \n    neuralassign2 : EQUAL\n    \n    assignexp : exp\n    \n    writing : WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON\n    \n    auxwrite : writetyping\n            | exp\n    \n    writetyping : STRING\n            | CTECHAR\n    \n    mulwrite : COMMA auxwrite mulwrite\n            | empty\n    \n    reading : READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON\n    \n    neuralread : ID\n    \n    mulread : COMMA ID idarray mulread\n            | empty\n    \n    ifing : IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing\n    \n    neuralif : RIGHTPAR\n    \n    elsing : neuralelse LEFTBR statutes RIGHTBR\n            | empty\n    \n    neuralelse : ELSE\n    \n    whiling : neuralwhile1 LEFTPAR exp neuralwhile2 DO LEFTBR statutes RIGHTBR\n    \n    neuralwhile1 : WHILE\n    \n    neuralwhile2 : RIGHTPAR\n    \n    foring : FOR neuralfor1 idarray EQUAL exp neuralfor2 exp neuralfor3 LEFTBR statutes RIGHTBR\n    \n    neuralfor1 : ID\n    \n    neuralfor2 : TO\n    \n    neuralfor3 : DO\n    \n    exp : andexp exp1\n    \n    exp1 : OR exp\n        | empty\n    \n    andexp : boolexp andexp1\n    \n    andexp1 : neuraland andexp\n        | empty\n    \n    neuraland : AND\n    \n    boolexp : arithexp boolexp1\n    \n    boolexp1 : neuralbool arithexp\n        | empty\n    \n    neuralbool : GREATER \n        | GREATERAND \n        | LESSER \n        | LESSERAND \n        | SAME \n        | NOTSAME \n        | NOT \n    \n    arithexp : geoexp arithexp1\n    \n    arithexp1 : neuralarith arithexp\n        | empty\n    \n    neuralarith : PLUS\n                | REST\n    \n    geoexp : finexp geoexp1\n    \n    geoexp1 : neuralgeo geoexp\n        | empty\n    \n    neuralgeo : TIMES\n            | DIVIDE\n    \n    addparenth : LEFTPAR\n    \n    popparenth : RIGHTPAR\n    \n    finexp : addparenth exp popparenth\n            | cteexp\n    \n    cteexp : CTEINT\n            | CTEFLOAT\n            | CTECHAR\n            | ID neuralexist paramsexp\n    \n    neuralexist :\n    \n    empty : \n    \n    debug : empty\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,85,],[0,-1,]),'ID':([2,15,16,17,19,20,21,22,35,40,43,45,50,52,53,54,55,56,57,58,59,60,67,68,69,70,72,73,74,75,76,77,78,79,80,88,98,99,100,101,102,103,104,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,141,142,155,156,157,158,159,160,161,162,163,164,165,174,181,182,183,185,186,188,192,202,204,205,206,207,208,209,212,218,222,223,228,230,232,235,239,240,],[4,-19,-20,-21,25,-25,-26,27,-3,27,70,83,-112,70,70,70,70,70,70,70,70,70,107,-121,-57,-120,-121,-121,-121,-121,137,-115,-116,-117,-118,-57,137,-16,-17,145,137,137,137,137,-85,137,-87,-121,-88,137,-90,-91,-92,137,-94,-95,-96,-97,-98,-99,-100,-101,-102,137,-104,-105,-106,-107,137,-109,-110,-111,-120,137,-60,-86,-119,-43,-38,-89,-93,-103,-108,-114,-113,-30,137,137,137,70,-58,-15,201,-36,-62,70,70,137,-83,-37,-44,-69,137,-121,-78,-73,-76,70,70,-81,-75,]),'SEMICOLON':([3,4,26,27,31,33,44,47,48,49,68,72,73,74,75,77,78,79,80,84,99,108,110,111,112,114,116,118,126,128,131,133,137,155,156,158,159,160,161,162,163,164,169,170,176,186,190,200,208,209,],[5,-2,-121,-8,41,-12,81,-121,-11,-14,-121,-121,-121,-121,-121,-115,-116,-117,-118,41,-16,-85,-87,-121,-88,-90,-92,-94,-102,-104,-107,-109,-120,-86,-119,-38,-89,-93,-103,-108,-114,-113,185,-61,192,-15,202,212,-37,-44,]),'VARS':([5,81,],[7,7,]),'FUNCTION':([5,6,7,8,12,14,39,41,46,140,211,220,227,],[-121,10,-121,-5,-4,-7,-121,-10,-6,-9,-29,-28,10,]),'MAIN':([5,6,7,8,9,11,12,14,29,39,41,46,140,211,220,227,234,],[-121,-121,-121,-5,18,-23,-4,-7,-22,-121,-10,-6,-9,-29,-28,-121,-27,]),'INT':([7,10,30,39,41,140,167,],[15,15,15,15,-10,-9,15,]),'FLOAT':([7,10,30,39,41,140,167,],[16,16,16,16,-10,-9,16,]),'CHAR':([7,10,30,39,41,140,167,],[17,17,17,17,-10,-9,17,]),'LEFTBR':([7,8,12,14,28,39,41,46,81,138,140,193,194,224,225,229,231,],[-121,-5,-4,-7,35,-121,-10,-6,-121,165,-9,204,205,232,-84,235,-77,]),'VOID':([10,],[20,]),'COLON':([13,15,16,17,37,],[22,-19,-20,-21,45,]),'LEFTPAR':([18,24,25,35,43,50,52,53,54,55,56,57,58,59,60,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,88,98,99,100,102,103,104,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,141,142,155,156,157,158,159,160,161,162,163,164,165,174,181,182,183,185,186,192,202,204,205,206,207,208,209,212,218,222,223,228,230,232,235,239,240,],[23,30,-24,-3,50,-112,50,50,50,50,50,50,50,50,50,101,102,103,104,105,-121,-57,-120,-79,-121,-121,-121,-121,50,-115,-116,-117,-118,-57,50,-16,-17,50,50,50,50,-85,50,-87,157,-88,50,-90,-91,-92,50,-94,-95,-96,-97,-98,-99,-100,-101,-102,50,-104,-105,-106,-107,50,-109,-110,-111,-120,50,-60,-86,-119,-43,-38,-89,-93,-103,-108,-114,-113,-30,50,50,50,50,-58,-15,-36,-62,50,50,50,-83,-37,-44,-69,50,-121,-78,-73,-76,50,50,-81,-75,]),'RIGHTPAR':([23,30,36,38,68,72,73,74,75,77,78,79,80,82,83,99,108,110,111,112,114,116,118,126,128,131,133,136,137,139,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,160,161,162,163,164,166,167,168,172,173,175,182,184,186,187,189,191,196,197,198,201,203,208,209,210,213,217,219,221,226,233,237,],[28,-121,44,-32,-121,-121,-121,-121,-121,-115,-116,-117,-118,-121,-33,-16,-85,-87,-121,-88,-90,-92,-94,-102,-104,-107,-109,164,-120,-121,-121,-70,-121,-63,-64,-65,-66,176,178,180,-86,-119,-43,-38,-89,-93,-103,-108,-114,-113,-31,-121,-35,-121,190,-68,-121,-34,-15,200,-72,-121,209,-45,-40,-121,-67,-37,-44,-121,-121,-39,-42,-71,-45,-121,-41,]),'LEFTSQR':([26,27,47,61,70,82,83,106,107,111,137,144,145,201,],[34,-8,34,100,-59,100,-33,100,-82,100,-120,100,-70,100,]),'COMMA':([26,27,31,33,47,48,49,68,72,73,74,75,77,78,79,80,82,83,84,99,108,110,111,112,114,116,118,126,128,131,133,137,139,144,145,146,147,148,149,150,155,156,158,159,160,161,162,163,164,172,186,191,197,201,208,209,210,213,226,233,],[-121,-8,40,-12,-121,-11,-14,-121,-121,-121,-121,-121,-115,-116,-117,-118,-121,-33,40,-16,-85,-87,-121,-88,-90,-92,-94,-102,-104,-107,-109,-120,167,-121,-70,174,-63,-64,-65,-66,-86,-119,-38,-89,-93,-103,-108,-114,-113,188,-15,174,-45,-121,-37,-44,218,188,-45,218,]),'CTEINT':([32,34,35,43,50,52,53,54,55,56,57,58,59,60,68,69,70,72,73,74,75,76,77,78,79,80,88,98,99,100,102,103,104,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,141,142,155,156,157,158,159,160,161,162,163,164,165,174,181,182,183,185,186,192,202,204,205,206,207,208,209,212,218,222,223,228,230,232,235,239,240,],[42,-13,-3,78,-112,78,78,78,78,78,78,78,78,78,-121,-57,-120,-121,-121,-121,-121,78,-115,-116,-117,-118,-57,78,-16,-17,78,78,78,78,-85,78,-87,-121,-88,78,-90,-91,-92,78,-94,-95,-96,-97,-98,-99,-100,-101,-102,78,-104,-105,-106,-107,78,-109,-110,-111,-120,78,-60,-86,-119,-43,-38,-89,-93,-103,-108,-114,-113,-30,78,78,78,78,-58,-15,-36,-62,78,78,78,-83,-37,-44,-69,78,-121,-78,-73,-76,78,78,-81,-75,]),'READ':([35,43,52,53,54,55,56,57,58,59,60,68,69,70,72,73,74,75,77,78,79,80,88,99,108,110,111,112,114,116,118,126,128,131,133,137,155,156,158,159,160,161,162,163,164,165,183,185,186,192,202,204,205,208,209,212,222,223,228,230,232,235,239,240,],[-3,62,62,62,62,62,62,62,62,62,62,-121,-57,-120,-121,-121,-121,-121,-115,-116,-117,-118,-57,-16,-85,-87,-121,-88,-90,-92,-94,-102,-104,-107,-109,-120,-86,-119,-38,-89,-93,-103,-108,-114,-113,-30,62,-58,-15,-36,-62,62,62,-37,-44,-69,-121,-78,-73,-76,62,62,-81,-75,]),'WRITE':([35,43,52,53,54,55,56,57,58,59,60,68,69,70,72,73,74,75,77,78,79,80,88,99,108,110,111,112,114,116,118,126,128,131,133,137,155,156,158,159,160,161,162,163,164,165,183,185,186,192,202,204,205,208,209,212,222,223,228,230,232,235,239,240,],[-3,63,63,63,63,63,63,63,63,63,63,-121,-57,-120,-121,-121,-121,-121,-115,-116,-117,-118,-57,-16,-85,-87,-121,-88,-90,-92,-94,-102,-104,-107,-109,-120,-86,-119,-38,-89,-93,-103,-108,-114,-113,-30,63,-58,-15,-36,-62,63,63,-37,-44,-69,-121,-78,-73,-76,63,63,-81,-75,]),'RETURN':([35,43,52,53,54,55,56,57,58,59,60,68,69,70,72,73,74,75,77,78,79,80,88,99,108,110,111,112,114,116,118,126,128,131,133,137,155,156,158,159,160,161,162,163,164,165,183,185,186,192,202,204,205,208,209,212,222,223,228,230,232,235,239,240,],[-3,64,64,64,64,64,64,64,64,64,64,-121,-57,-120,-121,-121,-121,-121,-115,-116,-117,-118,-57,-16,-85,-87,-121,-88,-90,-92,-94,-102,-104,-107,-109,-120,-86,-119,-38,-89,-93,-103,-108,-114,-113,-30,64,-58,-15,-36,-62,64,64,-37,-44,-69,-121,-78,-73,-76,64,64,-81,-75,]),'IF':([35,43,52,53,54,55,56,57,58,59,60,68,69,70,72,73,74,75,77,78,79,80,88,99,108,110,111,112,114,116,118,126,128,131,133,137,155,156,158,159,160,161,162,163,164,165,183,185,186,192,202,204,205,208,209,212,222,223,228,230,232,235,239,240,],[-3,65,65,65,65,65,65,65,65,65,65,-121,-57,-120,-121,-121,-121,-121,-115,-116,-117,-118,-57,-16,-85,-87,-121,-88,-90,-92,-94,-102,-104,-107,-109,-120,-86,-119,-38,-89,-93,-103,-108,-114,-113,-30,65,-58,-15,-36,-62,65,65,-37,-44,-69,-121,-78,-73,-76,65,65,-81,-75,]),'FOR':([35,43,52,53,54,55,56,57,58,59,60,68,69,70,72,73,74,75,77,78,79,80,88,99,108,110,111,112,114,116,118,126,128,131,133,137,155,156,158,159,160,161,162,163,164,165,183,185,186,192,202,204,205,208,209,212,222,223,228,230,232,235,239,240,],[-3,67,67,67,67,67,67,67,67,67,67,-121,-57,-120,-121,-121,-121,-121,-115,-116,-117,-118,-57,-16,-85,-87,-121,-88,-90,-92,-94,-102,-104,-107,-109,-120,-86,-119,-38,-89,-93,-103,-108,-114,-113,-30,67,-58,-15,-36,-62,67,67,-37,-44,-69,-121,-78,-73,-76,67,67,-81,-75,]),'WHILE':([35,43,52,53,54,55,56,57,58,59,60,68,69,70,72,73,74,75,77,78,79,80,88,99,108,110,111,112,114,116,118,126,128,131,133,137,155,156,158,159,160,161,162,163,164,165,183,185,186,192,202,204,205,208,209,212,222,223,228,230,232,235,239,240,],[-3,71,71,71,71,71,71,71,71,71,71,-121,-57,-120,-121,-121,-121,-121,-115,-116,-117,-118,-57,-16,-85,-87,-121,-88,-90,-92,-94,-102,-104,-107,-109,-120,-86,-119,-38,-89,-93,-103,-108,-114,-113,-30,71,-58,-15,-36,-62,71,71,-37,-44,-69,-121,-78,-73,-76,71,71,-81,-75,]),'CTEFLOAT':([35,43,50,52,53,54,55,56,57,58,59,60,68,69,70,72,73,74,75,76,77,78,79,80,88,98,99,100,102,103,104,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,141,142,155,156,157,158,159,160,161,162,163,164,165,174,181,182,183,185,186,192,202,204,205,206,207,208,209,212,218,222,223,228,230,232,235,239,240,],[-3,79,-112,79,79,79,79,79,79,79,79,79,-121,-57,-120,-121,-121,-121,-121,79,-115,-116,-117,-118,-57,79,-16,-17,79,79,79,79,-85,79,-87,-121,-88,79,-90,-91,-92,79,-94,-95,-96,-97,-98,-99,-100,-101,-102,79,-104,-105,-106,-107,79,-109,-110,-111,-120,79,-60,-86,-119,-43,-38,-89,-93,-103,-108,-114,-113,-30,79,79,79,79,-58,-15,-36,-62,79,79,79,-83,-37,-44,-69,79,-121,-78,-73,-76,79,79,-81,-75,]),'CTECHAR':([35,43,50,52,53,54,55,56,57,58,59,60,68,69,70,72,73,74,75,76,77,78,79,80,88,98,99,100,102,103,104,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,141,142,155,156,157,158,159,160,161,162,163,164,165,174,181,182,183,185,186,192,202,204,205,206,207,208,209,212,218,222,223,228,230,232,235,239,240,],[-3,80,-112,80,80,80,80,80,80,80,80,80,-121,-57,-120,-121,-121,-121,-121,80,-115,-116,-117,-118,-57,80,-16,-17,150,80,80,80,-85,80,-87,-121,-88,80,-90,-91,-92,80,-94,-95,-96,-97,-98,-99,-100,-101,-102,80,-104,-105,-106,-107,80,-109,-110,-111,-120,80,-60,-86,-119,-43,-38,-89,-93,-103,-108,-114,-113,-30,150,80,80,80,-58,-15,-36,-62,80,80,80,-83,-37,-44,-69,80,-121,-78,-73,-76,80,80,-81,-75,]),'RIGHTBR':([35,43,51,52,53,54,55,56,57,58,59,60,68,69,70,72,73,74,75,77,78,79,80,86,87,88,89,90,91,92,93,94,95,96,99,108,110,111,112,114,116,118,126,128,131,133,137,155,156,158,159,160,161,162,163,164,165,183,185,186,192,199,202,204,205,208,209,212,214,215,222,223,228,230,232,235,236,238,239,240,],[-3,-121,85,-121,-121,-121,-121,-121,-121,-121,-121,-121,-121,-57,-120,-121,-121,-121,-121,-115,-116,-117,-118,-46,-55,-56,-47,-48,-49,-50,-51,-52,-53,-54,-16,-85,-87,-121,-88,-90,-92,-94,-102,-104,-107,-109,-120,-86,-119,-38,-89,-93,-103,-108,-114,-113,-30,-121,-58,-15,-36,211,-62,-121,-121,-37,-44,-69,222,223,-121,-78,-73,-76,-121,-121,239,240,-81,-75,]),'RIGHTSQR':([42,68,72,73,74,75,77,78,79,80,99,108,110,111,112,114,116,118,126,128,131,133,137,143,155,156,158,159,160,161,162,163,164,171,186,208,209,],[49,-121,-121,-121,-121,-121,-115,-116,-117,-118,-16,-85,-87,-121,-88,-90,-92,-94,-102,-104,-107,-109,-120,-18,-86,-119,-38,-89,-93,-103,-108,-114,-113,186,-15,-37,-44,]),'EQUAL':([61,70,97,99,106,107,154,186,],[-121,-59,142,-16,-121,-82,181,-15,]),'OR':([68,70,72,73,74,75,77,78,79,80,99,111,112,114,116,118,126,128,131,133,137,150,156,158,159,160,161,162,163,164,186,208,209,],[109,-120,-121,-121,-121,-121,-115,-116,-117,-118,-16,-121,-88,-90,-92,-94,-102,-104,-107,-109,-120,-118,-119,-38,-89,-93,-103,-108,-114,-113,-15,-37,-44,]),'TO':([68,72,73,74,75,77,78,79,80,99,108,110,111,112,114,116,118,126,128,131,133,137,155,156,158,159,160,161,162,163,164,186,195,208,209,],[-121,-121,-121,-121,-121,-115,-116,-117,-118,-16,-85,-87,-121,-88,-90,-92,-94,-102,-104,-107,-109,-120,-86,-119,-38,-89,-93,-103,-108,-114,-113,-15,207,-37,-44,]),'DO':([68,72,73,74,75,77,78,79,80,99,108,110,111,112,114,116,118,126,128,131,133,137,155,156,158,159,160,161,162,163,164,179,180,186,208,209,216,],[-121,-121,-121,-121,-121,-115,-116,-117,-118,-16,-85,-87,-121,-88,-90,-92,-94,-102,-104,-107,-109,-120,-86,-119,-38,-89,-93,-103,-108,-114,-113,194,-80,-15,-37,-44,225,]),'TIMES':([70,75,77,78,79,80,99,111,137,150,156,158,163,164,186,208,209,],[-120,134,-115,-116,-117,-118,-16,-121,-120,-118,-119,-38,-114,-113,-15,-37,-44,]),'DIVIDE':([70,75,77,78,79,80,99,111,137,150,156,158,163,164,186,208,209,],[-120,135,-115,-116,-117,-118,-16,-121,-120,-118,-119,-38,-114,-113,-15,-37,-44,]),'PLUS':([70,74,75,77,78,79,80,99,111,131,133,137,150,156,158,162,163,164,186,208,209,],[-120,129,-121,-115,-116,-117,-118,-16,-121,-107,-109,-120,-118,-119,-38,-108,-114,-113,-15,-37,-44,]),'REST':([70,74,75,77,78,79,80,99,111,131,133,137,150,156,158,162,163,164,186,208,209,],[-120,130,-121,-115,-116,-117,-118,-16,-121,-107,-109,-120,-118,-119,-38,-108,-114,-113,-15,-37,-44,]),'GREATER':([70,73,74,75,77,78,79,80,99,111,126,128,131,133,137,150,156,158,161,162,163,164,186,208,209,],[-120,119,-121,-121,-115,-116,-117,-118,-16,-121,-102,-104,-107,-109,-120,-118,-119,-38,-103,-108,-114,-113,-15,-37,-44,]),'GREATERAND':([70,73,74,75,77,78,79,80,99,111,126,128,131,133,137,150,156,158,161,162,163,164,186,208,209,],[-120,120,-121,-121,-115,-116,-117,-118,-16,-121,-102,-104,-107,-109,-120,-118,-119,-38,-103,-108,-114,-113,-15,-37,-44,]),'LESSER':([70,73,74,75,77,78,79,80,99,111,126,128,131,133,137,150,156,158,161,162,163,164,186,208,209,],[-120,121,-121,-121,-115,-116,-117,-118,-16,-121,-102,-104,-107,-109,-120,-118,-119,-38,-103,-108,-114,-113,-15,-37,-44,]),'LESSERAND':([70,73,74,75,77,78,79,80,99,111,126,128,131,133,137,150,156,158,161,162,163,164,186,208,209,],[-120,122,-121,-121,-115,-116,-117,-118,-16,-121,-102,-104,-107,-109,-120,-118,-119,-38,-103,-108,-114,-113,-15,-37,-44,]),'SAME':([70,73,74,75,77,78,79,80,99,111,126,128,131,133,137,150,156,158,161,162,163,164,186,208,209,],[-120,123,-121,-121,-115,-116,-117,-118,-16,-121,-102,-104,-107,-109,-120,-118,-119,-38,-103,-108,-114,-113,-15,-37,-44,]),'NOTSAME':([70,73,74,75,77,78,79,80,99,111,126,128,131,133,137,150,156,158,161,162,163,164,186,208,209,],[-120,124,-121,-121,-115,-116,-117,-118,-16,-121,-102,-104,-107,-109,-120,-118,-119,-38,-103,-108,-114,-113,-15,-37,-44,]),'NOT':([70,73,74,75,77,78,79,80,99,111,126,128,131,133,137,150,156,158,161,162,163,164,186,208,209,],[-120,125,-121,-121,-115,-116,-117,-118,-16,-121,-102,-104,-107,-109,-120,-118,-119,-38,-103,-108,-114,-113,-15,-37,-44,]),'AND':([70,72,73,74,75,77,78,79,80,99,111,116,118,126,128,131,133,137,150,156,158,160,161,162,163,164,186,208,209,],[-120,115,-121,-121,-121,-115,-116,-117,-118,-16,-121,-92,-94,-102,-104,-107,-109,-120,-118,-119,-38,-93,-103,-108,-114,-113,-15,-37,-44,]),'STRING':([102,174,],[149,149,]),'THEN':([177,178,],[193,-74,]),'ELSE':([222,],[231,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'neuraltablefunctions':([2,],[3,]),'varsgl':([5,81,],[6,138,]),'empty':([5,6,7,26,30,39,43,47,52,53,54,55,56,57,58,59,60,61,68,72,73,74,75,81,82,106,111,139,144,146,167,172,182,183,191,201,204,205,210,213,222,227,232,233,235,],[8,11,14,33,38,14,69,33,88,88,88,88,88,88,88,88,88,99,110,114,118,128,133,8,99,99,99,168,99,175,38,189,198,69,175,99,69,69,219,189,230,11,69,219,69,]),'modules':([6,227,],[9,234,]),'vars':([7,39,],[12,46,]),'typing':([7,10,30,39,167,],[13,21,37,13,37,]),'functype':([10,],[19,]),'neuralinsertfuncname':([19,],[24,]),'neuralinsertvar':([22,40,],[26,47,]),'funcparam':([24,],[29,]),'varsarr':([26,47,],[31,84,]),'initdim':([26,47,],[32,32,]),'parameters':([30,167,],[36,184,]),'varsmul':([31,84,],[39,140,]),'neuralmainjump':([35,],[43,]),'enddim':([42,],[48,]),'statutes':([43,52,53,54,55,56,57,58,59,60,183,204,205,232,235,],[51,87,87,87,87,87,87,87,87,87,199,214,215,236,238,]),'assign':([43,52,53,54,55,56,57,58,59,60,183,204,205,232,235,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'reading':([43,52,53,54,55,56,57,58,59,60,183,204,205,232,235,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'writing':([43,52,53,54,55,56,57,58,59,60,183,204,205,232,235,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'returning':([43,52,53,54,55,56,57,58,59,60,183,204,205,232,235,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'ifing':([43,52,53,54,55,56,57,58,59,60,183,204,205,232,235,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'whiling':([43,52,53,54,55,56,57,58,59,60,183,204,205,232,235,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'foring':([43,52,53,54,55,56,57,58,59,60,183,204,205,232,235,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'exp':([43,52,53,54,55,56,57,58,59,60,76,98,102,103,104,105,109,141,174,181,182,183,204,205,206,218,232,235,],[59,59,59,59,59,59,59,59,59,59,136,143,148,151,152,153,155,170,148,195,197,59,59,59,216,226,59,59,]),'specialfunc':([43,52,53,54,55,56,57,58,59,60,183,204,205,232,235,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'neuralassign1':([43,52,53,54,55,56,57,58,59,60,183,204,205,232,235,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'neuralwhile1':([43,52,53,54,55,56,57,58,59,60,183,204,205,232,235,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'andexp':([43,52,53,54,55,56,57,58,59,60,76,98,102,103,104,105,109,113,141,174,181,182,183,204,205,206,218,232,235,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,159,68,68,68,68,68,68,68,68,68,68,68,]),'boolexp':([43,52,53,54,55,56,57,58,59,60,76,98,102,103,104,105,109,113,141,174,181,182,183,204,205,206,218,232,235,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'arithexp':([43,52,53,54,55,56,57,58,59,60,76,98,102,103,104,105,109,113,117,127,141,174,181,182,183,204,205,206,218,232,235,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,160,161,73,73,73,73,73,73,73,73,73,73,73,]),'geoexp':([43,52,53,54,55,56,57,58,59,60,76,98,102,103,104,105,109,113,117,127,132,141,174,181,182,183,204,205,206,218,232,235,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,162,74,74,74,74,74,74,74,74,74,74,74,]),'finexp':([43,52,53,54,55,56,57,58,59,60,76,98,102,103,104,105,109,113,117,127,132,141,174,181,182,183,204,205,206,218,232,235,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'addparenth':([43,52,53,54,55,56,57,58,59,60,76,98,102,103,104,105,109,113,117,127,132,141,174,181,182,183,204,205,206,218,232,235,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'cteexp':([43,52,53,54,55,56,57,58,59,60,76,98,102,103,104,105,109,113,117,127,132,141,174,181,182,183,204,205,206,218,232,235,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'neuralinsertid':([45,],[82,]),'statutesaux':([52,53,54,55,56,57,58,59,60,],[86,89,90,91,92,93,94,95,96,]),'idarray':([61,82,106,111,144,201,],[97,139,154,158,172,213,]),'initarray':([61,82,106,111,144,201,],[98,98,98,98,98,98,]),'neuralfor1':([67,],[106,]),'exp1':([68,],[108,]),'neuralexist':([70,137,],[111,111,]),'andexp1':([72,],[112,]),'neuraland':([72,],[113,]),'boolexp1':([73,],[116,]),'neuralbool':([73,],[117,]),'arithexp1':([74,],[126,]),'neuralarith':([74,],[127,]),'geoexp1':([75,],[131,]),'neuralgeo':([75,],[132,]),'neuralassign2':([97,],[141,]),'neuralread':([101,],[144,]),'auxwrite':([102,174,],[146,191,]),'writetyping':([102,174,],[147,147,]),'paramsexp':([111,],[156,]),'popparenth':([136,],[163,]),'mulparams':([139,],[166,]),'assignexp':([141,],[169,]),'verify':([143,],[171,]),'mulwrite':([146,191,],[173,203,]),'neuralif':([152,],[177,]),'neuralwhile2':([153,],[179,]),'neuralera':([157,],[182,]),'startfunc':([165,],[183,]),'mulread':([172,213,],[187,221,]),'paramsexp2':([182,],[196,]),'neuralfor2':([195,],[206,]),'neuralpar':([196,],[208,]),'neuralpar2':([197,226,],[210,233,]),'auxparamsexp2':([210,233,],[217,237,]),'funcsize':([211,],[220,]),'neuralfor3':([216,],[224,]),'neuralendfuncs':([220,],[227,]),'elsing':([222,],[228,]),'neuralelse':([222,],[229,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM neuraltablefunctions SEMICOLON varsgl modules MAIN LEFTPAR RIGHTPAR LEFTBR neuralmainjump statutes RIGHTBR','program',12,'p_PROGRAM','myLexerParser.py',530),
  ('neuraltablefunctions -> ID','neuraltablefunctions',1,'p_NEURALTABLEFUNCTIONS','myLexerParser.py',550),
  ('neuralmainjump -> <empty>','neuralmainjump',0,'p_NEURALMAINJUMP','myLexerParser.py',562),
  ('varsgl -> VARS vars','varsgl',2,'p_VARSGL','myLexerParser.py',575),
  ('varsgl -> empty','varsgl',1,'p_VARSGL','myLexerParser.py',576),
  ('vars -> typing COLON neuralinsertvar varsarr varsmul vars','vars',6,'p_VARS','myLexerParser.py',581),
  ('vars -> empty','vars',1,'p_VARS','myLexerParser.py',582),
  ('neuralinsertvar -> ID','neuralinsertvar',1,'p_NEURALINSERTVAR','myLexerParser.py',587),
  ('varsmul -> COMMA neuralinsertvar varsarr varsmul','varsmul',4,'p_VARSMUL','myLexerParser.py',596),
  ('varsmul -> SEMICOLON','varsmul',1,'p_VARSMUL','myLexerParser.py',597),
  ('varsarr -> initdim CTEINT enddim','varsarr',3,'p_VARSARR','myLexerParser.py',605),
  ('varsarr -> empty','varsarr',1,'p_VARSARR','myLexerParser.py',606),
  ('initdim -> LEFTSQR','initdim',1,'p_INITDIM','myLexerParser.py',611),
  ('enddim -> RIGHTSQR','enddim',1,'p_ENDDIM','myLexerParser.py',622),
  ('idarray -> initarray exp verify RIGHTSQR','idarray',4,'p_IDARRAY','myLexerParser.py',638),
  ('idarray -> empty','idarray',1,'p_IDARRAY','myLexerParser.py',639),
  ('initarray -> LEFTSQR','initarray',1,'p_INITARRAY','myLexerParser.py',657),
  ('verify -> <empty>','verify',0,'p_VERIFY','myLexerParser.py',678),
  ('typing -> INT','typing',1,'p_TYPING','myLexerParser.py',691),
  ('typing -> FLOAT','typing',1,'p_TYPING','myLexerParser.py',692),
  ('typing -> CHAR','typing',1,'p_TYPING','myLexerParser.py',693),
  ('modules -> FUNCTION functype neuralinsertfuncname funcparam','modules',4,'p_MODULES','myLexerParser.py',703),
  ('modules -> empty','modules',1,'p_MODULES','myLexerParser.py',704),
  ('neuralinsertfuncname -> ID','neuralinsertfuncname',1,'p_NEURALINSERTFUNCNAME','myLexerParser.py',709),
  ('functype -> VOID','functype',1,'p_FUNCTYPE','myLexerParser.py',721),
  ('functype -> typing','functype',1,'p_FUNCTYPE','myLexerParser.py',722),
  ('funcparam -> LEFTPAR parameters RIGHTPAR SEMICOLON varsgl LEFTBR startfunc statutes RIGHTBR funcsize neuralendfuncs modules','funcparam',12,'p_FUNCPARAM','myLexerParser.py',727),
  ('neuralendfuncs -> <empty>','neuralendfuncs',0,'p_NEURALENDFUNCS','myLexerParser.py',734),
  ('funcsize -> <empty>','funcsize',0,'p_FUNCSIZE','myLexerParser.py',744),
  ('startfunc -> <empty>','startfunc',0,'p_STARTFUNC','myLexerParser.py',758),
  ('parameters -> typing COLON neuralinsertid idarray mulparams','parameters',5,'p_PARAMETERS','myLexerParser.py',769),
  ('parameters -> empty','parameters',1,'p_PARAMETERS','myLexerParser.py',770),
  ('neuralinsertid -> ID','neuralinsertid',1,'p_NEURALINSERTID','myLexerParser.py',775),
  ('mulparams -> COMMA parameters','mulparams',2,'p_MULPARAMS','myLexerParser.py',787),
  ('mulparams -> empty','mulparams',1,'p_MULPARAMS','myLexerParser.py',788),
  ('returning -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON','returning',5,'p_RETURNING','myLexerParser.py',795),
  ('paramsexp -> LEFTPAR neuralera paramsexp2 neuralpar','paramsexp',4,'p_PARAMSEXP','myLexerParser.py',808),
  ('paramsexp -> idarray','paramsexp',1,'p_PARAMSEXP','myLexerParser.py',809),
  ('paramsexp2 -> exp neuralpar2 auxparamsexp2','paramsexp2',3,'p_PARAMSEXP2','myLexerParser.py',814),
  ('paramsexp2 -> empty','paramsexp2',1,'p_PARAMSEXP2','myLexerParser.py',815),
  ('auxparamsexp2 -> COMMA exp neuralpar2 auxparamsexp2','auxparamsexp2',4,'p_AUXPARAMSEXP2','myLexerParser.py',820),
  ('auxparamsexp2 -> empty','auxparamsexp2',1,'p_AUXPARAMSEXP2','myLexerParser.py',821),
  ('neuralera -> <empty>','neuralera',0,'p_NEURALERA','myLexerParser.py',826),
  ('neuralpar -> RIGHTPAR','neuralpar',1,'p_NEURALPAR','myLexerParser.py',836),
  ('neuralpar2 -> <empty>','neuralpar2',0,'p_NEURALPAR2','myLexerParser.py',856),
  ('statutes -> assign statutesaux','statutes',2,'p_STATUTES','myLexerParser.py',885),
  ('statutes -> reading statutesaux','statutes',2,'p_STATUTES','myLexerParser.py',886),
  ('statutes -> writing statutesaux','statutes',2,'p_STATUTES','myLexerParser.py',887),
  ('statutes -> returning statutesaux','statutes',2,'p_STATUTES','myLexerParser.py',888),
  ('statutes -> ifing statutesaux','statutes',2,'p_STATUTES','myLexerParser.py',889),
  ('statutes -> whiling statutesaux','statutes',2,'p_STATUTES','myLexerParser.py',890),
  ('statutes -> foring statutesaux','statutes',2,'p_STATUTES','myLexerParser.py',891),
  ('statutes -> exp statutesaux','statutes',2,'p_STATUTES','myLexerParser.py',892),
  ('statutes -> specialfunc statutesaux','statutes',2,'p_STATUTES','myLexerParser.py',893),
  ('statutesaux -> statutes','statutesaux',1,'p_STATUTESAUX','myLexerParser.py',898),
  ('statutesaux -> empty','statutesaux',1,'p_STATUTESAUX','myLexerParser.py',899),
  ('specialfunc -> empty','specialfunc',1,'p_SPECIALFUNC','myLexerParser.py',904),
  ('assign -> neuralassign1 idarray neuralassign2 assignexp SEMICOLON','assign',5,'p_ASSIGN','myLexerParser.py',912),
  ('neuralassign1 -> ID','neuralassign1',1,'p_NEURALASSIGN1','myLexerParser.py',928),
  ('neuralassign2 -> EQUAL','neuralassign2',1,'p_NEURALASSIGN2','myLexerParser.py',938),
  ('assignexp -> exp','assignexp',1,'p_ASSIGNEXP','myLexerParser.py',945),
  ('writing -> WRITE LEFTPAR auxwrite mulwrite RIGHTPAR SEMICOLON','writing',6,'p_WRITING','myLexerParser.py',954),
  ('auxwrite -> writetyping','auxwrite',1,'p_AUXWRITE','myLexerParser.py',959),
  ('auxwrite -> exp','auxwrite',1,'p_AUXWRITE','myLexerParser.py',960),
  ('writetyping -> STRING','writetyping',1,'p_WRITETYPING','myLexerParser.py',968),
  ('writetyping -> CTECHAR','writetyping',1,'p_WRITETYPING','myLexerParser.py',969),
  ('mulwrite -> COMMA auxwrite mulwrite','mulwrite',3,'p_MULWRITE','myLexerParser.py',976),
  ('mulwrite -> empty','mulwrite',1,'p_MULWRITE','myLexerParser.py',977),
  ('reading -> READ LEFTPAR neuralread idarray mulread RIGHTPAR SEMICOLON','reading',7,'p_READING','myLexerParser.py',984),
  ('neuralread -> ID','neuralread',1,'p_NEURALREAD','myLexerParser.py',989),
  ('mulread -> COMMA ID idarray mulread','mulread',4,'p_MULREAD','myLexerParser.py',997),
  ('mulread -> empty','mulread',1,'p_MULREAD','myLexerParser.py',998),
  ('ifing -> IF LEFTPAR exp neuralif THEN LEFTBR statutes RIGHTBR elsing','ifing',9,'p_IFING','myLexerParser.py',1007),
  ('neuralif -> RIGHTPAR','neuralif',1,'p_NEURALIF','myLexerParser.py',1017),
  ('elsing -> neuralelse LEFTBR statutes RIGHTBR','elsing',4,'p_ELSING','myLexerParser.py',1031),
  ('elsing -> empty','elsing',1,'p_ELSING','myLexerParser.py',1032),
  ('neuralelse -> ELSE','neuralelse',1,'p_NEURALELSE','myLexerParser.py',1037),
  ('whiling -> neuralwhile1 LEFTPAR exp neuralwhile2 DO LEFTBR statutes RIGHTBR','whiling',8,'p_WHILING','myLexerParser.py',1055),
  ('neuralwhile1 -> WHILE','neuralwhile1',1,'p_NEURALWHILE1','myLexerParser.py',1068),
  ('neuralwhile2 -> RIGHTPAR','neuralwhile2',1,'p_NEURALWHILE2','myLexerParser.py',1075),
  ('foring -> FOR neuralfor1 idarray EQUAL exp neuralfor2 exp neuralfor3 LEFTBR statutes RIGHTBR','foring',11,'p_FORING','myLexerParser.py',1092),
  ('neuralfor1 -> ID','neuralfor1',1,'p_NEURALFOR1','myLexerParser.py',1109),
  ('neuralfor2 -> TO','neuralfor2',1,'p_NEURALFOR2','myLexerParser.py',1123),
  ('neuralfor3 -> DO','neuralfor3',1,'p_NEURALFOR3','myLexerParser.py',1138),
  ('exp -> andexp exp1','exp',2,'p_EXP','myLexerParser.py',1162),
  ('exp1 -> OR exp','exp1',2,'p_EXP1','myLexerParser.py',1168),
  ('exp1 -> empty','exp1',1,'p_EXP1','myLexerParser.py',1169),
  ('andexp -> boolexp andexp1','andexp',2,'p_ANDEXP','myLexerParser.py',1174),
  ('andexp1 -> neuraland andexp','andexp1',2,'p_ANDEXP1','myLexerParser.py',1180),
  ('andexp1 -> empty','andexp1',1,'p_ANDEXP1','myLexerParser.py',1181),
  ('neuraland -> AND','neuraland',1,'p_NEURALAND','myLexerParser.py',1186),
  ('boolexp -> arithexp boolexp1','boolexp',2,'p_BOOLEXP','myLexerParser.py',1199),
  ('boolexp1 -> neuralbool arithexp','boolexp1',2,'p_BOOLEXP1','myLexerParser.py',1224),
  ('boolexp1 -> empty','boolexp1',1,'p_BOOLEXP1','myLexerParser.py',1225),
  ('neuralbool -> GREATER','neuralbool',1,'p_NEURALBOOL','myLexerParser.py',1230),
  ('neuralbool -> GREATERAND','neuralbool',1,'p_NEURALBOOL','myLexerParser.py',1231),
  ('neuralbool -> LESSER','neuralbool',1,'p_NEURALBOOL','myLexerParser.py',1232),
  ('neuralbool -> LESSERAND','neuralbool',1,'p_NEURALBOOL','myLexerParser.py',1233),
  ('neuralbool -> SAME','neuralbool',1,'p_NEURALBOOL','myLexerParser.py',1234),
  ('neuralbool -> NOTSAME','neuralbool',1,'p_NEURALBOOL','myLexerParser.py',1235),
  ('neuralbool -> NOT','neuralbool',1,'p_NEURALBOOL','myLexerParser.py',1236),
  ('arithexp -> geoexp arithexp1','arithexp',2,'p_ARITHEXP','myLexerParser.py',1249),
  ('arithexp1 -> neuralarith arithexp','arithexp1',2,'p_ARITHEXP1','myLexerParser.py',1272),
  ('arithexp1 -> empty','arithexp1',1,'p_ARITHEXP1','myLexerParser.py',1273),
  ('neuralarith -> PLUS','neuralarith',1,'p_NEURALARITH','myLexerParser.py',1278),
  ('neuralarith -> REST','neuralarith',1,'p_NEURALARITH','myLexerParser.py',1279),
  ('geoexp -> finexp geoexp1','geoexp',2,'p_GEOEXP','myLexerParser.py',1290),
  ('geoexp1 -> neuralgeo geoexp','geoexp1',2,'p_GEOEXP1','myLexerParser.py',1312),
  ('geoexp1 -> empty','geoexp1',1,'p_GEOEXP1','myLexerParser.py',1313),
  ('neuralgeo -> TIMES','neuralgeo',1,'p_NEURALGEO','myLexerParser.py',1318),
  ('neuralgeo -> DIVIDE','neuralgeo',1,'p_NEURALGEO','myLexerParser.py',1319),
  ('addparenth -> LEFTPAR','addparenth',1,'p_ADDPARENTH','myLexerParser.py',1329),
  ('popparenth -> RIGHTPAR','popparenth',1,'p_POPPARENTH','myLexerParser.py',1337),
  ('finexp -> addparenth exp popparenth','finexp',3,'p_FINEXP','myLexerParser.py',1344),
  ('finexp -> cteexp','finexp',1,'p_FINEXP','myLexerParser.py',1345),
  ('cteexp -> CTEINT','cteexp',1,'p_CTEEXP','myLexerParser.py',1384),
  ('cteexp -> CTEFLOAT','cteexp',1,'p_CTEEXP','myLexerParser.py',1385),
  ('cteexp -> CTECHAR','cteexp',1,'p_CTEEXP','myLexerParser.py',1386),
  ('cteexp -> ID neuralexist paramsexp','cteexp',3,'p_CTEEXP','myLexerParser.py',1387),
  ('neuralexist -> <empty>','neuralexist',0,'p_NEURALEXIST','myLexerParser.py',1397),
  ('empty -> <empty>','empty',0,'p_empty','myLexerParser.py',1408),
  ('debug -> empty','debug',1,'p_DEBUG','myLexerParser.py',1420),
]
